ca65 V2.13.2 - (C) Copyright 1998-2005 Ullrich von Bassewitz
Main file   : jungle.asm
Current file: jungle.asm

000000r 1               ;----------------------------------------------
000000r 1               ;JUNGLE JOURNEY
000000r 1               ; Original version for the BBC by David Boddie
000000r 1               ; Atom conversion by Kees van Oss 2012
000000r 1               ;----------------------------------------------
000000r 1               	.DEFINE asm_code $2b00
000000r 1               	.DEFINE header   1		; Header Wouter Ras emulator
000000r 1               	.DEFINE filenaam "JUNGLE"
000000r 1               
000000r 1               .org asm_code-22*header
002AEA  1               
002AEA  1               .IF header
002AEA  1               ;********************************************************************
002AEA  1               ; ATM Header for Atom emulator Wouter Ras
002AEA  1               
002AEA  1               name_start:
002AEA  1  4A 55 4E 47  	.byte filenaam			; Filename
002AEE  1  4C 45        
002AF0  1               name_end:
002AF0  1  00 00 00 00  	.repeat 16-name_end+name_start	; Fill with 0 till 16 chars
002AF4  1  00 00 00 00  
002AF8  1  00 00        
002AFA  1               	  .byte $0
002AFA  1               	.endrep
002AFA  1               
002AFA  1  00 2B        	.word asm_code			; 2 bytes startaddress
002AFC  1  00 2B        	.word exec			; 2 bytes linkaddress
002AFE  1  DA 4B        	.word eind_asm-start_asm	; 2 bytes filelength
002B00  1               
002B00  1               ;********************************************************************
002B00  1               .ENDIF
002B00  1               ;complete	= $500
002B00  1               
002B00  1               exec:
002B00  1               start_asm:
002B00  1               	.include "atom.inc"
002B00  2               ;Define textcolours
002B00  2               
002B00  2               green         = $00; 00 000000
002B00  2               yellow        = $40; 01 000000
002B00  2               blue          = $80; 10 000000
002B00  2               red           = $c0; 11 000000
002B00  2               
002B00  2               .macro defblock nr,databyte
002B00  2               	.repeat nr
002B00  2               	  .byte databyte
002B00  2               	.endrep
002B00  2               .endmacro
002B00  2               
002B00  2               
002B00  1               	.include "mapcode.oph"
002B00  2               ; Copyright (C) 2011 David Boddie <david@boddie.org.uk>
002B00  2               ;
002B00  2               ; This program is free software: you can redistribute it and/or modify
002B00  2               ; it under the terms of the GNU General Public License as published by
002B00  2               ; the Free Software Foundation, either version 3 of the License, or
002B00  2               ; (at your option) any later version.
002B00  2               ;
002B00  2               ; This program is distributed in the hope that it will be useful,
002B00  2               ; but WITHOUT ANY WARRANTY; without even the implied warranty of
002B00  2               ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
002B00  2               ; GNU General Public License for more details.
002B00  2               ;
002B00  2               ; You should have received a copy of the GNU General Public License
002B00  2               ; along with this program.  If not, see <http://www.gnu.org/licenses/>.
002B00  2               
002B00  2  4C 2E 49     jmp main
002B03  2               
002B03  2  64 EF B7 90  seeds:         .byte 100, 239, 183, 144   ; $ef, $b7, $90, $d6, $89
002B07  2  05 03 05 0A  start_rooms_x: .byte 5,   3,   5,   10
002B0B  2  05 08 01 08  start_rooms_y: .byte 5,   8,   1,   8
002B0F  2  07 09 03 00  exit_rooms_x:  .byte 7,   9,   3,   0
002B13  2  00 00 09 0A  exit_rooms_y:  .byte 0,   0,   9,   10
002B17  2               
002B17  2               ; These values need to be kept in sync - the room numbers must match their
002B17  2               ; positions in the room array.
002B17  2  01 05 0A 01  key_rooms_x:   .byte 1,   5,  10,   1
002B1B  2  00 02 06 04  key_rooms_y:   .byte 0,   2,   6,   4
002B1F  2  01 1B 4C 2D  key_rooms:     .byte 1,  27,  76,  45  ; ky*11 + kx
002B23  2               
002B23  2  06 05 07 01  treasure_table:  .byte 6, 5, 7, 1, 1, 5, 2, 7, 6, 2, 1, 7, 1, 7, 8, 7
002B27  2  01 05 02 07  
002B2B  2  06 02 01 07  
002B33  2  00 07 06 07  treasure_table_: .byte 0, 7, 6, 7, 7, 7, 5, 0, 6, 3, 7, 7, 5, 7, 5, 0
002B37  2  07 07 05 00  
002B3B  2  06 03 07 07  
002B43  2               
002B43  2               unlimited_values:   ; $7c,$7d=first,second
002B43  2                                   ; Add $7c and $7d, store the result in $7d and the original
002B43  2                                   ; $7d value in $7c, returning the sum in the accumulator.
002B43  2  A5 7C            lda $7c
002B45  2  85 7B            sta $7b
002B47  2  A5 7D            lda $7d
002B49  2  85 7C            sta $7c
002B4B  2  65 7B            adc $7b
002B4D  2  85 7D            sta $7d
002B4F  2  18               clc
002B50  2  60               rts
002B51  2               
002B51  2               mod9:               ; A = value
002B51  2                   divide_loop:
002B51  2  C9 09                cmp #9
002B53  2  90 06                bcc after_divide_loop   ; bmi should work here, I think, but it doesn't
002B55  2  38                   sec
002B56  2  E9 09                sbc #9
002B58  2  4C 51 2B             jmp divide_loop
002B5B  2               
002B5B  2               after_divide_loop:
002B5B  2  18               clc
002B5C  2  60               rts             ; A % 9
002B5D  2               
002B5D  2  00 01 00 00  tile_values_map: .byte 0,1,0,0,0,0,2,3
002B61  2  00 00 02 03  
002B65  2               
002B65  2               next_value:         ; no argument
002B65  2  20 43 2B         jsr unlimited_values
002B68  2  A5 7D            lda $7d
002B6A  2  20 51 2B         jsr mod9
002B6D  2  29 07            and #7          ; (next value % 9) & 7
002B6F  2  AA               tax
002B70  2  BD 5D 2B         lda tile_values_map,x
002B73  2  85 7B            sta $7b
002B75  2  60               rts
002B76  2               
002B76  2               ; Room filling routines, writing to 0x579c to 0x57ff.
002B76  2               
002B76  2               draw_top_line:      ; $76=tile number for exit/wall
002B76  2  A2 09            ldx #9
002B78  2  A9 02            lda #2
002B7A  2               
002B7A  2                   draw_top_line_loop0:
002B7A  2  9D 71 55             sta L579c,x
002B7D  2  CA                   dex
002B7E  2  10 FA                bpl draw_top_line_loop0
002B80  2               
002B80  2  A2 03            ldx #3                      ; draw the exit or wall
002B82  2  A5 76            lda $76
002B84  2                   draw_top_line_loop1:
002B84  2  9D 74 55             sta L579c+3,x
002B87  2  CA                   dex
002B88  2  10 FA                bpl draw_top_line_loop1
002B8A  2  18               clc
002B8B  2  60               rts
002B8C  2               
002B8C  2               draw_left_line:     ; $77=tile number for exit/wall
002B8C  2  A2 5A            ldx #90
002B8E  2                   draw_left_line_loop0:
002B8E  2  A9 02                lda #2
002B90  2  9D 71 55             sta L579c,x
002B93  2  8A                   txa
002B94  2  38                   sec
002B95  2  E9 0A                sbc #10
002B97  2  AA                   tax
002B98  2  10 F4                bpl draw_left_line_loop0
002B9A  2               
002B9A  2  A2 1E            ldx #30
002B9C  2                   draw_left_line_loop1:
002B9C  2  A5 77                lda $77
002B9E  2  9D 8F 55             sta L579c+30,x
002BA1  2  8A                   txa
002BA2  2  38                   sec
002BA3  2  E9 0A                sbc #10
002BA5  2  AA                   tax
002BA6  2  10 F4                bpl draw_left_line_loop1
002BA8  2  18               clc
002BA9  2  60               rts
002BAA  2               
002BAA  2               draw_bottom_line:       ; $76=tile number for exit/wall
002BAA  2  A2 09            ldx #9
002BAC  2  A9 02            lda #2
002BAE  2                   draw_bottom_line_loop0:
002BAE  2  9D CB 55             sta L579c+90,x
002BB1  2  CA                   dex
002BB2  2  10 FA                bpl draw_bottom_line_loop0
002BB4  2               
002BB4  2  A2 03            ldx #3
002BB6  2  A5 76            lda $76
002BB8  2                   draw_bottom_line_loop1:
002BB8  2  9D CE 55             sta L579c+93,x
002BBB  2  CA                   dex
002BBC  2  10 FA                bpl draw_bottom_line_loop1
002BBE  2  18               clc
002BBF  2  60               rts
002BC0  2               
002BC0  2               draw_right_line:        ; $77=tile number for exit/wall
002BC0  2  A2 63            ldx #99
002BC2  2                   draw_right_line_loop0:
002BC2  2  A9 02                lda #2
002BC4  2  9D 71 55             sta L579c,x
002BC7  2  8A                   txa
002BC8  2  38                   sec
002BC9  2  E9 0A                sbc #10
002BCB  2  AA                   tax
002BCC  2  10 F4                bpl draw_right_line_loop0
002BCE  2               
002BCE  2  A2 1E            ldx #30
002BD0  2                   draw_right_line_loop1:
002BD0  2  A5 77                lda $77
002BD2  2  9D 98 55             sta L579c+39,x
002BD5  2  8A                   txa
002BD6  2  38                   sec
002BD7  2  E9 0A                sbc #10
002BD9  2  AA                   tax
002BDA  2  10 F4                bpl draw_right_line_loop1
002BDC  2  18               clc
002BDD  2  60               rts
002BDE  2               
002BDE  2               make_empty_room:
002BDE  2               
002BDE  2  A2 63            ldx #99
002BE0  2                   make_empty_room_loop:
002BE0  2  A9 00                lda #0
002BE2  2  9D 71 55             sta L579c,x
002BE5  2  CA                   dex
002BE6  2  10 F8                bpl make_empty_room_loop
002BE8  2               
002BE8  2  60               rts
002BE9  2               
002BE9  2               make_room:          ; $78,$79=i,j
002BE9  2               
002BE9  2                   ; Fills the room array at 579c with values.
002BE9  2                   ; Tiles 0,1,2,3 are map tiles that will be shown by the plot_tile routine.
002BE9  2                   ; Other tiles are plotted separately:
002BE9  2                   ;   4 = exit
002BE9  2                   ;   5 = final exit
002BE9  2                   ;   6 = weapon (bits 3,4 are type)
002BE9  2                   ;   7 = treasure (bits 3,4 are type)
002BE9  2               
002BE9  2                   ; Fill the room with empty space.
002BE9  2               
002BE9  2  20 DE 2B         jsr make_empty_room
002BEC  2               
002BEC  2               
002BEC  2                   ; Determine if there is a top exit.
002BEC  2               
002BEC  2  A9 00            lda #0
002BEE  2  85 76            sta $76
002BF0  2               
002BF0  2  A5 78            lda $78         ; i == 0
002BF2  2  C9 00            cmp #0
002BF4  2  D0 07            bne not_top_screen
002BF6  2  A9 02            lda #2
002BF8  2  85 76            sta $76
002BFA  2  4C 1C 2C         jmp do_top_exit
002BFD  2               
002BFD  2                   not_top_screen:
002BFD  2  18               clc
002BFE  2               
002BFE  2  A5 78            lda $78
002C00  2  29 07            and #7          ; i & 7
002C02  2  85 70            sta $70         ; temporary result
002C04  2  A5 79            lda $79
002C06  2  29 07            and #7          ; j & 7
002C08  2  C5 70            cmp $70
002C0A  2  F0 10            beq do_top_exit
002C0C  2  18               clc
002C0D  2               
002C0D  2  A5 78            lda $78
002C0F  2  45 79            eor $79         ; i ^ j
002C11  2  65 78            adc $78         ; + i
002C13  2  18               clc
002C14  2  C5 79            cmp $79         ; (i ^ j) + i == j
002C16  2  D0 04            bne do_top_exit
002C18  2  A9 02            lda #2
002C1A  2  85 76            sta $76         ; top exit
002C1C  2               
002C1C  2                   do_top_exit:
002C1C  2  20 76 2B         jsr draw_top_line
002C1F  2               
002C1F  2                   ; Determine if there is a left exit.
002C1F  2  A9 00            lda #0
002C21  2  85 77            sta $77
002C23  2               
002C23  2  A5 79            lda $79
002C25  2  C9 00            cmp #0
002C27  2  D0 07            bne not_left_screen
002C29  2  A9 02            lda #2
002C2B  2  85 77            sta $77
002C2D  2  4C 4E 2C         jmp do_left_exit
002C30  2               
002C30  2                   not_left_screen:
002C30  2  18               clc
002C31  2               
002C31  2  A5 78            lda $78
002C33  2  29 03            and #3          ; i & 3
002C35  2  85 70            sta $70         ; temporary result
002C37  2  A5 79            lda $79
002C39  2  29 03            and #3          ; j & 3
002C3B  2  C5 70            cmp $70
002C3D  2  F0 0F            beq do_left_exit
002C3F  2  18               clc
002C40  2               
002C40  2  A5 78            lda $78
002C42  2  05 79            ora $79         ; i | j
002C44  2  45 79            eor $79         ; ^ j
002C46  2  C5 78            cmp $78         ; (i | j) ^ j == i
002C48  2  D0 04            bne do_left_exit
002C4A  2  A9 02            lda #2
002C4C  2  85 77            sta $77         ; left exit
002C4E  2               
002C4E  2                   do_left_exit:
002C4E  2  20 8C 2B         jsr draw_left_line
002C51  2               
002C51  2                   ; Determine if there is a right exit.
002C51  2  A9 00            lda #0
002C53  2  85 77            sta $77
002C55  2               
002C55  2  A5 79            lda $79
002C57  2  C9 0A            cmp #10
002C59  2  D0 07            bne not_right_screen
002C5B  2  A9 02            lda #2
002C5D  2  85 77            sta $77
002C5F  2  4C 88 2C         jmp do_right_exit
002C62  2               
002C62  2                   not_right_screen:
002C62  2  18               clc
002C63  2               
002C63  2  A5 78            lda $78
002C65  2  29 03            and #3          ; i & 3
002C67  2  85 70            sta $70         ; temporary result
002C69  2  A5 79            lda $79
002C6B  2  69 01            adc #1
002C6D  2  29 03            and #3          ; j & 3
002C6F  2  C5 70            cmp $70
002C71  2  F0 15            beq do_right_exit
002C73  2  18               clc
002C74  2               
002C74  2  A5 79            lda $79
002C76  2  69 01            adc #1
002C78  2  85 70            sta $70
002C7A  2               
002C7A  2  A5 78            lda $78
002C7C  2  05 70            ora $70         ; i | j
002C7E  2  45 70            eor $70         ; ^ j
002C80  2  C5 78            cmp $78         ; (i | j) ^ j == i
002C82  2  D0 04            bne do_right_exit
002C84  2  A9 02            lda #2
002C86  2  85 77            sta $77         ; right exit
002C88  2               
002C88  2                   do_right_exit:
002C88  2  20 C0 2B         jsr draw_right_line
002C8B  2               
002C8B  2                   ; Determine if there is a bottom exit.
002C8B  2  A9 00            lda #0
002C8D  2  85 76            sta $76
002C8F  2               
002C8F  2  A5 78            lda $78
002C91  2  C9 0A            cmp #10
002C93  2  D0 07            bne not_bottom_screen
002C95  2  A9 02            lda #2
002C97  2  85 76            sta $76
002C99  2  4C C0 2C         jmp do_bottom_exit
002C9C  2               
002C9C  2                   not_bottom_screen:
002C9C  2  18               clc
002C9D  2               
002C9D  2  A5 78            lda $78
002C9F  2  69 01            adc #1
002CA1  2  29 07            and #7          ; i & 7
002CA3  2  85 70            sta $70         ; temporary result
002CA5  2  A5 79            lda $79
002CA7  2  29 07            and #7          ; j & 7
002CA9  2  C5 70            cmp $70
002CAB  2  F0 13            beq do_bottom_exit
002CAD  2  18               clc
002CAE  2               
002CAE  2  A5 78            lda $78
002CB0  2  69 01            adc #1
002CB2  2  85 70            sta $70
002CB4  2               
002CB4  2  45 79            eor $79         ; i ^ j
002CB6  2  65 70            adc $70         ; + i
002CB8  2  C5 79            cmp $79         ; (i ^ j) + i == j
002CBA  2  D0 04            bne do_bottom_exit
002CBC  2  A9 02            lda #2
002CBE  2  85 76            sta $76         ; bottom exit
002CC0  2               
002CC0  2                   do_bottom_exit:
002CC0  2  20 AA 2B         jsr draw_bottom_line
002CC3  2               
002CC3  2                   ; Add the final exit.
002CC3  2               
002CC3  2  AD 5F 55         lda L578a
002CC6  2  C9 03            cmp #3
002CC8  2  30 16            bmi make_room_no_final_exit
002CCA  2               
002CCA  2  A5 78            lda $78
002CCC  2  C9 00            cmp #0
002CCE  2  D0 10            bne make_room_no_final_exit
002CD0  2               
002CD0  2  A5 79            lda $79
002CD2  2  C9 02            cmp #2
002CD4  2  D0 0A            bne make_room_no_final_exit
002CD6  2               
002CD6  2  A9 06            lda #6
002CD8  2  8D 75 55         sta L579c+4
002CDB  2  A9 07            lda #7
002CDD  2  8D 76 55         sta L579c+5
002CE0  2               
002CE0  2                   make_room_no_final_exit:
002CE0  2               
002CE0  2                   ; Make sure that the starting, exit, key rooms are empty.
002CE0  2               
002CE0  2  AE 5F 55         ldx L578a               ; level number
002CE3  2  BD 0B 2B         lda start_rooms_y,x
002CE6  2  C5 78            cmp $78
002CE8  2  D0 0E            bne make_room_not_starting_room
002CEA  2  BD 07 2B         lda start_rooms_x,x
002CED  2  C5 79            cmp $79
002CEF  2  D0 07            bne make_room_not_starting_room
002CF1  2               
002CF1  2  A9 03            lda #3
002CF3  2  85 70            sta $70
002CF5  2  4C 84 2D         jmp add_room_decoration ; optimise away the rts
002CF8  2               
002CF8  2                   make_room_not_starting_room:
002CF8  2               
002CF8  2  BD 13 2B         lda exit_rooms_y,x
002CFB  2  C5 78            cmp $78
002CFD  2  D0 2E            bne make_room_not_exit_room
002CFF  2  BD 0F 2B         lda exit_rooms_x,x
002D02  2  C5 79            cmp $79
002D04  2  D0 27            bne make_room_not_exit_room
002D06  2               
002D06  2                   ; Add an exit to the room.
002D06  2  A5 78            lda $78
002D08  2  45 79            eor $79
002D0A  2  29 0F            and #15
002D0C  2  AA               tax
002D0D  2  BD 9B 2D         lda exit_room_offsets,x
002D10  2  AA               tax
002D11  2  AD 55 55         lda L5780
002D14  2  29 01            and #1
002D16  2  F0 08            beq exit_not_open
002D18  2               
002D18  2  A9 05            lda #5
002D1A  2  9D 71 55         sta L579c,x
002D1D  2  4C 26 2D         jmp exit_decoration
002D20  2               
002D20  2                   exit_not_open:
002D20  2  18               clc
002D21  2  A9 04            lda #4
002D23  2  9D 71 55         sta L579c,x
002D26  2               
002D26  2                   exit_decoration:
002D26  2  A9 03            lda #3
002D28  2  85 70            sta $70
002D2A  2  4C 84 2D         jmp add_room_decoration ; optimise away the rts
002D2D  2               
002D2D  2                   make_room_not_exit_room:
002D2D  2               
002D2D  2  BD 1B 2B         lda key_rooms_y,x
002D30  2  C5 78            cmp $78
002D32  2  D0 0E            bne make_room_not_key_room
002D34  2  BD 17 2B         lda key_rooms_x,x
002D37  2  C5 79            cmp $79
002D39  2  D0 07            bne make_room_not_key_room
002D3B  2               
002D3B  2  A9 01            lda #1
002D3D  2  85 70            sta $70
002D3F  2  4C 84 2D         jmp add_room_decoration ; optimise away the rts
002D42  2               
002D42  2                   make_room_not_key_room:
002D42  2  18               clc
002D43  2               
002D43  2                   ; Fill in the room details.
002D43  2               
002D43  2  A5 79            lda $79
002D45  2  85 7C            sta $7c
002D47  2  38               sec
002D48  2  AE 5F 55         ldx L578a
002D4B  2  BD 03 2B         lda seeds,x
002D4E  2  E5 78            sbc $78
002D50  2  38               sec
002D51  2  85 7D            sta $7d
002D53  2  18               clc
002D54  2               
002D54  2                   ; Discard the first ten values.
002D54  2               
002D54  2  A0 0A            ldy #10
002D56  2                   make_room_loop0:
002D56  2  20 43 2B             jsr unlimited_values
002D59  2  88                   dey
002D5A  2  D0 FA                bne make_room_loop0
002D5C  2               
002D5C  2                   ; Fill the room array with values.
002D5C  2               
002D5C  2  A9 7C            lda #<(L579c+11)		;$57a7
002D5E  2  85 70            sta $70
002D60  2  A9 55            lda #>(L579c+11)
002D62  2  85 71            sta $71
002D64  2               
002D64  2  A0 00            ldy #0
002D66  2                   make_room_loop1:
002D66  2               
002D66  2  20 65 2B             jsr next_value
002D69  2  91 70                sta ($70),y
002D6B  2  C8                   iny
002D6C  2  C0 08                cpy #8
002D6E  2  D0 F6                bne make_room_loop1     ; continue the same row
002D70  2               
002D70  2  A5 70                lda $70
002D72  2  C9 C2                cmp #<(L579c+11+7*10)
002D74  2  F0 09                beq make_room_loop1_exit    ; exit after the last row
002D76  2               
002D76  2  69 0A                adc #10
002D78  2  85 70                sta $70
002D7A  2  A0 00                ldy #0                  ; reset the row counter
002D7C  2  4C 66 2D             jmp make_room_loop1
002D7F  2               
002D7F  2                   make_room_loop1_exit:
002D7F  2  60               rts
002D80  2               
002D80  2  0B 12 51 58  decoration_offsets: .byte 11,18,81,88
002D84  2               
002D84  2               add_room_decoration:
002D84  2               
002D84  2  A9 71            lda #<L579c			;$579c
002D86  2  85 8E            sta $8e
002D88  2  A9 55            lda #>L579c
002D8A  2  85 8F            sta $8f
002D8C  2               
002D8C  2  A2 03            ldx #3
002D8E  2                   add_room_decoration_loop:
002D8E  2               
002D8E  2  BD 80 2D             lda decoration_offsets,x
002D91  2  A8                   tay
002D92  2  A5 70                lda $70
002D94  2  91 8E                sta ($8e),y
002D96  2  CA                   dex
002D97  2  10 F5                bpl add_room_decoration_loop
002D99  2               
002D99  2  18               clc
002D9A  2  60               rts
002D9B  2               
002D9B  2  23 42 3F 38  exit_room_offsets:  .byte 35,66,63,56,34,44,64,33,36,55,65,53,45,46,54,43
002D9F  2  22 2C 40 21  
002DA3  2  24 37 41 35  
002DAB  2  03 02 04 08  treasure_x:         .byte 3, 2, 4, 8, 2, 5, 4, 1, 3, 8, 6, 5, 7, 1, 7, 6
002DAF  2  02 05 04 01  
002DB3  2  03 08 06 05  
002DBB  2  01 03 07 07  treasure_y:         .byte 1, 3, 7, 7, 2, 3, 6, 1, 4, 6, 8, 5, 5, 4, 8, 2
002DBF  2  02 03 06 01  
002DC3  2  04 06 08 05  
002DCB  2               
002DCB  2  00 0B 16 21  eleven_times_table: .byte 0, 11, 22, 33, 44, 55, 66, 77, 88, 99, 110
002DCF  2  2C 37 42 4D  
002DD3  2  58 63 6E     
002DD6  2               
002DD6  2               add_treasure:               ; $78,$79 = i,j
002DD6  2               
002DD6  2  A5 78            lda $78
002DD8  2  AA               tax
002DD9  2  BD CB 2D         lda eleven_times_table,x
002DDC  2  65 79            adc $79
002DDE  2  AA               tax
002DDF  2               
002DDF  2  BD 55 50         lda L5200,x
002DE2  2  09 80            ora #$80
002DE4  2  9D 55 50         sta L5200,x         ; set the top bit (room visited)
002DE7  2  29 7F            and #$7f            ; mask off the top bit to obtain the item number + 1
002DE9  2  C9 00            cmp #0
002DEB  2  F0 76            beq add_treasure_exit
002DED  2               
002DED  2  38               sec
002DEE  2  E9 01            sbc #1
002DF0  2  8D E2 4F         sta L5280+$d           ; store weapon/treasure type
002DF3  2  18               clc
002DF4  2               
002DF4  2  A5 78            lda $78
002DF6  2  45 79            eor $79
002DF8  2  6D E2 4F         adc L5280+$d
002DFB  2  29 0F            and #15
002DFD  2  85 70            sta $70
002DFF  2               
002DFF  2  A9 0F            lda #15
002E01  2  85 8C            sta $8c
002E03  2  A0 00            ldy #0
002E05  2                   add_treasure_loop:
002E05  2               
002E05  2  18                   clc
002E06  2               
002E06  2  A6 70                ldx $70
002E08  2  BD BB 2D             lda treasure_y,x    ; y
002E0B  2  85 8D                sta $8d
002E0D  2  AA                   tax
002E0E  2  BD 34 33             lda room_row_offsets_low,x
002E11  2  85 80                sta $80
002E13  2  BD 3E 33             lda room_row_offsets_high,x
002E16  2  85 81                sta $81
002E18  2               
002E18  2  A6 70                ldx $70
002E1A  2  BD AB 2D             lda treasure_x,x    ; x
002E1D  2  85 8E                sta $8e
002E1F  2  65 80                adc $80
002E21  2  85 80                sta $80
002E23  2               
002E23  2  A5 81                lda $81
002E25  2  69 00                adc #0
002E27  2  85 81                sta $81
002E29  2  18                   clc
002E2A  2               
002E2A  2  B1 80                lda ($80),y         ; tile
002E2C  2  C9 00                cmp #0
002E2E  2  D0 24                bne add_treasure_loop_next
002E30  2               
002E30  2  A9 04                lda #4              ; type (weapon/treasure)
002E32  2  8D E1 4F             sta L5280+$c
002E35  2  A5 8D                lda $8d             ; y
002E37  2  8D E3 4F             sta L5280+$e
002E3A  2  A9 01                lda #1              ; dy
002E3C  2  8D E4 4F             sta L5280+$f
002E3F  2  A5 8E                lda $8e             ; x
002E41  2  8D E5 4F             sta L5280+$10		; $5290
002E44  2  A9 00                lda #0              ; dx
002E46  2  8D E6 4F             sta L5280+$11
002E49  2               
002E49  2  A9 E1                lda #<(L5280+$c)		;$528c
002E4B  2  85 74                sta $74
002E4D  2  A9 4F                lda #>(L5280+$c)
002E4F  2  85 75                sta $75
002E51  2  4C 63 31             jmp plot_character  ; optimise away the rts
002E54  2               
002E54  2                       add_treasure_loop_next:
002E54  2  C6 8C                dec $8c
002E56  2  30 0B                bmi add_treasure_exit
002E58  2               
002E58  2  C6 70                dec $70
002E5A  2  10 A9                bpl add_treasure_loop
002E5C  2               
002E5C  2  A9 0F                lda #15
002E5E  2  85 70                sta $70
002E60  2  4C 05 2E             jmp add_treasure_loop
002E63  2               
002E63  2                   add_treasure_exit:
002E63  2  18               clc
002E64  2  60               rts
002E65  2               
002E65  2               create_enemy_positions:
002E65  2               
002E65  2  A9 1F            lda #31     ; counter
002E67  2  85 7E            sta $7e
002E69  2               
002E69  2  A9 01            lda #1      ; x
002E6B  2  85 70            sta $70
002E6D  2               
002E6D  2  A9 01            lda #1      ; y
002E6F  2  85 71            sta $71
002E71  2               
002E71  2  A9 7C            lda #<(L579c+11)		;$57a7
002E73  2  85 72            sta $72
002E75  2  A9 55            lda #>(L579c+11)
002E77  2  85 73            sta $73
002E79  2               
002E79  2  A2 0F            ldx #15     ; offset into position areas
002E7B  2  A0 00            ldy #0
002E7D  2               
002E7D  2                   create_enemy_positions_loop:
002E7D  2               
002E7D  2  20 43 2B             jsr unlimited_values
002E80  2  29 07                and #7
002E82  2  85 80                sta $80     ; store temporarily
002E84  2               
002E84  2  A5 72                lda $72
002E86  2  65 80                adc $80
002E88  2  85 72                sta $72     ; update the offset into the room data
002E8A  2  18                   clc
002E8B  2               
002E8B  2  A5 70                lda $70
002E8D  2  65 80                adc $80     ; update x
002E8F  2  C9 0A                cmp #10
002E91  2  10 05                bpl create_enemy_positions_next_row
002E93  2               
002E93  2  85 70                sta $70     ; store x
002E95  2  4C B5 2E             jmp create_enemy_positions_check_tile
002E98  2               
002E98  2                       create_enemy_positions_next_row:
002E98  2               
002E98  2  38                   sec
002E99  2  E9 0A                sbc #10
002E9B  2  85 70                sta $70     ; store the x position on the next row
002E9D  2  18                   clc
002E9E  2               
002E9E  2  A5 71                lda $71
002EA0  2  69 01                adc #1      ; update the y position
002EA2  2  C9 0A                cmp #10
002EA4  2  10 05                bpl create_enemy_positions_to_top
002EA6  2               
002EA6  2  85 71                sta $71     ; store the y position for the next row
002EA8  2  4C B5 2E             jmp create_enemy_positions_check_tile
002EAB  2               
002EAB  2                       create_enemy_positions_to_top:
002EAB  2               
002EAB  2  A9 01                lda #1      ; reset the x, y and offset values
002EAD  2  85 70                sta $70
002EAF  2  85 71                sta $71
002EB1  2  A9 7C                lda #<(L579c+11)	; $a7
002EB3  2  85 72                sta $72
002EB5  2               
002EB5  2                       create_enemy_positions_check_tile:
002EB5  2               
002EB5  2  B1 72                lda ($72),y
002EB7  2  C9 00                cmp #0
002EB9  2  D0 0D                bne create_enemy_positions_next
002EBB  2               
002EBB  2  A5 70                lda $70
002EBD  2  9D 35 4F             sta L0ee0,x                     ; store the x value
002EC0  2               
002EC0  2  A5 71                lda $71
002EC2  2  9D 45 4F             sta L0ef0,x                     ; store the y value
002EC5  2               
002EC5  2  CA                   dex
002EC6  2  30 0D                bmi create_enemy_positions_exit
002EC8  2               
002EC8  2                       create_enemy_positions_next:
002EC8  2  18                   clc
002EC9  2  C6 7E                dec $7e
002ECB  2  10 B0                bpl create_enemy_positions_loop
002ECD  2               
002ECD  2                   ; The position areas were not filled. Write invalid values into the
002ECD  2                   ; first area for the emerge routine to find.
002ECD  2               
002ECD  2  A9 00            lda #0
002ECF  2                   create_enemy_positions_fill_loop:
002ECF  2               
002ECF  2  9D 35 4F             sta L0ee0,x
002ED2  2  CA                   dex
002ED3  2  10 FA                bpl create_enemy_positions_fill_loop
002ED5  2               
002ED5  2                   create_enemy_positions_exit:
002ED5  2  18               clc
002ED6  2  60               rts
002ED7  2               
002ED7  2               plot:               ; $70,$71=source address
002ED7  2                                   ; $72,$73=destination address
002ED7  2  A2 00        	ldx #0
002ED9  2               plot_loop1:
002ED9  2  BC 32 2F     	ldy sprtab,x
002EDC  2  B1 70                lda ($70),y
002EDE  2  BC AE 2F     	ldy vtab,x
002EE1  2  91 72        	sta ($72),y
002EE3  2               
002EE3  2  BC 3A 2F     	ldy sprtab+8,x
002EE6  2  B1 70        	lda ($70),y
002EE8  2  BC AE 2F     	ldy vtab,x
002EEB  2  C8           	iny
002EEC  2  91 72        	sta ($72),y
002EEE  2               
002EEE  2  BC 42 2F     	ldy sprtab+16,x
002EF1  2  B1 70        	lda ($70),y
002EF3  2  BC AE 2F     	ldy vtab,x
002EF6  2  C8           	iny
002EF7  2  C8           	iny
002EF8  2  91 72        	sta ($72),y
002EFA  2               
002EFA  2  E8           	inx
002EFB  2  E0 08        	cpx #8
002EFD  2  D0 DA        	bne plot_loop1
002EFF  2               
002EFF  2  A2 00        	ldx #0
002F01  2  E6 73        	inc $73
002F03  2               plot_loop2:
002F03  2  BC 4A 2F     	ldy sprtab+24,x
002F06  2  B1 70                lda ($70),y
002F08  2  BC AE 2F     	ldy vtab,x
002F0B  2  91 72        	sta ($72),y
002F0D  2               
002F0D  2  BC 52 2F     	ldy sprtab+32,x
002F10  2  B1 70        	lda ($70),y
002F12  2  BC AE 2F     	ldy vtab,x
002F15  2  C8           	iny
002F16  2  91 72        	sta ($72),y
002F18  2               
002F18  2  BC 5A 2F     	ldy sprtab+40,x
002F1B  2  B1 70        	lda ($70),y
002F1D  2  BC AE 2F     	ldy vtab,x
002F20  2  C8           	iny
002F21  2  C8           	iny
002F22  2  91 72        	sta ($72),y
002F24  2               
002F24  2  E8           	inx
002F25  2  E0 08        	cpx #8
002F27  2  D0 DA        	bne plot_loop2
002F29  2               
002F29  2  E6 72        	inc $72
002F2B  2  E6 72        	inc $72
002F2D  2  E6 72        	inc $72
002F2F  2  C6 73        	dec $73
002F31  2  60               rts
002F32  2               
002F32  2  00 03 06 09  sprtab:	.byte 0,3,6,9,12,15,18,21
002F36  2  0C 0F 12 15  
002F3A  2  01 04 07 0A  		.byte 1,4,7,10,13,16,19,22
002F3E  2  0D 10 13 16  
002F42  2  02 05 08 0B  		.byte 2,5,8,11,14,17,20,23
002F46  2  0E 11 14 17  
002F4A  2               
002F4A  2  18 1B 1E 21  		.byte 24,27,30,33,36,39,42,45
002F4E  2  24 27 2A 2D  
002F52  2  19 1C 1F 22  		.byte 25,28,31,34,37,40,43,46
002F56  2  25 28 2B 2E  
002F5A  2  1A 1D 20 23  		.byte 26,29,32,35,38,41,44,47
002F5E  2  26 29 2C 2F  
002F62  2               
002F62  2               plot_blank_xy:      ; X=y, Y=x
002F62  2               
002F62  2  AD 31 31         lda screen_rows_low
002F65  2  85 72            sta $72
002F67  2  BD 32 31         lda screen_rows_high,x
002F6A  2  85 73            sta $73
002F6C  2               
002F6C  2  98               tya
002F6D  2  AA               tax
002F6E  2  BD 44 31         lda screen_columns_low,x
002F71  2  65 72            adc $72
002F73  2  85 72            sta $72
002F75  2  AD 4E 31         lda screen_columns_high
002F78  2  65 73            adc $73
002F7A  2  85 73            sta $73
002F7C  2  18               clc
002F7D  2                   ; run on into plot_blank
002F7D  2               
002F7D  2               plot_blank:         ; $72,$73=destination address
002F7D  2               
002F7D  2  A2 00        	ldx #0
002F7F  2  A9 00        	lda #$00
002F81  2               plot_blank_loop1:
002F81  2  BC AE 2F     	ldy vtab,x
002F84  2  91 72        	sta ($72),y
002F86  2  C8           	iny
002F87  2  91 72        	sta ($72),y
002F89  2  C8           	iny
002F8A  2  91 72        	sta ($72),y
002F8C  2  E8           	inx
002F8D  2  E0 08        	cpx #8
002F8F  2  D0 F0        	bne plot_blank_loop1
002F91  2               
002F91  2  A2 00        	ldx #0
002F93  2  E6 73        	inc $73
002F95  2               plot_blank_loop2:
002F95  2  BC AE 2F     	ldy vtab,x
002F98  2  91 72        	sta ($72),y
002F9A  2  C8           	iny
002F9B  2  91 72        	sta ($72),y
002F9D  2  C8           	iny
002F9E  2  91 72        	sta ($72),y
002FA0  2  E8           	inx
002FA1  2  E0 08        	cpx #8
002FA3  2  D0 F0        	bne plot_blank_loop2
002FA5  2               
002FA5  2  E6 72        	inc $72
002FA7  2  E6 72        	inc $72
002FA9  2  E6 72        	inc $72
002FAB  2  C6 73        	dec $73
002FAD  2               
002FAD  2  60               rts
002FAE  2               
002FAE  2  00 20 40 60  vtab:	.byte 0,$20,$40,$60,$80,$a0,$c0,$e0
002FB2  2  80 A0 C0 E0  
002FB6  2               
002FB6  2               plot_tile:          ; $7b=tile number
002FB6  2                                   ;   1 = flowers/decoration
002FB6  2                                   ;   2 = trees/wall
002FB6  2                                   ;   3 = trees
002FB6  2                                   ;   4 = exit
002FB6  2                                   ;   5 = open exit
002FB6  2                                   ;   6 = final exit (left)
002FB6  2                                   ;   7 = final exit (right)
002FB6  2                                   ; $72,$73=screen position
002FB6  2               
002FB6  2  A5 7B            lda $7b
002FB8  2  C9 00            cmp #0
002FBA  2  D0 04            bne plot_tile_sprite
002FBC  2  18               clc
002FBD  2  4C 7D 2F         jmp plot_blank      ; optimise away the rts
002FC0  2               
002FC0  2                   plot_tile_sprite:
002FC0  2  18               clc
002FC1  2  AA               tax
002FC2  2  CA               dex
002FC3  2  BD CB 4A         lda tile_addresses_low,x
002FC6  2  85 70            sta $70
002FC8  2  BD D2 4A         lda tile_addresses_high,x
002FCB  2  85 71            sta $71
002FCD  2               
002FCD  2  A5 7B            lda $7b
002FCF  2  C9 04            cmp #4
002FD1  2  10 26            bpl plot_not_blank_after_add_loop   ; don't adjust the tile for later levels
002FD3  2               
002FD3  2  18               clc
002FD4  2  AD 5F 55         lda L578a
002FD7  2  29 03            and #3              ; change the tile set for later levels
002FD9  2  AA               tax
002FDA  2               
002FDA  2                   plot_not_blank_add_loop:
002FDA  2               
002FDA  2  E0 02                cpx #2
002FDC  2  D0 04                bne plot_not_blank_not_2
002FDE  2  CA                   dex
002FDF  2  4C E6 2F             jmp plot_not_blank_not_0
002FE2  2               
002FE2  2                       plot_not_blank_not_2:
002FE2  2  F0 F6                beq plot_not_blank_add_loop
002FE4  2  E0 00                cpx #0
002FE6  2               
002FE6  2                       plot_not_blank_not_0:
002FE6  2  F0 11                beq plot_not_blank_after_add_loop
002FE8  2  18                   clc
002FE9  2  A5 70                lda $70
002FEB  2  69 90                adc #<(48*3)		; $20
002FED  2  85 70                sta $70
002FEF  2  A5 71                lda $71
002FF1  2  69 00                adc #>(48*3)		; $01
002FF3  2  85 71                sta $71
002FF5  2  CA                   dex
002FF6  2  4C DA 2F             jmp plot_not_blank_add_loop
002FF9  2               
002FF9  2                   plot_not_blank_after_add_loop:
002FF9  2  18               clc
002FFA  2  20 D7 2E         jsr plot
002FFD  2  60               rts
002FFE  2               
002FFE  2               plot_room:          ; $78,$79 = i,j (from L5782,L5782+1)
002FFE  2  AD 57 55         lda L5782
003001  2  85 78            sta $78
003003  2  AD 58 55         lda L5782+1
003006  2  85 79            sta $79
003008  2               
003008  2  20 E9 2B         jsr make_room
00300B  2                   ; Run on into the next piece of code.
00300B  2               
00300B  2               plot_room_tiles:
00300B  2               
00300B  2  A9 01            lda #<$8301	;#$80
00300D  2  85 72            sta $72
00300F  2  A9 83            lda #>$8301	;#$5a
003011  2  85 73            sta $73         ; $72,$73 = screen position
003013  2               
003013  2  A9 00            lda #0
003015  2  85 7A            sta $7a
003017  2                   row_loop:
003017  2               
003017  2  A9 09                lda #9
003019  2  85 76                sta $76
00301B  2               
00301B  2                       column_loop:
00301B  2  A5 7A                    lda $7a
00301D  2  AA                       tax
00301E  2  BD 71 55                 lda L579c,x
003021  2  85 7B                    sta $7b
003023  2  20 B6 2F                 jsr plot_tile
003026  2               
003026  2  E6 7A                    inc $7a
003028  2  A5 76                    lda $76
00302A  2  38                       sec
00302B  2  E9 01                    sbc #1
00302D  2  85 76                    sta $76
00302F  2  18                       clc
003030  2  C9 00                    cmp #0
003032  2  10 E7                    bpl column_loop
003034  2               
003034  2  18                   clc
003035  2               
003035  2  A9 01        	lda #1
003037  2  85 72                sta $72
003039  2  A5 73                lda $73
00303B  2  69 02                adc #$02
00303D  2  85 73                sta $73
00303F  2  18                   clc
003040  2  C9 97                cmp #$97
003042  2  F0 03                beq end_rows
003044  2               
003044  2  4C 17 30             jmp row_loop
003047  2               
003047  2               end_rows:
003047  2  60               rts
003048  2               
003048  2               ; Sprite data stored in memory: 00 04 08 0c 10 14 18 1c 20 24 28 2c
003048  2               ; Atomsprites will be 8x16 instead of 8x24!!!
003048  2               
003048  2               plot8x24_y0:            ; $70,$71=source address
003048  2                                       ; $72,$73=destination address
003048  2               
003048  2  A0 01            ldy #1
00304A  2  8C 79 30         sty v_cnt
00304D  2               
00304D  2                   plot8x24_y0_loop:
00304D  2               
00304D  2  A2 00                ldx #0
00304F  2               
00304F  2                       plotloop8x24_y0_0:
00304F  2  8E 7A 30     		stx h_cnt
003052  2  AC 7A 30     		ldy h_cnt
003055  2  B1 70                    lda ($70),y		; Load sprite data
003057  2  BC 7B 30     		ldy spr_tab8x24,x
00305A  2  51 72                    eor ($72),y
00305C  2  91 72                    sta ($72),y		; Set screen data
00305E  2               
00305E  2  E0 07        	cpx #7			; Block bottomleft
003060  2  D0 02        	bne pl8x24_s1
003062  2  E6 73        	inc $73
003064  2               pl8x24_s1:
003064  2  E0 0F        	cpx #15			; Block topright
003066  2  D0 02        	bne pl8x24_s2
003068  2  C6 73        	dec $73
00306A  2               pl8x24_s2:
00306A  2  E0 17        	cpx #23			; Block bottomright
00306C  2  D0 02        	bne pl8x24_s3
00306E  2  E6 73        	inc $73
003070  2               pl8x24_s3:
003070  2               
003070  2  E8           	inx
003071  2  E0 20        	cpx #32
003073  2  D0 DA        	bne plotloop8x24_y0_0
003075  2               
003075  2                   plot8x24_y0_exit:
003075  2  18           	clc
003076  2  4C 28 33         jmp plot_buffer_loop_next
003079  2               
003079  2  00           v_cnt:	.byte 0
00307A  2  00           h_cnt:	.byte 0
00307B  2               
00307B  2               spr_tab8x24:
00307B  2  00 20 40 60  	.byte 0,$20,$40,$60,$80,$a0,$c0,$e0
00307F  2  80 A0 C0 E0  
003083  2  00 20 40 60  	.byte 0,$20,$40,$60,$80,$a0,$c0,$e0
003087  2  80 A0 C0 E0  
00308B  2  01 21 41 61  	.byte 1,$21,$41,$61,$81,$a1,$c1,$e1
00308F  2  81 A1 C1 E1  
003093  2  01 21 41 61  	.byte 1,$21,$41,$61,$81,$a1,$c1,$e1
003097  2  81 A1 C1 E1  
00309B  2               
00309B  2               ;Atomsprites will be 12x16 instead of 16x16!!!!
00309B  2               
00309B  2               plot16x16_y0:           ; $70,$71=source address
00309B  2                                       ; $72,$73=destination address
00309B  2  A0 01            ldy #1
00309D  2  8C 79 30         sty v_cnt
0030A0  2               
0030A0  2                   plot16x16_y0_loop:
0030A0  2               
0030A0  2  A2 00                ldx #0
0030A2  2               
0030A2  2                       plotloop16x16_y0_0:
0030A2  2  8E 7A 30     		stx h_cnt
0030A5  2  AC 7A 30     		ldy h_cnt
0030A8  2  B1 70                    lda ($70),y		; Load sprite data
0030AA  2  BC D8 30     		ldy spr_tab16x16,x
0030AD  2  51 72                    eor ($72),y
0030AF  2  91 72                    sta ($72),y		; Set screen data
0030B1  2               
0030B1  2  E0 07        	cpx #7			; Block topleft
0030B3  2  D0 02        	bne pl16x16_s1
0030B5  2  E6 73        	inc $73
0030B7  2               pl16x16_s1:
0030B7  2  E0 0B        	cpx #11			; Block topright
0030B9  2  D0 02        	bne pl16x16_s2
0030BB  2  C6 73        	dec $73
0030BD  2               pl16x16_s2:
0030BD  2  E0 13        	cpx #19			; Block bottomright
0030BF  2  D0 02        	bne pl16x16_s3
0030C1  2  E6 73        	inc $73
0030C3  2               pl16x16_s3:
0030C3  2  E0 17        	cpx #23			; Block topright
0030C5  2  D0 02        	bne pl16x16_s4
0030C7  2  C6 73        	dec $73
0030C9  2               pl16x16_s4:
0030C9  2  E0 1F        	cpx #31			; Block topright
0030CB  2  D0 02        	bne pl16x16_s5
0030CD  2  E6 73        	inc $73
0030CF  2               pl16x16_s5:
0030CF  2               
0030CF  2  E8           	inx
0030D0  2  E0 24        	cpx #36
0030D2  2  D0 CE        	bne plotloop16x16_y0_0
0030D4  2               
0030D4  2  18           	clc
0030D5  2  4C 28 33         jmp plot_buffer_loop_next
0030D8  2               
0030D8  2               spr_tab16x16:
0030D8  2  00 20 40 60  	.byte 0,$20,$40,$60,$80,$a0,$c0,$e0
0030DC  2  80 A0 C0 E0  
0030E0  2  00 20 40 60  	.byte 0,$20,$40,$60
0030E4  2  01 21 41 61  	.byte 1,$21,$41,$61,$81,$a1,$c1,$e1
0030E8  2  81 A1 C1 E1  
0030EC  2  01 21 41 61  	.byte 1,$21,$41,$61
0030F0  2  02 22 42 62  	.byte 2,$22,$42,$62,$82,$a2,$c2,$e2
0030F4  2  82 A2 C2 E2  
0030F8  2  02 22 42 62  	.byte 2,$22,$42,$62
0030FC  2               
0030FC  2               ; Sprite data stored in memory: 00 04 08 0c 10 14 18 1c 20 24 28 2c 30 34 38 3c
0030FC  2               
0030FC  2               plot8x8_y0:             ; $70,$71=source address
0030FC  2                                       ; $72,$73=destination address
0030FC  2  A0 01            ldy #1
0030FE  2  8C 79 30         sty v_cnt
003101  2               
003101  2                   plot8x8_y0_loop:
003101  2               
003101  2  A2 00                ldx #0
003103  2               
003103  2                       plotloop8x8_y0_0:
003103  2  8E 7A 30     		stx h_cnt
003106  2  AC 7A 30     		ldy h_cnt
003109  2  B1 70                    lda ($70),y		; Load sprite data
00310B  2  BC 21 31     		ldy spr_tab8x8,x
00310E  2  51 72                    eor ($72),y
003110  2  91 72                    sta ($72),y		; Set screen data
003112  2               
003112  2  E0 07        	cpx #7			; Block topleft
003114  2  D0 02        	bne pl8x8_s1
003116  2  E6 72        	inc $72
003118  2               pl8x8_s1:
003118  2               
003118  2  E8           	inx
003119  2  E0 10        	cpx #16
00311B  2  D0 E6        	bne plotloop8x8_y0_0
00311D  2               
00311D  2  18               clc
00311E  2               
00311E  2  4C 28 33         jmp plot_buffer_loop_next
003121  2               
003121  2               spr_tab8x8:
003121  2  00 20 40 60  	.byte 0,$20,$40,$60,$80,$a0,$c0,$e0
003125  2  80 A0 C0 E0  
003129  2  00 20 40 60  	.byte 0,$20,$40,$60,$80,$a0,$c0,$e0
00312D  2  80 A0 C0 E0  
003131  2               
003131  2               ;---------------------------
003131  2               ;Key scan code,
003131  2               ; returns y=255 if key pressed
003131  2               ; returns y=0 if key not pressed
003131  2               ;---------------------------
003131  2               check_key	= scankey
003131  2               
003131  2  00           screen_rows_low:		.byte $00
003132  2  83 85 87 89  screen_rows_high:		.byte $83,$85,$87,$89,$8b,$8d,$8f,$91,$93,$95
003136  2  8B 8D 8F 91  
00313A  2  93 95        
00313C  2  00 80 00 80  screen_subrows_low:		.byte $00,$80,$00,$80
003140  2  00 00 01 01  screen_subrows_high:		.byte $00,$00,$01,$01
003144  2               
003144  2  01 04 07 0A  screen_columns_low:		.byte $01,$04,$07,$0a,$0d,$10,$13,$16,$19,$1c
003148  2  0D 10 13 16  
00314C  2  19 1C        
00314E  2  00           screen_columns_high:		.byte $00
00314F  2  00 01 02     screen_subcolumns_low:		.byte $00,$01,$02
003152  2  00           screen_subcolumns_high:		.byte $00
003153  2               
003153  2               unplot_character:       ; $74,$75=character address
003153  2               
003153  2  A5 82            lda $82             ; store the unplot buffer address in $78,$79
003155  2  85 78            sta $78
003157  2  A5 83            lda $83
003159  2  85 79            sta $79
00315B  2  20 73 31         jsr plot_character_sprite
00315E  2  A5 78            lda $78
003160  2  85 82            sta $82             ; update the latest space in the unplot buffer
003162  2  60               rts
003163  2               
003163  2               plot_character:         ; $74,$75=character address
003163  2               
003163  2  A5 84            lda $84             ; store the plot buffer address in $78,$79
003165  2  85 78            sta $78
003167  2  A5 85            lda $85
003169  2  85 79            sta $79
00316B  2  20 73 31         jsr plot_character_sprite
00316E  2  A5 78            lda $78
003170  2  85 84            sta $84             ; update the latest space in the plot buffer
003172  2  60               rts
003173  2               
003173  2               plot_character_sprite:  ; $74,$75=character address
003173  2                                       ; $78,$79=unplot/plot buffer address
003173  2               
003173  2  A0 00            ldy #0
003175  2  B1 74            lda ($74),y
003177  2  C9 00            cmp #0
003179  2  D0 03            bne plot_characters_read_character
00317B  2  4C 88 32         jmp plot_characters_next
00317E  2               
00317E  2                   plot_characters_read_character:
00317E  2  18               clc
00317F  2               
00317F  2  85 77            sta $77         ; temporarily store the object type
003181  2               
003181  2                   ; Use lookup tables to load the offsets into the sprite.
003181  2               
003181  2                   ; Direction
003181  2  C8               iny
003182  2  B1 74            lda ($74),y
003184  2  85 80            sta $80         ; temporarily store the direction
003186  2               
003186  2                   ; y
003186  2  C8               iny
003187  2  B1 74            lda ($74),y
003189  2  AA               tax
00318A  2  AD 31 31         lda screen_rows_low		; $8300,$8500,$8700....$9500
00318D  2  85 72            sta $72
00318F  2  BD 32 31         lda screen_rows_high,x
003192  2  85 73            sta $73
003194  2  18               clc
003195  2               
003195  2                   ; dy
003195  2  C8               iny
003196  2  B1 74            lda ($74),y
003198  2  85 76            sta $76
00319A  2  AA               tax
00319B  2  BD 3C 31         lda screen_subrows_low,x	; $00,$40,$80,$c0
00319E  2  65 72            adc $72
0031A0  2  85 72            sta $72
0031A2  2  BD 40 31         lda screen_subrows_high,x
0031A5  2  65 73            adc $73
0031A7  2  85 73            sta $73
0031A9  2  18               clc
0031AA  2               
0031AA  2                   ; x
0031AA  2  C8               iny
0031AB  2  B1 74            lda ($74),y
0031AD  2  AA               tax
0031AE  2  BD 44 31         lda screen_columns_low,x	; 1,3,5,...29
0031B1  2  65 72            adc $72
0031B3  2  85 72            sta $72
0031B5  2  AD 4E 31         lda screen_columns_high
0031B8  2  65 73            adc $73
0031BA  2  85 73            sta $73
0031BC  2  18               clc
0031BD  2               
0031BD  2                   ; dx
0031BD  2  C8               iny
0031BE  2  B1 74            lda ($74),y
0031C0  2  AA               tax
0031C1  2  BD 4F 31         lda screen_subcolumns_low,x		;0,1,2
0031C4  2  65 72            adc $72
0031C6  2  85 72            sta $72
0031C8  2  AD 52 31         lda screen_subcolumns_high
0031CB  2  65 73            adc $73
0031CD  2  85 73            sta $73
0031CF  2  18               clc
0031D0  2               
0031D0  2  A5 77            lda $77
0031D2  2  C9 01            cmp #1
0031D4  2  D0 18            bne plot_characters_loop_not_player
0031D6  2               
0031D6  2                   ; Plot 8x24 sprites (player)
0031D6  2               
0031D6  2  A6 80            ldx $80
0031D8  2  BD D9 4A         lda player_direction_chars_low,x
0031DB  2  85 70            sta $70
0031DD  2  BD E5 4A         lda player_direction_chars_high,x
0031E0  2  85 71            sta $71
0031E2  2               
0031E2  2                   ; Use the dy value to determine which plotting routine to use.
0031E2  2               
0031E2  2  A0 00            ldy #0
0031E4  2  A6 76            ldx $76
0031E6  2  BD 9A 32         lda plot_routine_indices_8x24,x
0031E9  2               
0031E9  2  91 78            sta ($78),y
0031EB  2  4C 6D 32         jmp plot_characters_stored
0031EE  2               
0031EE  2               
0031EE  2                   plot_characters_loop_not_player:
0031EE  2  C9 02            cmp #2
0031F0  2  D0 1B            bne plot_characters_loop_not_projectile
0031F2  2               
0031F2  2                   ; Plot 8x8 sprites (projectiles)
0031F2  2               
0031F2  2  A5 80            lda $80
0031F4  2  29 07            and #7
0031F6  2  AA               tax
0031F7  2  BD 23 4B         lda projectile_chars_low,x
0031FA  2  85 70            sta $70
0031FC  2  BD 2B 4B         lda projectile_chars_high,x
0031FF  2  85 71            sta $71
003201  2               
003201  2                   ; Use the dy value to determine which plotting routine to use.
003201  2               
003201  2  A0 00            ldy #0
003203  2  A6 76            ldx $76
003205  2  BD 9E 32         lda plot_routine_indices_8x8,x
003208  2               
003208  2  91 78            sta ($78),y
00320A  2  4C 6D 32         jmp plot_characters_stored
00320D  2               
00320D  2               
00320D  2                   plot_characters_loop_not_projectile:
00320D  2  C9 03            cmp #3
00320F  2  D0 13            bne plot_characters_loop_not_explosion
003211  2               
003211  2                   ; Plot 16x16 sprites (emerging, explosions)
003211  2               
003211  2                   ; Select the sprites to use.
003211  2               
003211  2  A5 80            lda $80
003213  2  29 07            and #7          ; only keep the bits required to find the correct sprite
003215  2  18               clc
003216  2  AA               tax
003217  2  BD 01 4B         lda emerge_explode_chars_low,x
00321A  2  85 70            sta $70
00321C  2  BD 09 4B         lda emerge_explode_chars_high,x
00321F  2  85 71            sta $71
003221  2               
003221  2  4C 64 32         jmp plot_characters_16x16
003224  2               
003224  2                   plot_characters_loop_not_explosion:
003224  2  C9 04            cmp #4
003226  2  D0 13            bne plot_characters_loop_not_item
003228  2               
003228  2                   ; Plot 16x16 sprites (items)
003228  2               
003228  2                   ; Select the sprites to use.
003228  2               
003228  2  A5 80            lda $80
00322A  2  29 0F            and #$0f        ; only keep the bits required to find the correct sprite
00322C  2  18               clc
00322D  2  AA               tax
00322E  2  BD 11 4B         lda item_chars_low,x
003231  2  85 70            sta $70
003233  2  BD 1A 4B         lda item_chars_high,x
003236  2  85 71            sta $71
003238  2               
003238  2  4C 64 32         jmp plot_characters_16x16
00323B  2               
00323B  2                   plot_characters_loop_not_item:
00323B  2  C9 08            cmp #8
00323D  2  30 49            bmi plot_characters_loop_not_enemy
00323F  2               
00323F  2                   ; Plot 16x16 sprites (enemies)
00323F  2               
00323F  2                   ; Select the set of sprites to use.
00323F  2               
00323F  2  29 70            and #$70
003241  2  4A               lsr
003242  2  4A           	lsr
003243  2  4A               lsr
003244  2  4A               lsr     ; bits 4,5,6 >> 3 -> bits 1,2,3
003245  2  AA            	tax
003246  2  BD 90 32     	lda enemie_adr_lo,x
003249  2  85 70        	sta $70
00324B  2  BD 95 32     	lda enemie_adr_hi,x
00324E  2  85 71        	sta $71
003250  2               
003250  2               ;   clc
003250  2                ;   sta $71 ; 0x00, 0x02, 0x04, 0x06, 0x08
003250  2               
003250  2  A5 80            lda $80
003252  2  29 07            and #7          ; keep the animation bits
003254  2  AA               tax
003255  2  BD F1 4A         lda enemy_direction_chars_low,x
003258  2  18           	clc
003259  2  65 70            adc $70
00325B  2  85 70        	sta $70
00325D  2  BD F9 4A         lda enemy_direction_chars_high,x
003260  2  65 71            adc $71
003262  2  85 71            sta $71
003264  2               
003264  2                   plot_characters_16x16:
003264  2               
003264  2                   ; Use the dy value to determine which plotting routine to use.
003264  2               
003264  2  A0 00            ldy #0
003266  2  A6 76            ldx $76
003268  2  BD A2 32         lda plot_routine_indices_16x16,x
00326B  2               
00326B  2  91 78            sta ($78),y
00326D  2               
00326D  2                   plot_characters_stored:
00326D  2               
00326D  2  C8               iny
00326E  2  A5 70            lda $70
003270  2  91 78            sta ($78),y
003272  2  C8               iny
003273  2  A5 71            lda $71
003275  2  91 78            sta ($78),y
003277  2  C8               iny
003278  2  A5 72            lda $72
00327A  2  91 78            sta ($78),y
00327C  2  C8               iny
00327D  2  A5 73            lda $73
00327F  2  91 78            sta ($78),y
003281  2               
003281  2  18               clc
003282  2  A5 78            lda $78
003284  2  69 0C            adc #12
003286  2  85 78            sta $78
003288  2               
003288  2               ;	lda $79
003288  2               ;	adc #0
003288  2               ;	sta $79
003288  2               
003288  2                   plot_characters_loop_not_enemy:
003288  2               
003288  2                   plot_characters_next:
003288  2               
003288  2  A9 FF            lda #255    ; terminate this stream of entries in the plot buffer
00328A  2  A0 00            ldy #0
00328C  2  91 78            sta ($78),y
00328E  2  18               clc
00328F  2  60               rts
003290  2               
003290  2  00 20 40 60  enemie_adr_lo:	.byte <0,<288,<576,<864,<1152
003294  2  80           
003295  2  00 01 02 03  enemie_adr_hi:	.byte >0,>288,>576,>864,>1152
003299  2  04           
00329A  2               
00329A  2  01 02 03 04  plot_routine_indices_8x24:  .byte 1, 2, 3, 4
00329E  2  05 06 07 08  plot_routine_indices_8x8:   .byte 5, 6, 7, 8
0032A2  2  09 0A 0B 0C  plot_routine_indices_16x16: .byte 9, 10, 11, 12
0032A6  2               
0032A6  2               reset_plot_buffer:
0032A6  2  A9 DB            lda #<(L5300+6)    ; $5306 reset the index into the plot buffer
0032A8  2  85 84            sta $84
0032AA  2  A9 50            lda #>(L5300+6)
0032AC  2  85 85            sta $85
0032AE  2               
0032AE  2  A9 FF            lda #255    ; terminate the plot list
0032B0  2  A0 00            ldy #0
0032B2  2  91 84            sta ($84),y
0032B4  2  60               rts
0032B5  2               
0032B5  2               reset_unplot_buffer:
0032B5  2  A9 D5            lda #<L5300    ; $5300 reset the index into the plot buffer
0032B7  2  85 82            sta $82
0032B9  2  A9 50            lda #>L5300
0032BB  2  85 83            sta $83
0032BD  2               
0032BD  2  A9 FF            lda #255    ; terminate the unplot list
0032BF  2  A0 00            ldy #0
0032C1  2  91 82            sta ($82),y
0032C3  2  60               rts
0032C4  2               
0032C4  2  28           plot_buffer_types_low:  .byte <plot_buffer_loop_next
0032C5  2  48 48 48 48  plot_buffer_types_low1: .byte <plot8x24_y0, <plot8x24_y0, <plot8x24_y0, <plot8x24_y0
0032C9  2  FC FC FC FC  plot_buffer_types_low2: .byte <plot8x8_y0, <plot8x8_y0, <plot8x8_y0, <plot8x8_y0
0032CD  2  9B 9B 9B 9B  plot_buffer_types_low3: .byte <plot16x16_y0, <plot16x16_y0, <plot16x16_y0, <plot16x16_y0
0032D1  2               
0032D1  2  33           plot_buffer_types_high:  .byte >plot_buffer_loop_next
0032D2  2  30 30 30 30  plot_buffer_types_high1: .byte >plot8x24_y0, >plot8x24_y0, >plot8x24_y0, >plot8x24_y0
0032D6  2  30 30 30 30  plot_buffer_types_high2: .byte >plot8x8_y0, >plot8x8_y0, >plot8x8_y0, >plot8x8_y0
0032DA  2  30 30 30 30  plot_buffer_types_high3: .byte >plot16x16_y0, >plot16x16_y0, >plot16x16_y0, >plot16x16_y0
0032DE  2               
0032DE  2               plot_buffer:
0032DE  2               
0032DE  2  A9 D5            lda #<L5300			; $5300
0032E0  2  85 84            sta $84
0032E2  2  A9 50            lda #>L5300
0032E4  2  85 85            sta $85
0032E6  2               
0032E6  2  A9 06            lda #6
0032E8  2  85 88            sta $88
0032EA  2               
0032EA  2                   plot_buffer_loop:
0032EA  2               
0032EA  2  A0 00                ldy #0
0032EC  2  B1 84                lda ($84),y
0032EE  2  C9 FF                cmp #255
0032F0  2  F0 23                beq plot_buffer_loop_skip
0032F2  2               
0032F2  2  18                   clc
0032F3  2  AA                   tax
0032F4  2  BD C4 32             lda plot_buffer_types_low,x
0032F7  2  85 86                sta $86
0032F9  2  BD D1 32             lda plot_buffer_types_high,x
0032FC  2  85 87                sta $87
0032FE  2               
0032FE  2  C8                   iny
0032FF  2  B1 84                lda ($84),y
003301  2  85 70                sta $70
003303  2               
003303  2  C8                   iny
003304  2  B1 84                lda ($84),y
003306  2  85 71                sta $71
003308  2               
003308  2  C8                   iny
003309  2  B1 84                lda ($84),y
00330B  2  85 72                sta $72
00330D  2               
00330D  2  C8                   iny
00330E  2  B1 84                lda ($84),y
003310  2  85 73                sta $73
003312  2               
003312  2  6C 86 00             jmp ($86)       ; returns to plot_buffer_loop_next
003315  2               
003315  2                       plot_buffer_loop_skip:
003315  2               
003315  2  A5 88                lda $88
003317  2  C9 0C                cmp #12
003319  2  F0 17                beq plot_buffer_exit    ; both unplot and plot lists have terminated
00331B  2               
00331B  2  A9 0C                lda #12
00331D  2  85 88                sta $88
00331F  2  A5 84                lda $84
003321  2  69 06                adc #6
003323  2  85 84                sta $84
003325  2  4C EA 32             jmp plot_buffer_loop
003328  2               
003328  2                       plot_buffer_loop_next:
003328  2  18                   clc
003329  2               
003329  2  A5 84                lda $84
00332B  2  65 88                adc $88
00332D  2  85 84                sta $84
00332F  2  4C EA 32             jmp plot_buffer_loop
003332  2               
003332  2                   plot_buffer_exit:
003332  2  18               clc
003333  2  60               rts
003334  2               
003334  2               room_row_offsets_low:
003334  2  71 7B        		.byte <(L579c+00),<(L579c+10)
003336  2  85 8F        		.byte <(L579c+20),<(L579c+30)
003338  2  99 A3        		.byte <(L579c+40),<(L579c+50)
00333A  2  AD B7        		.byte <(L579c+60),<(L579c+70)
00333C  2  C1 CB        		.byte <(L579c+80),<(L579c+90)
00333E  2               room_row_offsets_high:
00333E  2  55 55        		.byte >(L579c+00),>(L579c+10)
003340  2  55 55        		.byte >(L579c+20),>(L579c+30)
003342  2  55 55        		.byte >(L579c+40),>(L579c+50)
003344  2  55 55        		.byte >(L579c+60),>(L579c+70)
003346  2  55 55        		.byte >(L579c+80),>(L579c+90)
003348  2               
003348  2               animate_player_left:
003348  2               
003348  2                   ; Set the direction and toggle the animation bit.
003348  2               
003348  2  AD D6 4F         lda L5280+$1
00334B  2  29 01            and #1
00334D  2  49 01            eor #1      ; toggle animation flag
00334F  2  8D D6 4F         sta L5280+$1   ; left (directional bits are 0)
003352  2               
003352  2  20 63 31         jsr plot_character
003355  2  60               rts
003356  2               
003356  2               animate_player_right:
003356  2               
003356  2                   ; Set the direction and toggle the animation bit.
003356  2               
003356  2  AD D6 4F         lda L5280+$1
003359  2  29 01            and #1      ; remove direction information (result is 0)
00335B  2  49 01            eor #1      ; toggle animation flag
00335D  2  09 02            ora #2      ; right
00335F  2  8D D6 4F         sta L5280+$1
003362  2               
003362  2  20 63 31         jsr plot_character
003365  2  60               rts
003366  2               
003366  2               animate_player_up:
003366  2               
003366  2                   ; Set the direction and toggle the animation bit.
003366  2               
003366  2  AD D6 4F         lda L5280+$1
003369  2  29 01            and #1      ; remove direction information (result is 0)
00336B  2  49 01            eor #1      ; toggle animation flag
00336D  2  09 04            ora #4      ; up
00336F  2  8D D6 4F         sta L5280+$1
003372  2               
003372  2  20 63 31         jsr plot_character
003375  2  60               rts
003376  2               
003376  2               animate_player_down:
003376  2               
003376  2                   ; Set the direction and toggle the animation bit.
003376  2               
003376  2  AD D6 4F         lda L5280+$1
003379  2  29 01            and #1      ; remove direction information (result is 0)
00337B  2  49 01            eor #1      ; toggle animation flag
00337D  2  09 06            ora #6      ; down
00337F  2  8D D6 4F         sta L5280+$1
003382  2               
003382  2  20 63 31         jsr plot_character
003385  2  60               rts
003386  2               
003386  2               ;joystick_abs:
003386  2               ;
003386  2               ;    cmp #160
003386  2               ;    bcc joystick_abs_next1
003386  2               ;
003386  2               ;    sec
003386  2               ;    sbc #128
003386  2               ;    clc
003386  2               ;    rts
003386  2               ;
003386  2               ;    joystick_abs_next1:
003386  2               ;
003386  2               ;    cmp #97
003386  2               ;    bcs joystick_abs_next2
003386  2               ;
003386  2               ;    sta $81
003386  2               ;    lda #128
003386  2               ;    sec
003386  2               ;    sbc $81
003386  2               ;    clc
003386  2               ;    rts
003386  2               ;
003386  2               ;    joystick_abs_next2:
003386  2               ;    lda #0
003386  2               ;    clc
003386  2               ;    rts
003386  2               ;
003386  2               read_joystick:
003386  2               
003386  2  20 AA 4E     	jsr joyget
003389  2  85 8F        	sta $8f
00338B  2               
00338B  2  29 01        	and #1			; Test right
00338D  2  F0 03        	beq chk_joy_left
00338F  2  4C 66 34     	jmp move_player_right
003392  2               chk_joy_left:
003392  2  A5 8F        	lda $8f
003394  2  29 02        	and #2			; Test left
003396  2  F0 03        	beq chk_joy_down
003398  2  4C D6 33     	jmp move_player_left
00339B  2               
00339B  2               read_joystick_vertical_check:
00339B  2               
00339B  2               chk_joy_down:
00339B  2  A5 8F        	lda $8f
00339D  2  29 04        	and #4			; Test down
00339F  2  F0 03        	beq chk_joy_up
0033A1  2  4C 82 35     	jmp move_player_down
0033A4  2               chk_joy_up:
0033A4  2  A5 8F        	lda $8f
0033A6  2  29 08        	and #8			; Test up
0033A8  2  F0 03        	beq no_joy_move
0033AA  2  4C 07 35     	jmp move_player_up
0033AD  2               no_joy_move:
0033AD  2  18           	clc
0033AE  2  60           	rts
0033AF  2               
0033AF  2               ;    lda #128
0033AF  2               ;    ldx #2
0033AF  2               ;    jsr $fff4
0033AF  2               ;    tya
0033AF  2               ;    sta $8e             ; store the original vertical value
0033AF  2               ;
0033AF  2               ;    jsr joystick_abs
0033AF  2               ;    sta $8f             ; absolute vertical value
0033AF  2               ;
0033AF  2               ;    lda #128
0033AF  2               ;    ldx #1
0033AF  2               ;    jsr $fff4
0033AF  2               ;    tya
0033AF  2               ;    sta $8d             ; store the original horizontal value
0033AF  2               ;
0033AF  2               ;    jsr joystick_abs
0033AF  2               ;    cmp #0
0033AF  2               ;    beq read_joystick_vertical_check
0033AF  2               ;    cmp $8f
0033AF  2               ;    bcc read_joystick_vertical_check
0033AF  2               ;
0033AF  2               ;    lda $8d
0033AF  2               ;    cmp #128
0033AF  2               ;    bcs read_joystick_left
0033AF  2               ;    jmp move_player_right
0033AF  2               ;
0033AF  2               ;    read_joystick_left:
0033AF  2               ;    jmp move_player_left
0033AF  2               ;
0033AF  2               ;    read_joystick_vertical_check:
0033AF  2               ;
0033AF  2               ;    lda $8f
0033AF  2               ;    cmp #0
0033AF  2               ;    bne read_joystick_vertical
0033AF  2               ;    clc
0033AF  2               ;    rts
0033AF  2               ;
0033AF  2               ;    read_joystick_vertical:
0033AF  2               ;
0033AF  2               ;    lda $8e
0033AF  2               ;    cmp #128
0033AF  2               ;    bcs read_joystick_up
0033AF  2               ;    jmp move_player_down
0033AF  2               ;
0033AF  2               ;    read_joystick_up:
0033AF  2               ;    jmp move_player_up
0033AF  2               
0033AF  2               move_player:
0033AF  2               
0033AF  2  AD 63 55         lda L578e
0033B2  2  29 01            and #1
0033B4  2  F0 02            beq move_player_allowed
0033B6  2               
0033B6  2  18               clc
0033B7  2  60               rts
0033B8  2               
0033B8  2                   move_player_allowed:
0033B8  2               
0033B8  2  A9 D5            lda #<L5280		; $5280 set up the address of the player character
0033BA  2  85 74            sta $74
0033BC  2  A9 4F            lda #>L5280
0033BE  2  85 75            sta $75
0033C0  2               
0033C0  2                   ; Handle joystick
0033C0  2               
0033C0  2  AD 53 55         lda L577e
0033C3  2  C9 00            cmp #0
0033C5  2  F0 03            beq move_player_handle_left_key
0033C7  2  4C 86 33         jmp read_joystick
0033CA  2               
0033CA  2                   move_player_handle_left_key:
0033CA  2               
0033CA  2                   ; Handle the left key.
0033CA  2               
0033CA  2  A2 3A            ldx #$3a            ; (Z)
0033CC  2  20 60 4A         jsr check_key
0033CF  2  C0 FF            cpy #255
0033D1  2  F0 03            beq move_player_left
0033D3  2  4C 5A 34         jmp move_player_check_right_key
0033D6  2               
0033D6  2                   move_player_left:
0033D6  2               
0033D6  2  AD DA 4F         lda L5280+$5           ; read dx
0033D9  2  C9 00            cmp #0
0033DB  2  F0 0A            beq move_player_left_check_x
0033DD  2               
0033DD  2  20 53 31         jsr unplot_character        ; unplot the player character
0033E0  2  CE DA 4F         dec L5280+$5
0033E3  2  18               clc
0033E4  2  4C 48 33         jmp animate_player_left ; optimise away the rts
0033E7  2               
0033E7  2                   move_player_left_check_x:   ; Check the x offset.
0033E7  2               
0033E7  2  AD D9 4F         lda L5280+$4
0033EA  2  C9 00            cmp #0
0033EC  2  F0 53            beq move_player_leave_room_left
0033EE  2               
0033EE  2  18               clc
0033EF  2  A8               tay
0033F0  2  88               dey                         ; x - 1
0033F1  2  AD D7 4F         lda L5280+$2                   ; load the y offset
0033F4  2  AA               tax                         ; as an index
0033F5  2  BD 34 33         lda room_row_offsets_low,x  ; read the address of the row
0033F8  2  85 70            sta $70
0033FA  2  BD 3E 33         lda room_row_offsets_high,x
0033FD  2  85 71            sta $71
0033FF  2  B1 70            lda ($70),y                 ; load the tile to the left
003401  2               
003401  2  C9 05            cmp #5                      ; check for the open exit or final exit
003403  2  30 03            bmi move_player_not_left_exit1
003405  2  4C FF 35         jmp try_to_exit_level       ; optimise away the rts
003408  2               
003408  2                   move_player_not_left_exit1:
003408  2  C9 00            cmp #0
00340A  2  F0 03            beq move_player_left_check_dy
00340C  2  4C E8 34         jmp move_player_not_horizontal
00340F  2               
00340F  2                   move_player_left_check_dy:
00340F  2               
00340F  2  AD D8 4F         lda L5280+$3               ; dy
003412  2  C9 00            cmp #0
003414  2  F0 17            beq move_player_allow_left
003416  2               
003416  2  18               clc
003417  2  A5 70            lda $70                 ; dy > 0 so we need to check another tile
003419  2  69 0A            adc #10
00341B  2  85 70            sta $70
00341D  2  B1 70            lda ($70),y             ; load the tile below and to the left
00341F  2               
00341F  2  C9 05            cmp #5                      ; check for the open exit or final exit
003421  2  30 03            bmi move_player_not_left_exit2
003423  2  4C FF 35         jmp try_to_exit_level       ; optimise away the rts
003426  2               
003426  2                   move_player_not_left_exit2:
003426  2  C9 00            cmp #0
003428  2  F0 03            beq move_player_allow_left
00342A  2  4C E8 34         jmp move_player_not_horizontal
00342D  2               
00342D  2                   move_player_allow_left:
00342D  2  98               tya
00342E  2  85 81            sta $81                 ; temporary
003430  2  20 53 31         jsr unplot_character    ; unplot the player character
003433  2  A5 81            lda $81
003435  2  8D D9 4F         sta L5280+$4               ; store the new room x offset
003438  2  A9 02            lda #2
00343A  2  8D DA 4F         sta L5280+$5               ; dx = 3
00343D  2  18               clc
00343E  2  4C 48 33         jmp animate_player_left ; optimise away the rts
003441  2               
003441  2                   move_player_leave_room_left:
003441  2  38               sec
003442  2  AD 58 55         lda L5782+1
003445  2  E9 01            sbc #1
003447  2  8D 58 55         sta L5782+1
00344A  2  18               clc
00344B  2               
00344B  2                   ; Set the player's position on the right of the screen.
00344B  2               
00344B  2                   ; No need to unplot.
00344B  2               
00344B  2  A9 09            lda #9      ; x = 9
00344D  2  8D D9 4F         sta L5280+$4
003450  2  A9 01            lda #1      ; dx = 2
003452  2  8D DA 4F         sta L5280+$5
003455  2               
003455  2  20 48 33         jsr animate_player_left
003458  2  38               sec                     ; indicate to the calling routine that the player
003459  2  60               rts                     ; has left the room
00345A  2               
00345A  2                   move_player_check_right_key:
00345A  2               
00345A  2                   ; Handle the right key.
00345A  2               
00345A  2  A2 38            ldx #$38            ; (X)
00345C  2  20 60 4A         jsr check_key
00345F  2  C0 FF            cpy #255
003461  2  F0 03            beq move_player_right
003463  2  4C E8 34         jmp move_player_not_horizontal
003466  2               
003466  2                   move_player_right:
003466  2               
003466  2  AD DA 4F         lda L5280+$5                   ; read dx
003469  2  C9 01            cmp #1				; cmp #2!!!!!!!!!!!!!!!!!!
00346B  2  F0 0E            beq move_player_right_check_x
00346D  2  C9 02            cmp #2				; cmp #3!!!!!!!!!!!!!!!!!!
00346F  2  F0 54            beq move_player_right_tile
003471  2               
003471  2  20 53 31         jsr unplot_character        ; unplot the player character
003474  2  EE DA 4F         inc L5280+$5
003477  2  18               clc
003478  2  4C 56 33         jmp animate_player_right    ; optimise away the rts
00347B  2               
00347B  2                   move_player_right_check_x:  ; Check the x offset.
00347B  2               
00347B  2  AD D9 4F         lda L5280+$4
00347E  2  C9 09            cmp #9
003480  2  F0 52            beq move_player_leave_room_right
003482  2               
003482  2  18               clc
003483  2  A8               tay
003484  2  C8               iny                         ; x + 1
003485  2  AD D7 4F         lda L5280+$2                   ; load the y offset
003488  2  AA               tax                         ; as an index
003489  2  BD 34 33         lda room_row_offsets_low,x  ; read the address of the row
00348C  2  85 70            sta $70
00348E  2  BD 3E 33         lda room_row_offsets_high,x
003491  2  85 71            sta $71
003493  2  B1 70            lda ($70),y                 ; load the tile to the right
003495  2               
003495  2  C9 05            cmp #5                      ; check for the open exit or final exit
003497  2  30 03            bmi move_player_not_right_exit1
003499  2  4C FF 35         jmp try_to_exit_level       ; optimise away the rts
00349C  2               
00349C  2                   move_player_not_right_exit1:
00349C  2  C9 00            cmp #0
00349E  2  D0 48            bne move_player_not_horizontal
0034A0  2               
0034A0  2  AD D8 4F         lda L5280+$3                   ; dy
0034A3  2  C9 00            cmp #0
0034A5  2  F0 14            beq move_player_allow_right
0034A7  2               
0034A7  2  18               clc                         ; dy > 0 so we need to check another tile
0034A8  2  A5 70            lda $70
0034AA  2  69 0A            adc #10
0034AC  2  85 70            sta $70
0034AE  2  B1 70            lda ($70),y                 ; load the tile below and to the right
0034B0  2               
0034B0  2  C9 05            cmp #5                      ; check for the open exit or final exit
0034B2  2  30 03            bmi move_player_not_right_exit2
0034B4  2  4C FF 35         jmp try_to_exit_level       ; optimise away the rts
0034B7  2               
0034B7  2                   move_player_not_right_exit2:
0034B7  2  C9 00            cmp #0
0034B9  2  D0 2D            bne move_player_not_horizontal
0034BB  2               
0034BB  2                   move_player_allow_right:
0034BB  2               
0034BB  2  20 53 31         jsr unplot_character        ; unplot the player character
0034BE  2  EE DA 4F         inc L5280+$5                   ; update dx
0034C1  2  18               clc
0034C2  2  4C 56 33         jmp animate_player_right    ; optimise away the rts
0034C5  2               
0034C5  2                   move_player_right_tile:
0034C5  2               
0034C5  2  20 53 31         jsr unplot_character    ; unplot the player character
0034C8  2  EE D9 4F         inc L5280+$4               ; store the new room x offset
0034CB  2  A9 00            lda #0
0034CD  2  8D DA 4F         sta L5280+$5               ; dx = 0
0034D0  2  18               clc
0034D1  2  4C 56 33         jmp animate_player_right ; optimise away the rts
0034D4  2               
0034D4  2                   move_player_leave_room_right:
0034D4  2  18               clc
0034D5  2  EE 58 55         inc L5782+1
0034D8  2  18               clc
0034D9  2               
0034D9  2                   ; Set the player's position on the left of the screen.
0034D9  2               
0034D9  2                   ; No need to unplot.
0034D9  2               
0034D9  2  A9 00            lda #0      ; x = 0
0034DB  2  8D D9 4F         sta L5280+$4
0034DE  2  A9 00            lda #0      ; dx = 0
0034E0  2  8D DA 4F         sta L5280+$5
0034E3  2               
0034E3  2  20 56 33         jsr animate_player_right
0034E6  2  38               sec                         ; indicate to the calling routine that the
0034E7  2  60               rts                         ; player has left the room
0034E8  2               
0034E8  2                   move_player_not_horizontal:
0034E8  2  AD 53 55         lda L577e
0034EB  2  C9 00            cmp #0
0034ED  2  F0 03            beq move_player_handle_up_key
0034EF  2  4C 9B 33         jmp read_joystick_vertical_check
0034F2  2               
0034F2  2                   move_player_handle_up_key:
0034F2  2               
0034F2  2                   ; Handle the up key.
0034F2  2               
0034F2  2  A2 1B            ldx #$1b          ; (:)
0034F4  2  20 60 4A         jsr check_key
0034F7  2  C0 FF            cpy #255
0034F9  2  F0 0C            beq move_player_up
0034FB  2               
0034FB  2                   ; Handle the down key.
0034FB  2               
0034FB  2  A2 1E            ldx #$1e            ; (/)
0034FD  2  20 60 4A         jsr check_key
003500  2  C0 FF            cpy #255
003502  2  F0 7E            beq move_player_down
003504  2  4C FD 35         jmp move_player_not_vertical
003507  2               
003507  2                   move_player_up:
003507  2               
003507  2  AD D8 4F         lda L5280+$3           ; read dy
00350A  2  C9 00            cmp #0
00350C  2  F0 0A            beq move_player_up_check_y
00350E  2               
00350E  2  20 53 31         jsr unplot_character        ; unplot the player character
003511  2  CE D8 4F         dec L5280+$3
003514  2  18               clc
003515  2  4C 66 33         jmp animate_player_up       ; optimise away the rts
003518  2               
003518  2                   move_player_up_check_y:     ; Check the y offset.
003518  2               
003518  2  AD D7 4F         lda L5280+$2
00351B  2  C9 00            cmp #0
00351D  2  F0 4A            beq move_player_leave_room_up
00351F  2               
00351F  2  AA               tax                         ; use the y offset as an index
003520  2  CA               dex                         ; y - 1
003521  2  AC D9 4F         ldy L5280+$4                   ; load the x offset
003524  2  BD 34 33         lda room_row_offsets_low,x  ; read the address of the row
003527  2  85 70            sta $70
003529  2  BD 3E 33         lda room_row_offsets_high,x
00352C  2  85 71            sta $71
00352E  2  B1 70            lda ($70),y                 ; load the tile above
003530  2               
003530  2  C9 05            cmp #5                      ; check for the open exit or final exit
003532  2  30 03            bmi move_player_not_up_exit1
003534  2  4C FF 35         jmp try_to_exit_level       ; optimise away the rts
003537  2               
003537  2                   move_player_not_up_exit1:
003537  2  C9 00            cmp #0
003539  2  F0 02            beq move_player_up_check_dx
00353B  2  18               clc
00353C  2  60               rts
00353D  2               
00353D  2                   move_player_up_check_dx:
00353D  2               
00353D  2  AD DA 4F         lda L5280+$5                   ; dx
003540  2  C9 02            cmp #2					; cmp #3!!!!!!!!!!!!!!!!!!!!
003542  2  30 11            bmi move_player_allow_up
003544  2               
003544  2  18               clc                     ; dx > 2 so we need to check another tile
003545  2  C8               iny
003546  2  B1 70            lda ($70),y             ; load the tile above and to the right
003548  2               
003548  2  C9 05            cmp #5                      ; check for the open exit or final exit
00354A  2  30 03            bmi move_player_not_up_exit2
00354C  2  4C FF 35         jmp try_to_exit_level       ; optimise away the rts
00354F  2               
00354F  2                   move_player_not_up_exit2:
00354F  2  C9 00            cmp #0
003551  2  F0 02            beq move_player_allow_up
003553  2  18               clc
003554  2  60               rts
003555  2               
003555  2                   move_player_allow_up:
003555  2  8A               txa
003556  2  85 81            sta $81                 ; temporary
003558  2  20 53 31         jsr unplot_character    ; unplot the player character
00355B  2  A5 81            lda $81
00355D  2  8D D7 4F         sta L5280+$2               ; store the new room y offset
003560  2  A9 03            lda #3
003562  2  8D D8 4F         sta L5280+$3               ; dy = 3
003565  2  18               clc
003566  2  4C 66 33         jmp animate_player_up   ; optimise away the rts
003569  2               
003569  2                   move_player_leave_room_up:
003569  2  38               sec
00356A  2  AD 57 55         lda L5782
00356D  2  E9 01            sbc #1
00356F  2  8D 57 55         sta L5782
003572  2  18               clc
003573  2               
003573  2                   ; Set the player's position on the bottom of the screen.
003573  2               
003573  2                   ; No need to unplot.
003573  2               
003573  2  A9 09            lda #9      ; y = 9
003575  2  8D D7 4F         sta L5280+$2
003578  2  A9 00            lda #0      ; dy = 0
00357A  2  8D D8 4F         sta L5280+$3
00357D  2               
00357D  2  20 66 33         jsr animate_player_up
003580  2  38               sec                     ; indicate to the calling routine that the player
003581  2  60               rts                     ; has left the room
003582  2               
003582  2                   move_player_down:
003582  2               
003582  2  AD D8 4F         lda L5280+$3                   ; read dy
003585  2  C9 00            cmp #0
003587  2  F0 0E            beq move_player_down_check_y
003589  2  C9 03            cmp #3
00358B  2  F0 4E            beq move_player_down_tile
00358D  2               
00358D  2  20 53 31         jsr unplot_character        ; unplot the player character
003590  2  EE D8 4F         inc L5280+$3                   ; 0 <= dy < 3
003593  2  18               clc
003594  2  4C 76 33         jmp animate_player_down    ; optimise away the rts
003597  2               
003597  2                   move_player_down_check_y:  ; Check the y offset.
003597  2               
003597  2  AD D7 4F         lda L5280+$2
00359A  2  C9 09            cmp #9
00359C  2  F0 4C            beq move_player_leave_room_down
00359E  2               
00359E  2  18               clc
00359F  2  AA               tax
0035A0  2  E8               inx                         ; y + 1
0035A1  2  AC D9 4F         ldy L5280+$4                   ; load the x offset
0035A4  2  BD 34 33         lda room_row_offsets_low,x  ; read the address of the row
0035A7  2  85 70            sta $70
0035A9  2  BD 3E 33         lda room_row_offsets_high,x
0035AC  2  85 71            sta $71
0035AE  2  B1 70            lda ($70),y                 ; load the tile below
0035B0  2               
0035B0  2  C9 05            cmp #5                      ; check for the open exit or final exit
0035B2  2  30 03            bmi move_player_not_down_exit1
0035B4  2  4C FF 35         jmp try_to_exit_level       ; optimise away the rts
0035B7  2               
0035B7  2                   move_player_not_down_exit1:
0035B7  2  C9 00            cmp #0
0035B9  2  D0 42            bne move_player_not_vertical
0035BB  2               
0035BB  2  AD DA 4F         lda L5280+$5                   ; dx
0035BE  2  C9 02            cmp #2					; cmp #3!!!!!!!!!!!!!
0035C0  2  30 0F            bmi move_player_allow_down
0035C2  2               
0035C2  2  18               clc                         ; dx > 2 so we need to check another tile
0035C3  2  C8               iny
0035C4  2  B1 70            lda ($70),y                 ; load the tile below and to the right
0035C6  2               
0035C6  2  C9 05            cmp #5                      ; check for the open exit or final exit
0035C8  2  30 03            bmi move_player_not_down_exit2
0035CA  2  4C FF 35         jmp try_to_exit_level       ; optimise away the rts
0035CD  2               
0035CD  2                   move_player_not_down_exit2:
0035CD  2  C9 00            cmp #0
0035CF  2  D0 2C            bne move_player_not_vertical
0035D1  2               
0035D1  2                   move_player_allow_down:
0035D1  2               
0035D1  2  20 53 31         jsr unplot_character        ; unplot the player character
0035D4  2  EE D8 4F         inc L5280+$3                   ; update dy
0035D7  2  18               clc
0035D8  2  4C 76 33         jmp animate_player_down     ; optimise away the rts
0035DB  2               
0035DB  2                   move_player_down_tile:
0035DB  2               
0035DB  2  20 53 31         jsr unplot_character        ; unplot the player character
0035DE  2  EE D7 4F         inc L5280+$2                   ; store the new room y offset
0035E1  2  A9 00            lda #0
0035E3  2  8D D8 4F         sta L5280+$3                   ; dy = 0
0035E6  2  18               clc
0035E7  2  4C 76 33         jmp animate_player_down     ; optimise away the rts
0035EA  2               
0035EA  2                   move_player_leave_room_down:
0035EA  2  EE 57 55         inc L5782
0035ED  2  18               clc
0035EE  2               
0035EE  2                   ; Set the player's position on the top of the screen.
0035EE  2               
0035EE  2                   ; No need to unplot.
0035EE  2               
0035EE  2  A9 00            lda #0      ; y = 0
0035F0  2  8D D7 4F         sta L5280+$2
0035F3  2  A9 00            lda #0      ; dy = 0
0035F5  2  8D D8 4F         sta L5280+$3
0035F8  2               
0035F8  2  20 76 33         jsr animate_player_down
0035FB  2  38               sec                         ; indicate to the calling routine that the
0035FC  2  60               rts                         ; player has left the room
0035FD  2               
0035FD  2                   move_player_not_vertical:
0035FD  2  18               clc
0035FE  2  60               rts
0035FF  2               
0035FF  2               try_to_exit_level:
0035FF  2               
0035FF  2  C9 06            cmp #6
003601  2  30 08            bmi just_exit_level
003603  2               
003603  2  AD 55 55         lda L5780                   ; set the complete game flag
003606  2  09 02            ora #$02
003608  2  4C 10 36         jmp try_to_exit_level_exit
00360B  2               
00360B  2                   just_exit_level:
00360B  2  AD 55 55         lda L5780                   ; set the exit level flag
00360E  2  09 80            ora #$80
003610  2               
003610  2                   try_to_exit_level_exit:
003610  2  8D 55 55         sta L5780
003613  2               
003613  2  A9 D5            lda #<L5280			; $5280
003615  2  85 74            sta $74
003617  2  A9 4F            lda #>L5280
003619  2  85 75            sta $75
00361B  2  20 53 31         jsr unplot_character    ; remove the player sprite
00361E  2  4C 41 3F         jmp destroy_enemies     ; optimise away the rts
003621  2               
003621  2               check_fire_key:
003621  2               
003621  2  AD 62 55         lda L578d
003624  2  D0 26            bne check_fire_key_exit
003626  2               
003626  2  AD 53 55         lda L577e
003629  2  F0 09            beq check_fire_key_no_joystick
00362B  2               
00362B  2  20 AA 4E     	jsr joyget
00362E  2  29 10        	and #$10
003630  2               ;    lda #128
003630  2               ;    ldx #0
003630  2               ;    jsr $fff4
003630  2               ;    txa
003630  2               ;    and #1
003630  2  D0 0B            bne check_fire_key_fire
003632  2               
003632  2  18               clc
003633  2  60               rts
003634  2               
003634  2                   check_fire_key_no_joystick:
003634  2               
003634  2  A2 0D            ldx #13            ; (Return)
003636  2  20 60 4A         jsr check_key
003639  2  C0 FF            cpy #255
00363B  2  D0 0F            bne check_fire_key_exit
00363D  2               
00363D  2                   check_fire_key_fire:
00363D  2               
00363D  2  AD DB 4F         lda L5280+$6
003640  2  C9 00            cmp #0
003642  2  D0 08            bne check_fire_key_exit
003644  2               
003644  2  A9 10            lda #16
003646  2  8D 62 55         sta L578d
003649  2               
003649  2  4C 4E 36         jmp create_projectile   ; optimise away the rts
00364C  2               
00364C  2                   check_fire_key_exit:
00364C  2  18               clc
00364D  2  60               rts
00364E  2               
00364E  2               create_projectile:
00364E  2               
00364E  2  A9 02            lda #2
003650  2  8D DB 4F         sta L5280+$6
003653  2               
003653  2  AD D6 4F         lda L5280+$1
003656  2  29 06            and #$06        ; copy the direction information
003658  2  0A               asl
003659  2  0A               asl
00365A  2  0A               asl
00365B  2  0D 5E 55         ora L5789       ; apply the projectile type
00365E  2  8D DC 4F         sta L5280+$7
003661  2               
003661  2  AD D8 4F         lda L5280+$3       ; player dy
003664  2  6D 54 55         adc L577f       ; add the weapon counter
003667  2  69 01            adc #1
003669  2  C9 04            cmp #4          ; if dy > 3, create the projectile on the tile below
00366B  2  10 0D            bpl create_projectile_below
00366D  2               
00366D  2  18               clc
00366E  2  8D DE 4F         sta L5280+$9       ; dy + weapon counter + 1
003671  2  AD D7 4F         lda L5280+$2       ; y
003674  2  8D DD 4F         sta L5280+$8
003677  2  4C 89 36         jmp create_projectile_continue
00367A  2               
00367A  2                   create_projectile_below:
00367A  2  38               sec
00367B  2  E9 04            sbc #4
00367D  2  8D DE 4F         sta L5280+$9       ; dy + weapon counter + 1 - 4
003680  2  18               clc
003681  2  AD D7 4F         lda L5280+$2       ; y
003684  2  69 01            adc #1
003686  2  8D DD 4F         sta L5280+$8
003689  2               
003689  2                   create_projectile_continue:
003689  2  AD D9 4F         lda L5280+$4       ; x
00368C  2  8D DF 4F         sta L5280+$a
00368F  2               
00368F  2  AD DA 4F         lda L5280+$5       ; dx
003692  2  8D E0 4F         sta L5280+$b
003695  2               
003695  2  AD 54 55         lda L577f       ; toggle the weapon counter
003698  2  49 01            eor #1
00369A  2  8D 54 55         sta L577f
00369D  2               
00369D  2                   ; Move the projectile away from the player.
00369D  2               
00369D  2  A9 DB            lda #<(L5280+6)		; $5286
00369F  2  85 74            sta $74
0036A1  2  A9 4F            lda #>(L5280+6)
0036A3  2  85 75            sta $75
0036A5  2  20 9B 3C         jsr move_projectile_after_unplot
0036A8  2               
0036A8  2  20 85 3C         jsr move_projectile
0036AB  2               
0036AB  2  18               clc
0036AC  2  60               rts
0036AD  2               
0036AD  2               emerge_type:                    ; returns A=type
0036AD  2  20 43 2B         jsr unlimited_values
0036B0  2  A5 7D            lda $7d
0036B2  2  29 07            and #7
0036B4  2  C9 05            cmp #5
0036B6  2  30 04            bmi emerge_type_ok
0036B8  2               
0036B8  2  38               sec
0036B9  2  E9 05            sbc #5
0036BB  2  18               clc
0036BC  2               
0036BC  2                   emerge_type_ok:
0036BC  2  CD 56 55         cmp L5781               ; only allow the appropriate enemies for this level
0036BF  2  30 0A            bmi emerge_type_exit
0036C1  2  F0 03            beq emerge_type_reduce
0036C3  2               
0036C3  2  38               sec
0036C4  2  E9 01            sbc #1
0036C6  2               
0036C6  2                   emerge_type_reduce:
0036C6  2  38               sec
0036C7  2  ED 56 55         sbc L5781
0036CA  2  18               clc
0036CB  2               
0036CB  2                   emerge_type_exit:
0036CB  2  0A               asl
0036CC  2  0A               asl
0036CD  2  0A               asl
0036CE  2  0A               asl
0036CF  2  18               clc
0036D0  2  60               rts
0036D1  2               
0036D1  2               emerge_character:           ; $74,$75=character address
0036D1  2               
0036D1  2  A9 3F            lda #63
0036D3  2  8D 64 55         sta L578f
0036D6  2               
0036D6  2  20 43 2B         jsr unlimited_values
0036D9  2  29 0F            and #$0f
0036DB  2  AA               tax
0036DC  2  BD 35 4F         lda L0ee0,x
0036DF  2  C9 00            cmp #0                  ; check for an invalid value and exit if found
0036E1  2  F0 2D            beq emerge_character_exit
0036E3  2               
0036E3  2  85 80            sta $80                 ; temporary
0036E5  2  BD 45 4F         lda L0ef0,x
0036E8  2  AA               tax
0036E9  2               
0036E9  2                   ; Add an emerging enemy.
0036E9  2               
0036E9  2  A0 00            ldy #0
0036EB  2  A9 03            lda #3                  ; emerge/explosion
0036ED  2  91 74            sta ($74),y
0036EF  2               
0036EF  2  20 AD 36         jsr emerge_type         ; obtain an enemy type
0036F2  2  C8               iny
0036F3  2  91 74            sta ($74),y
0036F5  2               
0036F5  2  8A               txa
0036F6  2  C8               iny
0036F7  2  91 74            sta ($74),y             ; store the y position
0036F9  2  A9 01            lda #1
0036FB  2  C8               iny
0036FC  2  91 74            sta ($74),y             ; store the dy offset
0036FE  2               
0036FE  2  A5 80            lda $80
003700  2  C8               iny
003701  2  91 74            sta ($74),y             ; store the x position
003703  2  A9 00            lda #0
003705  2  C8               iny
003706  2  91 74            sta ($74),y             ; store the dx offset
003708  2               
003708  2  20 63 31         jsr plot_character
00370B  2               
00370B  2  A2 05            ldx #5
00370D  2  20 B8 40         jsr play_sound
003710  2               
003710  2                   emerge_character_exit:
003710  2  18               clc
003711  2  60               rts
003712  2               
003712  2               emerge_explode:             ; $74,$75=character address
003712  2               
003712  2  20 53 31         jsr unplot_character
003715  2               
003715  2  A0 01            ldy #1
003717  2  B1 74            lda ($74),y     ; direction/animation
003719  2  AA               tax
00371A  2  69 01            adc #1          ; update the counter
00371C  2  29 03            and #3          ; mask off everything else
00371E  2  85 80            sta $80         ; store the masked counter value
003720  2  D0 24            bne move_characters_explosion_not_finished
003722  2               
003722  2  8A               txa
003723  2  29 04            and #4
003725  2  D0 16            bne move_characters_remove_character
003727  2               
003727  2                   ; For emerges, convert into an enemy.
003727  2  8A               txa
003728  2  29 70            and #$70        ; only keep bits 4,5,6
00372A  2  09 08            ora #8          ; make this an enemy
00372C  2               
00372C  2  A0 00            ldy #0
00372E  2  91 74            sta ($74),y     ; update the type (>= 8)
003730  2  C8               iny
003731  2  A5 7D            lda $7d         ; prepare the direction and animation offset
003733  2  29 0C            and #$0c
003735  2  91 74            sta ($74),y
003737  2               
003737  2  20 63 31         jsr plot_character
00373A  2  4C 52 37         jmp emerge_explode_exit
00373D  2               
00373D  2                   move_characters_remove_character:
00373D  2               
00373D  2                   ; For finished explosions, just write 0 into the character array.
00373D  2  A9 00            lda #0
00373F  2  A0 00            ldy #0
003741  2  91 74            sta ($74),y
003743  2  4C 52 37         jmp emerge_explode_exit
003746  2               
003746  2                   move_characters_explosion_not_finished:
003746  2  8A               txa
003747  2  29 FC            and #$fc
003749  2  05 80            ora $80
00374B  2               
00374B  2  A0 01            ldy #1
00374D  2  91 74            sta ($74),y
00374F  2               
00374F  2  20 63 31         jsr plot_character
003752  2               
003752  2                   emerge_explode_exit:
003752  2  18               clc
003753  2  60               rts
003754  2               
003754  2               animate_enemy_left:     ; $74,$75=character address
003754  2               
003754  2                   ; Set the direction and toggle the animation bit.
003754  2               
003754  2  A0 01            ldy #1
003756  2  B1 74            lda ($74),y
003758  2  29 FB            and #$fb    ; keep vertical direction bit and animation bits
00375A  2  91 74            sta ($74),y ; left (horizontal directional bit is 0)
00375C  2               
00375C  2  60               rts
00375D  2               
00375D  2               move_enemy_left:        ; $74,$75=character address
00375D  2               
00375D  2  A0 05            ldy #5
00375F  2  B1 74            lda ($74),y         ; read dx
003761  2  C9 00            cmp #0
003763  2  F0 0B            beq move_enemy_left_check_x
003765  2               
003765  2  38               sec
003766  2  E9 01            sbc #1
003768  2  A0 05            ldy #5
00376A  2  91 74            sta ($74),y                 ; dx
00376C  2  18               clc
00376D  2  4C 54 37         jmp animate_enemy_left      ; optimise away the rts
003770  2               
003770  2                   move_enemy_left_check_x:
003770  2               
003770  2                   ; Check the x offset.
003770  2               
003770  2  A0 04            ldy #4
003772  2  B1 74            lda ($74),y                 ; x
003774  2  C9 00            cmp #0
003776  2  F0 43            beq move_enemy_left_exit
003778  2               
003778  2  38               sec
003779  2  E9 01            sbc #1                      ; x - 1
00377B  2  85 81            sta $81                     ; temporary
00377D  2  A0 02            ldy #2
00377F  2  B1 74            lda ($74),y                 ; load the y offset
003781  2  AA               tax                         ; as an index
003782  2  BD 34 33         lda room_row_offsets_low,x  ; read the address of the row
003785  2  85 70            sta $70
003787  2  BD 3E 33         lda room_row_offsets_high,x
00378A  2  85 71            sta $71
00378C  2  A4 81            ldy $81                     ; temporary (x - 1)
00378E  2  B1 70            lda ($70),y                 ; load the tile to the left
003790  2               
003790  2  C9 00            cmp #0
003792  2  D0 27            bne move_enemy_left_exit
003794  2               
003794  2  A0 03            ldy #3
003796  2  B1 74            lda ($74),y                 ; dy
003798  2  C9 01            cmp #1				; cmp #2
00379A  2  30 0F            bmi move_enemy_allow_left
00379C  2               
00379C  2  18               clc
00379D  2  A5 70            lda $70                 ; dy > 1 so we need to check another tile
00379F  2  69 0A            adc #10
0037A1  2  85 70            sta $70
0037A3  2  A4 81            ldy $81                 ; temporary (x - 1)
0037A5  2  B1 70            lda ($70),y             ; load the tile below and to the left
0037A7  2               
0037A7  2  C9 00            cmp #0
0037A9  2  D0 10            bne move_enemy_left_exit
0037AB  2               
0037AB  2                   move_enemy_allow_left:
0037AB  2  A5 81            lda $81
0037AD  2  A0 04            ldy #4
0037AF  2  91 74            sta ($74),y             ; store the new room x offset
0037B1  2  A9 02            lda #2				; dx=3
0037B3  2  A0 05            ldy #5
0037B5  2  91 74            sta ($74),y             ; dx = 3
0037B7  2  18               clc
0037B8  2  4C 54 37         jmp animate_enemy_left ; optimise away the rts
0037BB  2               
0037BB  2                   move_enemy_left_exit:
0037BB  2  38               sec
0037BC  2  60               rts
0037BD  2               
0037BD  2               animate_enemy_right:    ; $74,$75=character address
0037BD  2               
0037BD  2                   ; Set the direction and toggle the animation bit.
0037BD  2               
0037BD  2  A0 01            ldy #1
0037BF  2  B1 74            lda ($74),y
0037C1  2  09 04            ora #$04    ; right (keep vertical direction bit and animation bits)
0037C3  2  91 74            sta ($74),y
0037C5  2               
0037C5  2  60               rts
0037C6  2               
0037C6  2               move_enemy_right:       ; $74,$75=character_address
0037C6  2               
0037C6  2  A0 05            ldy #5
0037C8  2  B1 74            lda ($74),y                 ; read dx
0037CA  2  C9 00            cmp #0
0037CC  2  F0 0E            beq move_enemy_right_check_x
0037CE  2  C9 02            cmp #2				; cmp #3
0037D0  2  F0 52            beq move_enemy_right_tile
0037D2  2               
0037D2  2  18               clc
0037D3  2  69 01            adc #1
0037D5  2  A0 05            ldy #5
0037D7  2  91 74            sta ($74),y
0037D9  2  4C BD 37         jmp animate_enemy_right    ; optimise away the rts
0037DC  2               
0037DC  2                   move_enemy_right_check_x:  ; Check the x offset.
0037DC  2               
0037DC  2  A0 04            ldy #4
0037DE  2  B1 74            lda ($74),y                 ; x
0037E0  2  C9 09            cmp #9
0037E2  2  F0 52            beq move_enemy_right_exit
0037E4  2               
0037E4  2  18               clc
0037E5  2  69 01            adc #1                      ; x + 1
0037E7  2  85 81            sta $81                     ; temporary (x + 1)
0037E9  2  A0 02            ldy #2
0037EB  2  B1 74            lda ($74),y                 ; load the y offset
0037ED  2  AA               tax                         ; as an index
0037EE  2  BD 34 33         lda room_row_offsets_low,x  ; read the address of the row
0037F1  2  85 70            sta $70
0037F3  2  BD 3E 33         lda room_row_offsets_high,x
0037F6  2  85 71            sta $71
0037F8  2  A4 81            ldy $81                     ; temporary (x + 1)
0037FA  2  B1 70            lda ($70),y                 ; load the tile to the right
0037FC  2               
0037FC  2  C9 00            cmp #0
0037FE  2  D0 36            bne move_enemy_right_exit
003800  2               
003800  2  A0 03            ldy #3
003802  2  B1 74            lda ($74),y                 ; dy
003804  2  C9 02            cmp #2
003806  2  30 0F            bmi move_enemy_allow_right
003808  2               
003808  2  18               clc                         ; dy > 1 so we need to check another tile
003809  2  A5 70            lda $70
00380B  2  69 0A            adc #10
00380D  2  85 70            sta $70
00380F  2  A4 81            ldy $81                     ; temporary (x + 1)
003811  2  B1 70            lda ($70),y                 ; load the tile below and to the right
003813  2               
003813  2  C9 00            cmp #0
003815  2  D0 1F            bne move_enemy_right_exit
003817  2               
003817  2                   move_enemy_allow_right:
003817  2  18               clc
003818  2               
003818  2  A0 05            ldy #5
00381A  2  B1 74            lda ($74),y                 ; dx
00381C  2  69 01            adc #1
00381E  2  91 74            sta ($74),y                 ; update dx
003820  2  18               clc
003821  2  4C BD 37         jmp animate_enemy_right    ; optimise away the rts
003824  2               
003824  2                   move_enemy_right_tile:
003824  2  18               clc
003825  2               
003825  2  A0 04            ldy #4
003827  2  B1 74            lda ($74),y             ; x
003829  2  69 01            adc #1
00382B  2  91 74            sta ($74),y             ; store the new room x offset
00382D  2  A9 00            lda #0
00382F  2  C8               iny
003830  2  91 74            sta ($74),y             ; dx = 0
003832  2  18               clc
003833  2  4C BD 37         jmp animate_enemy_right ; optimise away the rts
003836  2               
003836  2                   move_enemy_right_exit:
003836  2  38               sec
003837  2  60               rts
003838  2               
003838  2               animate_enemy_up:   ; $74,$75=character address
003838  2               
003838  2                   ; Set the direction and toggle the animation bit.
003838  2               
003838  2  A0 01            ldy #1
00383A  2  B1 74            lda ($74),y
00383C  2  29 F7            and #$f7    ; keep horizontal direction bit and animation bits
00383E  2  91 74            sta ($74),y
003840  2               
003840  2  60               rts
003841  2               
003841  2               move_enemy_up:      ; $74,$75=character address
003841  2               
003841  2  A0 03            ldy #3
003843  2  B1 74            lda ($74),y                 ; read dy
003845  2  C9 00            cmp #0
003847  2  F0 0B            beq move_enemy_up_check_y
003849  2               
003849  2  38               sec
00384A  2  E9 01            sbc #1
00384C  2  A0 03            ldy #3
00384E  2  91 74            sta ($74),y                 ; dy
003850  2  18               clc
003851  2  4C 38 38         jmp animate_enemy_up        ; optimise away the rts
003854  2               
003854  2                   move_enemy_up_check_y:
003854  2               
003854  2                   ; Check the y offset.
003854  2               
003854  2  A0 02            ldy #2
003856  2  B1 74            lda ($74),y                 ; y
003858  2  C9 00            cmp #0
00385A  2  F0 39            beq move_enemy_up_exit
00385C  2               
00385C  2  AA               tax                         ; use the y offset as an index
00385D  2  CA               dex                         ; y - 1
00385E  2  A0 04            ldy #4
003860  2  B1 74            lda ($74),y                 ; load the x offset
003862  2  85 81            sta $81                     ; temporary (x)
003864  2  A8               tay
003865  2  BD 34 33         lda room_row_offsets_low,x  ; read the address of the row
003868  2  85 70            sta $70
00386A  2  BD 3E 33         lda room_row_offsets_high,x
00386D  2  85 71            sta $71
00386F  2  B1 70            lda ($70),y                 ; load the tile above
003871  2               
003871  2  C9 00            cmp #0
003873  2  D0 20            bne move_enemy_up_exit
003875  2               
003875  2  A0 05            ldy #5
003877  2  B1 74            lda ($74),y                 ; dx
003879  2  C9 00            cmp #0
00387B  2  F0 0A            beq move_enemy_allow_up
00387D  2               
00387D  2  18               clc                     ; dx != 0 so we need to check another tile
00387E  2  A4 81            ldy $81
003880  2  C8               iny
003881  2  B1 70            lda ($70),y             ; load the tile above and to the right
003883  2               
003883  2  C9 00            cmp #0
003885  2  D0 0E            bne move_enemy_up_exit
003887  2               
003887  2                   move_enemy_allow_up:
003887  2  8A               txa
003888  2  A0 02            ldy #2
00388A  2  91 74            sta ($74),y             ; store the new room y offset
00388C  2  A9 03            lda #3
00388E  2  C8               iny
00388F  2  91 74            sta ($74),y             ; dy = 3
003891  2  18               clc
003892  2  4C 38 38         jmp animate_enemy_up   ; optimise away the rts
003895  2               
003895  2                   move_enemy_up_exit:
003895  2  38               sec
003896  2  60               rts
003897  2               
003897  2               animate_enemy_down: ; $74,$75=character address
003897  2               
003897  2                   ; Set the direction and toggle the animation bit.
003897  2               
003897  2  A0 01            ldy #1
003899  2  B1 74            lda ($74),y
00389B  2  09 08            ora #$08    ; down
00389D  2  91 74            sta ($74),y
00389F  2               
00389F  2  60               rts
0038A0  2               
0038A0  2               move_enemy_down:    ; $74,$75=character address
0038A0  2               
0038A0  2  A0 03            ldy #3
0038A2  2  B1 74            lda ($74),y         ; dy
0038A4  2  C9 01            cmp #1
0038A6  2  F0 0E            beq move_enemy_down_check_y
0038A8  2  C9 03            cmp #3
0038AA  2  F0 4C            beq move_enemy_down_tile
0038AC  2               
0038AC  2  69 01            adc #1
0038AE  2  A0 03            ldy #3
0038B0  2  91 74            sta ($74),y         ; dy
0038B2  2  18               clc
0038B3  2  4C 97 38         jmp animate_enemy_down      ; optimise away the rts
0038B6  2               
0038B6  2                   move_enemy_down_check_y:
0038B6  2               
0038B6  2                   ; Check the y offset.
0038B6  2               
0038B6  2  A0 02            ldy #2
0038B8  2  B1 74            lda ($74),y
0038BA  2  C9 09            cmp #9
0038BC  2  F0 4C            beq move_enemy_down_exit
0038BE  2               
0038BE  2  18               clc
0038BF  2  69 01            adc #1                      ; y + 1
0038C1  2  AA               tax
0038C2  2  A0 04            ldy #4
0038C4  2  B1 74            lda ($74),y                 ; load the x offset
0038C6  2  85 81            sta $81                     ; temporary
0038C8  2  A8               tay
0038C9  2  BD 34 33         lda room_row_offsets_low,x  ; read the address of the row
0038CC  2  85 70            sta $70
0038CE  2  BD 3E 33         lda room_row_offsets_high,x
0038D1  2  85 71            sta $71
0038D3  2  B1 70            lda ($70),y                 ; load the tile below
0038D5  2               
0038D5  2  C9 00            cmp #0
0038D7  2  D0 31            bne move_enemy_down_exit
0038D9  2               
0038D9  2  A0 05            ldy #5
0038DB  2  B1 74            lda ($74),y                 ; dx
0038DD  2  C9 00            cmp #0
0038DF  2  F0 0A            beq move_enemy_allow_down
0038E1  2               
0038E1  2  18               clc                         ; dx != 0 so we need to check another tile
0038E2  2  A4 81            ldy $81                     ; x
0038E4  2  C8               iny
0038E5  2  B1 70            lda ($70),y                 ; load the tile below and to the right
0038E7  2               
0038E7  2  C9 00            cmp #0
0038E9  2  D0 1F            bne move_enemy_down_exit
0038EB  2               
0038EB  2                   move_enemy_allow_down:
0038EB  2  18               clc
0038EC  2               
0038EC  2  A0 03            ldy #3
0038EE  2  B1 74            lda ($74),y                 ; dy
0038F0  2  69 01            adc #1
0038F2  2  91 74            sta ($74),y                 ; update dy
0038F4  2  18               clc
0038F5  2  4C 97 38         jmp animate_enemy_down      ; optimise away the rts
0038F8  2               
0038F8  2                   move_enemy_down_tile:
0038F8  2  18               clc
0038F9  2               
0038F9  2  A0 02            ldy #2
0038FB  2  B1 74            lda ($74),y                 ; y
0038FD  2  69 01            adc #1
0038FF  2  91 74            sta ($74),y                 ; store the new room y offset
003901  2  A9 00            lda #0
003903  2  C8               iny
003904  2  91 74            sta ($74),y                 ; dy = 0
003906  2  18               clc
003907  2  4C 97 38         jmp animate_enemy_down      ; optimise away the rts
00390A  2               
00390A  2                   move_enemy_down_exit:
00390A  2  38               sec
00390B  2  60               rts
00390C  2               
00390C  2               move_enemy_animate:     ; $74,$75=character address
00390C  2               
00390C  2  A0 01            ldy #1
00390E  2  B1 74            lda ($74),y         ; direction/animation
003910  2  85 81            sta $81
003912  2  29 03            and #$03
003914  2  69 01            adc #1
003916  2  29 03            and #$03            ; keep animation bits
003918  2  85 8F            sta $8f
00391A  2  A5 81            lda $81
00391C  2  29 FC            and #$fc            ; mask off the animation bits
00391E  2  05 8F            ora $8f
003920  2  91 74            sta ($74),y
003922  2  60               rts
003923  2               
003923  2  04 0C 00 08  move_enemy_next_direction: .byte $04, $0c, $00, $08
003927  2               
003927  2               move_enemy:             ; $74,$75=character address
003927  2               
003927  2  A9 00            lda #0
003929  2  85 8D            sta $8d             ; vertical motion value (0=no motion; 1=up; 2=down)
00392B  2  A9 00            lda #0
00392D  2  85 8E            sta $8e             ; horizontal motion value (0=no motion; 1=left; 2=right)
00392F  2               
00392F  2  B1 74            lda ($74),y         ; read the enemy number (Y should be zero)
003931  2  29 10            and #$10
003933  2  F0 41            beq move_enemy_homing
003935  2  18               clc
003936  2               
003936  2                   ; This enemy is a non-homing enemy.
003936  2               
003936  2  20 53 31         jsr unplot_character    ; unplot now before we change the sprite used
003939  2               
003939  2  A0 01            ldy #1
00393B  2  B1 74            lda ($74),y
00393D  2  29 F0            and #$f0
00393F  2  C9 F0            cmp #$f0
003941  2  D0 0F            bne move_enemy_set_direction
003943  2  18               clc
003944  2               
003944  2  A0 01            ldy #1
003946  2  B1 74            lda ($74),y
003948  2  29 0C            and #$0c
00394A  2  6A               ror
00394B  2  6A               ror
00394C  2  AA               tax
00394D  2  BD 23 39         lda move_enemy_next_direction,x
003950  2  91 74            sta ($74),y
003952  2               
003952  2                   move_enemy_set_direction:
003952  2  18               clc
003953  2               
003953  2  A0 01            ldy #1
003955  2  B1 74            lda ($74),y
003957  2  85 7B            sta $7b
003959  2               
003959  2  69 10            adc #$10
00395B  2  91 74            sta ($74),y
00395D  2  18               clc
00395E  2               
00395E  2  A5 7B            lda $7b
003960  2  29 04            and #$04
003962  2  6A               ror
003963  2  6A               ror
003964  2  69 01            adc #1
003966  2  85 8E            sta $8e
003968  2               
003968  2  A5 7B            lda $7b
00396A  2  29 08            and #$08
00396C  2  6A               ror
00396D  2  6A               ror
00396E  2  6A               ror
00396F  2  69 01            adc #1
003971  2  85 8D            sta $8d
003973  2               
003973  2  4C BB 39         jmp move_enemy_with_direction
003976  2               
003976  2                   move_enemy_homing:
003976  2               
003976  2  A0 02            ldy #2
003978  2  B1 74            lda ($74),y         ; y
00397A  2  CD D7 4F         cmp L5280+$2           ; player y
00397D  2  30 0D            bmi move_enemy_downwards
00397F  2  D0 12            bne move_enemy_upwards
003981  2               
003981  2  A0 03            ldy #3
003983  2  B1 74            lda ($74),y         ; dy
003985  2  CD D8 4F         cmp L5280+$3           ; player y
003988  2  F0 0D            beq move_enemy_horizontally
00398A  2  10 07            bpl move_enemy_upwards
00398C  2               
00398C  2                   move_enemy_downwards:
00398C  2  A9 02            lda #2
00398E  2  85 8D            sta $8d
003990  2  4C 97 39         jmp move_enemy_horizontally
003993  2               
003993  2                   move_enemy_upwards:
003993  2  A9 01            lda #1
003995  2  85 8D            sta $8d
003997  2                   ;jmp move_enemy_horizontally
003997  2               
003997  2                   move_enemy_horizontally:
003997  2  A0 04            ldy #4
003999  2  B1 74            lda ($74),y         ; x
00399B  2  CD D9 4F         cmp L5280+$4           ; player x
00399E  2  30 0C            bmi move_enemy_rightwards
0039A0  2  D0 11            bne move_enemy_leftwards
0039A2  2               
0039A2  2  A0 05            ldy #5
0039A4  2  B1 74            lda ($74),y         ; dx
0039A6  2  C9 00            cmp #0
0039A8  2  F0 0D            beq move_enemy_with_direction_unplot
0039AA  2  10 07            bpl move_enemy_leftwards
0039AC  2               
0039AC  2                   move_enemy_rightwards:
0039AC  2  A9 02            lda #2
0039AE  2  85 8E            sta $8e
0039B0  2  4C B7 39         jmp move_enemy_with_direction_unplot
0039B3  2               
0039B3  2                   move_enemy_leftwards:
0039B3  2  A9 01            lda #1
0039B5  2  85 8E            sta $8e
0039B7  2               
0039B7  2                   move_enemy_with_direction_unplot:
0039B7  2  18               clc
0039B8  2               
0039B8  2  20 53 31         jsr unplot_character
0039BB  2               
0039BB  2                   move_enemy_with_direction:
0039BB  2  18               clc
0039BC  2               
0039BC  2  A5 8E            lda $8e
0039BE  2  C9 01            cmp #1
0039C0  2  D0 07            bne move_enemy_not_left
0039C2  2  20 5D 37         jsr move_enemy_left
0039C5  2  18               clc
0039C6  2  4C D3 39         jmp move_enemy_not_right
0039C9  2               
0039C9  2                   move_enemy_not_left:
0039C9  2  A5 8E            lda $8e
0039CB  2  C9 02            cmp #2
0039CD  2  D0 04            bne move_enemy_not_right
0039CF  2  20 C6 37         jsr move_enemy_right
0039D2  2  18               clc
0039D3  2               
0039D3  2                   move_enemy_not_right:
0039D3  2  A5 8D            lda $8d
0039D5  2  C9 01            cmp #1
0039D7  2  D0 07            bne move_enemy_not_up
0039D9  2  20 41 38         jsr move_enemy_up
0039DC  2  18               clc
0039DD  2  4C E9 39         jmp move_enemy_toggle
0039E0  2               
0039E0  2                   move_enemy_not_up:
0039E0  2  A5 8D            lda $8d
0039E2  2  C9 02            cmp #2
0039E4  2  D0 03            bne move_enemy_toggle
0039E6  2  20 A0 38         jsr move_enemy_down
0039E9  2               
0039E9  2                   move_enemy_toggle:
0039E9  2  18               clc
0039EA  2  20 0C 39         jsr move_enemy_animate
0039ED  2  4C 63 31         jmp plot_character      ; optimise away the rts
0039F0  2               
0039F0  2                   move_enemy_exit:
0039F0  2  18               clc
0039F1  2  60               rts
0039F2  2               
0039F2  2               create_explosion:           ; X=y, Y=x
0039F2  2               
0039F2  2  A9 03            lda #3
0039F4  2  8D F9 4F         sta L5280+$24
0039F7  2  A9 04            lda #4
0039F9  2  8D FA 4F         sta L5280+$25
0039FC  2  8A               txa
0039FD  2  8D FB 4F         sta L5280+$26
003A00  2  A9 01            lda #1
003A02  2  8D FC 4F         sta L5280+$27
003A05  2  98               tya
003A06  2  8D FD 4F         sta L5280+$28
003A09  2  A9 00            lda #0
003A0B  2  8D FE 4F         sta L5280+$29
003A0E  2  60               rts
003A0F  2               
003A0F  2               move_projectile_left:
003A0F  2               
003A0F  2  AD E0 4F         lda L5280+$b
003A12  2  C9 00            cmp #0
003A14  2  F0 05            beq move_projectile_left_check_x
003A16  2               
003A16  2  CE E0 4F         dec L5280+$b
003A19  2  18               clc
003A1A  2  60               rts
003A1B  2               
003A1B  2                   move_projectile_left_check_x:
003A1B  2               
003A1B  2  AD DF 4F         lda L5280+$a
003A1E  2  C9 00            cmp #0
003A20  2  D0 03            bne move_projectile_left_in_room
003A22  2  4C A5 3A         jmp move_projectile_left_exit
003A25  2               
003A25  2                   move_projectile_left_in_room:
003A25  2  A8               tay
003A26  2  88               dey                         ; x - 1
003A27  2  AE DD 4F         ldx L5280+$8                   ; y
003A2A  2  BD 34 33         lda room_row_offsets_low,x  ; read the address of the row
003A2D  2  85 70            sta $70
003A2F  2  BD 3E 33         lda room_row_offsets_high,x
003A32  2  85 71            sta $71
003A34  2  B1 70            lda ($70),y                 ; load the tile to the left
003A36  2               
003A36  2  C9 00            cmp #0
003A38  2  D0 1F            bne move_projectile_left_wall
003A3A  2               
003A3A  2  AD DE 4F         lda L5280+$9                   ; dy
003A3D  2  C9 03            cmp #3
003A3F  2  30 0E            bmi move_projectile_allow_left
003A41  2               
003A41  2  18               clc                         ; dy > 2 so we need to check another tile
003A42  2  A5 70            lda $70
003A44  2  69 0A            adc #10
003A46  2  85 70            sta $70
003A48  2  B1 70            lda ($70),y                 ; load the tile below and to the left
003A4A  2  E8               inx                         ; y += 1
003A4B  2               
003A4B  2  C9 00            cmp #0
003A4D  2  D0 0A            bne move_projectile_left_wall
003A4F  2               
003A4F  2                   move_projectile_allow_left:
003A4F  2               
003A4F  2  8C DF 4F         sty L5280+$a       ; x
003A52  2  A9 02            lda #2			;lda #3
003A54  2  8D E0 4F         sta L5280+$b       ; dx = 3
003A57  2               
003A57  2  18               clc
003A58  2  60               rts
003A59  2               
003A59  2                   move_projectile_left_wall:  ; the projectile hit a wall
003A59  2  18               clc
003A5A  2               
003A5A  2  AD DC 4F         lda L5280+$7                   ; type 2 can pass through walls
003A5D  2  29 06            and #$06
003A5F  2  C9 04            cmp #4
003A61  2  F0 EC            beq move_projectile_allow_left
003A63  2               
003A63  2  C9 02            cmp #2
003A65  2  D0 14            bne move_projectile_left_not_boomerang
003A67  2               
003A67  2  AD DC 4F         lda L5280+$7
003A6A  2  29 0F            and #$0f
003A6C  2  C9 08            cmp #8
003A6E  2  10 35            bpl move_projectile_left_exit
003A70  2               
003A70  2  AE 54 55         ldx L577f               ; weapon counter
003A73  2  1D A7 3A         ora boomerang_horizontal,x
003A76  2  8D DC 4F         sta L5280+$7
003A79  2  18               clc
003A7A  2  60               rts                     ; exit without moving or registering a collision
003A7B  2               
003A7B  2                   move_projectile_left_not_boomerang:
003A7B  2               
003A7B  2  C9 06            cmp #6                          ; type 3 can destroy certain walls
003A7D  2  D0 26            bne move_projectile_left_exit
003A7F  2               
003A7F  2  B1 70            lda ($70),y                 ; load the tile to the left
003A81  2  C9 01            cmp #1                      ; decoration can be destroyed
003A83  2  D0 20            bne move_projectile_left_exit
003A85  2  18               clc
003A86  2               
003A86  2  A9 00            lda #0
003A88  2  91 70            sta ($70),y
003A8A  2               
003A8A  2                   ; X=y, Y=x
003A8A  2  20 F2 39         jsr create_explosion
003A8D  2  20 62 2F         jsr plot_blank_xy           ; corrupted X
003A90  2               
003A90  2  A9 F9            lda #<(L5280+$24)			; $52a4
003A92  2  85 74            sta $74
003A94  2  A9 4F            lda #>(L5280+$24)
003A96  2  85 75            sta $75
003A98  2  20 63 31         jsr plot_character
003A9B  2               
003A9B  2  A2 00            ldx #0
003A9D  2  20 B8 40         jsr play_sound
003AA0  2               
003AA0  2  A9 10            lda #16                     ; prevent the player from firing a new
003AA2  2  8D 62 55         sta L578d                   ; projectile until the explosion has finished
003AA5  2               
003AA5  2                   move_projectile_left_exit:
003AA5  2  38               sec
003AA6  2  60               rts
003AA7  2               
003AA7  2  28 38        boomerang_horizontal: .byte $28, $38
003AA9  2               
003AA9  2               move_projectile_right:
003AA9  2               
003AA9  2                   ; Fire right.
003AA9  2               
003AA9  2  AD E0 4F         lda L5280+$b
003AAC  2  C9 01            cmp #1			; cmp #2
003AAE  2  F0 09            beq move_projectile_right_check_x
003AB0  2  C9 02            cmp #2			; cmp #3
003AB2  2  F0 3F            beq move_projectile_right_tile
003AB4  2               
003AB4  2  EE E0 4F         inc L5280+$b
003AB7  2  18               clc
003AB8  2  60               rts
003AB9  2               
003AB9  2                   move_projectile_right_check_x:
003AB9  2               
003AB9  2  AD DF 4F         lda L5280+$a       ; x
003ABC  2  C9 09            cmp #9
003ABE  2  D0 03            bne move_projectile_right_not_edge
003AC0  2  4C 49 3B         jmp move_projectile_right_exit
003AC3  2               
003AC3  2                   move_projectile_right_not_edge:
003AC3  2  18               clc
003AC4  2  A8               tay
003AC5  2  C8               iny                         ; x + 1
003AC6  2  AE DD 4F         ldx L5280+$8                   ; y
003AC9  2  BD 34 33         lda room_row_offsets_low,x  ; read the address of the row
003ACC  2  85 70            sta $70
003ACE  2  BD 3E 33         lda room_row_offsets_high,x
003AD1  2  85 71            sta $71
003AD3  2  B1 70            lda ($70),y                 ; load the tile to the right
003AD5  2               
003AD5  2  C9 00            cmp #0
003AD7  2  D0 24            bne move_projectile_right_wall
003AD9  2               
003AD9  2  AD DE 4F         lda L5280+$9                   ; dy
003ADC  2  C9 03            cmp #3
003ADE  2  30 0E            bmi move_projectile_allow_right
003AE0  2               
003AE0  2  18               clc                         ; dy > 2 so we need to check another tile
003AE1  2  A5 70            lda $70
003AE3  2  69 0A            adc #10
003AE5  2  85 70            sta $70
003AE7  2  B1 70            lda ($70),y                 ; load the tile below and to the right
003AE9  2  E8               inx                         ; y += 1
003AEA  2               
003AEA  2  C9 00            cmp #0
003AEC  2  D0 0F            bne move_projectile_right_wall
003AEE  2               
003AEE  2                   move_projectile_allow_right:
003AEE  2               
003AEE  2  EE E0 4F         inc L5280+$b       ; dx
003AF1  2  18               clc
003AF2  2  60               rts
003AF3  2               
003AF3  2                   move_projectile_right_tile:
003AF3  2               
003AF3  2  EE DF 4F         inc L5280+$a       ; x
003AF6  2  A9 00            lda #0
003AF8  2  8D E0 4F         sta L5280+$b       ; dx
003AFB  2  18               clc
003AFC  2  60               rts
003AFD  2               
003AFD  2                   move_projectile_right_wall:  ; the projectile hit a wall
003AFD  2  18               clc
003AFE  2               
003AFE  2  AD DC 4F         lda L5280+$7                   ; type 2 can pass through walls
003B01  2  29 06            and #$06
003B03  2  C9 04            cmp #4
003B05  2  F0 E7            beq move_projectile_allow_right
003B07  2               
003B07  2  C9 02            cmp #2
003B09  2  D0 14            bne move_projectile_right_not_boomerang
003B0B  2               
003B0B  2  AD DC 4F         lda L5280+$7
003B0E  2  29 0F            and #$0f
003B10  2  C9 08            cmp #8
003B12  2  10 35            bpl move_projectile_right_exit
003B14  2               
003B14  2  AE 54 55         ldx L577f               ; weapon counter
003B17  2  1D A7 3A         ora boomerang_horizontal,x
003B1A  2  8D DC 4F         sta L5280+$7
003B1D  2  18               clc
003B1E  2  60               rts                     ; exit without moving or registering a collision
003B1F  2               
003B1F  2                   move_projectile_right_not_boomerang:
003B1F  2               
003B1F  2  C9 06            cmp #6                      ; type 3 can destroy certain walls
003B21  2  D0 26            bne move_projectile_right_exit
003B23  2               
003B23  2  B1 70            lda ($70),y                 ; load the tile to the right
003B25  2  C9 01            cmp #1                      ; decoration can be destroyed
003B27  2  D0 20            bne move_projectile_right_exit
003B29  2  18               clc
003B2A  2               
003B2A  2  A9 00            lda #0
003B2C  2  91 70            sta ($70),y
003B2E  2               
003B2E  2                   ; X=y, Y=x
003B2E  2  20 F2 39         jsr create_explosion
003B31  2  20 62 2F         jsr plot_blank_xy           ; corrupted X
003B34  2               
003B34  2  A9 F9            lda #<(L5280+$24)		; $52a4
003B36  2  85 74            sta $74
003B38  2  A9 4F            lda #>(L5280+$24)
003B3A  2  85 75            sta $75
003B3C  2  20 63 31         jsr plot_character
003B3F  2               
003B3F  2  A2 00            ldx #0
003B41  2  20 B8 40         jsr play_sound
003B44  2               
003B44  2  A9 10            lda #16                     ; prevent the player from firing a new
003B46  2  8D 62 55         sta L578d                   ; projectile until the explosion has finished
003B49  2               
003B49  2                   move_projectile_right_exit:
003B49  2  38               sec
003B4A  2  60               rts
003B4B  2               
003B4B  2               move_projectile_up:
003B4B  2               
003B4B  2  AD DE 4F         lda L5280+$9           ; read dy
003B4E  2  C9 00            cmp #0
003B50  2  F0 05            beq move_projectile_up_check_y
003B52  2               
003B52  2  CE DE 4F         dec L5280+$9
003B55  2  18               clc
003B56  2  60               rts
003B57  2               
003B57  2                   move_projectile_up_check_y:     ; Check the y offset.
003B57  2               
003B57  2  AD DD 4F         lda L5280+$8
003B5A  2  C9 00            cmp #0
003B5C  2  D0 03            bne move_projectile_up_not_edge
003B5E  2  4C DC 3B         jmp move_projectile_up_exit
003B61  2               
003B61  2                   move_projectile_up_not_edge:
003B61  2  AA               tax                         ; use the y offset as an index
003B62  2  CA               dex                         ; y - 1
003B63  2  AC DF 4F         ldy L5280+$a                   ; load the x offset
003B66  2  BD 34 33         lda room_row_offsets_low,x  ; read the address of the row
003B69  2  85 70            sta $70
003B6B  2  BD 3E 33         lda room_row_offsets_high,x
003B6E  2  85 71            sta $71
003B70  2  B1 70            lda ($70),y                 ; load the tile above
003B72  2               
003B72  2  C9 00            cmp #0
003B74  2  D0 1A            bne move_projectile_up_wall
003B76  2               
003B76  2  AD E0 4F         lda L5280+$b                   ; dx
003B79  2  C9 02            cmp #2			; cmp# 3
003B7B  2  30 08            bmi move_projectile_allow_up
003B7D  2               
003B7D  2  18               clc                     ; dx > 2 so we need to check another tile
003B7E  2  C8               iny
003B7F  2  B1 70            lda ($70),y             ; load the tile above and to the right
003B81  2               
003B81  2  C9 00            cmp #0
003B83  2  D0 0B            bne move_projectile_up_wall
003B85  2               
003B85  2                   move_projectile_allow_up:
003B85  2  8A               txa
003B86  2  8D DD 4F         sta L5280+$8               ; store the new room y offset
003B89  2  A9 03            lda #3
003B8B  2  8D DE 4F         sta L5280+$9               ; dy = 3
003B8E  2               
003B8E  2  18               clc
003B8F  2  60               rts
003B90  2               
003B90  2                   move_projectile_up_wall:    ; the projectile hit a wall
003B90  2  18               clc
003B91  2               
003B91  2  AD DC 4F         lda L5280+$7                   ; type 2 can pass through walls
003B94  2  29 06            and #$06
003B96  2  C9 04            cmp #4
003B98  2  F0 EB            beq move_projectile_allow_up
003B9A  2               
003B9A  2  C9 02            cmp #2
003B9C  2  D0 14            bne move_projectile_up_not_boomerang
003B9E  2               
003B9E  2  AD DC 4F         lda L5280+$7
003BA1  2  29 0F            and #$0f
003BA3  2  C9 08            cmp #8
003BA5  2  10 35            bpl move_projectile_up_exit
003BA7  2               
003BA7  2  AE 54 55         ldx L577f               ; weapon counter
003BAA  2  1D DE 3B         ora boomerang_vertical,x
003BAD  2  8D DC 4F         sta L5280+$7
003BB0  2  18               clc
003BB1  2  60               rts                     ; exit without moving or registering a collision
003BB2  2               
003BB2  2                   move_projectile_up_not_boomerang:
003BB2  2               
003BB2  2  C9 06            cmp #6                      ; type 3 can destroy certain walls
003BB4  2  D0 26            bne move_projectile_up_exit
003BB6  2               
003BB6  2  B1 70            lda ($70),y                 ; load the tile above
003BB8  2  C9 01            cmp #1                      ; decoration can be destroyed
003BBA  2  D0 20            bne move_projectile_up_exit
003BBC  2  18               clc
003BBD  2               
003BBD  2  A9 00            lda #0
003BBF  2  91 70            sta ($70),y
003BC1  2               
003BC1  2                   ; X=y, Y=x
003BC1  2  20 F2 39         jsr create_explosion
003BC4  2  20 62 2F         jsr plot_blank_xy           ; corrupted X
003BC7  2               
003BC7  2  A9 F9            lda #<(L5280+$24)		; $52a4
003BC9  2  85 74            sta $74
003BCB  2  A9 4F            lda #>(L5280+$24)
003BCD  2  85 75            sta $75
003BCF  2  20 63 31         jsr plot_character
003BD2  2               
003BD2  2  A2 00            ldx #0
003BD4  2  20 B8 40         jsr play_sound
003BD7  2               
003BD7  2  A9 10            lda #16                     ; prevent the player from firing a new
003BD9  2  8D 62 55         sta L578d                   ; projectile until the explosion has finished
003BDC  2               
003BDC  2                   move_projectile_up_exit:
003BDC  2  38               sec
003BDD  2  60               rts
003BDE  2               
003BDE  2  08 18        boomerang_vertical: .byte $08, $18
003BE0  2               
003BE0  2               move_projectile_down:
003BE0  2               
003BE0  2  AD DE 4F         lda L5280+$9                   ; read dy
003BE3  2  C9 02            cmp #2
003BE5  2  F0 09            beq move_projectile_down_check_y
003BE7  2  C9 03            cmp #3
003BE9  2  F0 39            beq move_projectile_down_tile
003BEB  2               
003BEB  2  EE DE 4F         inc L5280+$9                   ; 0 <= dy < 3
003BEE  2  18               clc
003BEF  2  60               rts
003BF0  2               
003BF0  2                   move_projectile_down_check_y:  ; Check the y offset.
003BF0  2               
003BF0  2  AD DD 4F         lda L5280+$8
003BF3  2  C9 09            cmp #9
003BF5  2  D0 03            bne move_projectile_down_in_room
003BF7  2  4C 7A 3C         jmp move_projectile_down_exit
003BFA  2               
003BFA  2                   move_projectile_down_in_room:
003BFA  2  18               clc
003BFB  2  AA               tax
003BFC  2  E8               inx                         ; y + 1
003BFD  2  AC DF 4F         ldy L5280+$a                   ; load the x offset
003C00  2  BD 34 33         lda room_row_offsets_low,x  ; read the address of the row
003C03  2  85 70            sta $70
003C05  2  BD 3E 33         lda room_row_offsets_high,x
003C08  2  85 71            sta $71
003C0A  2  B1 70            lda ($70),y                 ; load the tile below
003C0C  2               
003C0C  2  C9 00            cmp #0
003C0E  2  D0 1E            bne move_projectile_down_wall
003C10  2               
003C10  2  AD E0 4F         lda L5280+$b                   ; dx
003C13  2  C9 02            cmp #2				; cmp #3
003C15  2  30 08            bmi move_projectile_allow_down
003C17  2               
003C17  2  18               clc                         ; dx > 2 so we need to check another tile
003C18  2  C8               iny
003C19  2  B1 70            lda ($70),y                 ; load the tile below and to the right
003C1B  2               
003C1B  2  C9 00            cmp #0
003C1D  2  D0 0F            bne move_projectile_down_wall
003C1F  2               
003C1F  2                   move_projectile_allow_down:
003C1F  2               
003C1F  2  EE DE 4F         inc L5280+$9                   ; update dy
003C22  2  18               clc
003C23  2  60               rts
003C24  2               
003C24  2                   move_projectile_down_tile:
003C24  2               
003C24  2  EE DD 4F         inc L5280+$8                   ; store the new room y offset
003C27  2  A9 00            lda #0
003C29  2  8D DE 4F         sta L5280+$9                   ; dy = 0
003C2C  2  18               clc
003C2D  2  60               rts
003C2E  2               
003C2E  2                   move_projectile_down_wall:  ; the projectile hit a wall
003C2E  2  18               clc
003C2F  2               
003C2F  2  AD DC 4F         lda L5280+$7                   ; type 2 can pass through walls
003C32  2  29 06            and #$06
003C34  2  C9 04            cmp #4
003C36  2  F0 E7            beq move_projectile_allow_down
003C38  2               
003C38  2  C9 02            cmp #2
003C3A  2  D0 14            bne move_projectile_down_not_boomerang
003C3C  2               
003C3C  2  AD DC 4F         lda L5280+$7
003C3F  2  29 0F            and #$0f
003C41  2  C9 08            cmp #8
003C43  2  10 35            bpl move_projectile_down_exit
003C45  2               
003C45  2  AE 54 55         ldx L577f               ; weapon counter
003C48  2  1D DE 3B         ora boomerang_vertical,x
003C4B  2  8D DC 4F         sta L5280+$7
003C4E  2  18               clc
003C4F  2  60               rts                     ; exit without moving or registering a collision
003C50  2               
003C50  2                   move_projectile_down_not_boomerang:
003C50  2               
003C50  2  C9 06            cmp #6                      ; type 3 can destroy certain walls
003C52  2  D0 26            bne move_projectile_down_exit
003C54  2               
003C54  2  B1 70            lda ($70),y                 ; load the tile below
003C56  2  C9 01            cmp #1                      ; decoration can be destroyed
003C58  2  D0 20            bne move_projectile_down_exit
003C5A  2  18               clc
003C5B  2               
003C5B  2  A9 00            lda #0
003C5D  2  91 70            sta ($70),y
003C5F  2               
003C5F  2                   ; X=y, Y=x
003C5F  2  20 F2 39         jsr create_explosion
003C62  2  20 62 2F         jsr plot_blank_xy           ; corrupted X
003C65  2               
003C65  2  A9 F9            lda #<(L5280+$24)		; $52a4
003C67  2  85 74            sta $74
003C69  2  A9 4F            lda #>(L5280+$24)
003C6B  2  85 75            sta $75
003C6D  2  20 63 31         jsr plot_character
003C70  2               
003C70  2  A2 00            ldx #0
003C72  2  20 B8 40         jsr play_sound
003C75  2               
003C75  2  A9 10            lda #16                     ; prevent the player from firing a new
003C77  2  8D 62 55         sta L578d                   ; projectile until the explosion has finished
003C7A  2               
003C7A  2                   move_projectile_down_exit:
003C7A  2  38               sec
003C7B  2  60               rts
003C7C  2               
003C7C  2               move_projectile_animate:
003C7C  2               
003C7C  2  AD DC 4F         lda L5280+$7
003C7F  2  49 01            eor #1
003C81  2  8D DC 4F         sta L5280+$7
003C84  2  60               rts
003C85  2               
003C85  2               move_projectile:
003C85  2               
003C85  2  AD DB 4F         lda L5280+$6
003C88  2  C9 00            cmp #0
003C8A  2  D0 03            bne move_projectile_move
003C8C  2  4C 4F 3D         jmp move_projectile_exit
003C8F  2               
003C8F  2                   move_projectile_move:
003C8F  2  18               clc
003C90  2               
003C90  2  A9 DB            lda #<(L5280+$6)		; $5286
003C92  2  85 74            sta $74
003C94  2  A9 4F            lda #>(L5280+$6)
003C96  2  85 75            sta $75
003C98  2  20 53 31         jsr unplot_character
003C9B  2               
003C9B  2                   move_projectile_after_unplot:
003C9B  2               
003C9B  2  AD DC 4F         lda L5280+$7
003C9E  2  29 30            and #$30            ; direction
003CA0  2               
003CA0  2  C9 00            cmp #0
003CA2  2  D0 07            bne move_projectile_not_left
003CA4  2               
003CA4  2  20 0F 3A         jsr move_projectile_left
003CA7  2  90 21            bcc move_projectile_toggle
003CA9  2  B0 32            bcs move_projectile_destroy
003CAB  2               
003CAB  2                   move_projectile_not_left:
003CAB  2  C9 10            cmp #$10
003CAD  2  D0 07            bne move_projectile_not_right
003CAF  2               
003CAF  2  20 A9 3A         jsr move_projectile_right
003CB2  2  90 16            bcc move_projectile_toggle
003CB4  2  B0 27            bcs move_projectile_destroy
003CB6  2               
003CB6  2                   move_projectile_not_right:
003CB6  2  C9 20            cmp #$20
003CB8  2  D0 07            bne move_projectile_not_up
003CBA  2               
003CBA  2  20 4B 3B         jsr move_projectile_up
003CBD  2  90 0B            bcc move_projectile_toggle
003CBF  2  B0 1C            bcs move_projectile_destroy
003CC1  2               
003CC1  2                   move_projectile_not_up:
003CC1  2  C9 30            cmp #$30
003CC3  2  D0 05            bne move_projectile_toggle
003CC5  2               
003CC5  2  20 E0 3B         jsr move_projectile_down
003CC8  2  B0 13            bcs move_projectile_destroy
003CCA  2               
003CCA  2                   move_projectile_toggle:
003CCA  2               
003CCA  2  20 DE 3F         jsr projectile_collide
003CCD  2  B0 0E            bcs move_projectile_destroy
003CCF  2               
003CCF  2  20 7C 3C         jsr move_projectile_animate
003CD2  2               
003CD2  2  A9 DB            lda #<(L5280+$6)		; $5286
003CD4  2  85 74            sta $74
003CD6  2  A9 4F            lda #>(L5280+$6)
003CD8  2  85 75            sta $75
003CDA  2  4C 63 31         jmp plot_character          ; optimise away the rts
003CDD  2               
003CDD  2                   move_projectile_destroy:
003CDD  2  18               clc
003CDE  2               
003CDE  2  A0 00            ldy #0
003CE0  2  B1 74            lda ($74),y ; type
003CE2  2  C9 08            cmp #8
003CE4  2  30 0F            bmi move_projectile_no_enemy_collision
003CE6  2               
003CE6  2  29 70            and #$70            ; increase the player's score
003CE8  2  4A               lsr
003CE9  2  4A               lsr
003CEA  2  4A               lsr
003CEB  2  69 02            adc #2
003CED  2  85 70            sta $70
003CEF  2  20 75 3E         jsr add_score
003CF2  2  4C 05 3D         jmp move_projectile_create_explosion
003CF5  2               
003CF5  2                   move_projectile_no_enemy_collision:
003CF5  2               
003CF5  2  C9 04            cmp #4          ; items can be destroyed as well
003CF7  2  D0 23            bne move_projectile_no_item_collision
003CF9  2               
003CF9  2  A0 01            ldy #1          ; but not keys
003CFB  2  B1 74            lda ($74),y
003CFD  2  C9 04            cmp #4          ; even the mace is stopped by a key
003CFF  2  F0 49            beq move_projectile_remove_projectile
003D01  2  18               clc
003D02  2               
003D02  2  20 3A 3E         jsr remove_room_item
003D05  2               
003D05  2                   move_projectile_create_explosion:
003D05  2               
003D05  2                   ; Unplot the item/enemy and replace it with an explosion.
003D05  2               
003D05  2  20 53 31         jsr unplot_character
003D08  2               
003D08  2  A9 03            lda #3      ; explosion
003D0A  2  A0 00            ldy #0
003D0C  2  91 74            sta ($74),y
003D0E  2               
003D0E  2  A9 04            lda #4
003D10  2  A0 01            ldy #1
003D12  2  91 74            sta ($74),y
003D14  2               
003D14  2  20 63 31         jsr plot_character
003D17  2               
003D17  2                   ; Play a sound.
003D17  2  A2 00            ldx #0
003D19  2  20 B8 40         jsr play_sound
003D1C  2               
003D1C  2                   move_projectile_no_item_collision:
003D1C  2               
003D1C  2  AD DC 4F         lda L5280+$7       ; type 2 projectiles pass through everything
003D1F  2  29 06            and #$06
003D21  2  C9 04            cmp #4
003D23  2  D0 25            bne move_projectile_remove_projectile
003D25  2               
003D25  2                   ; Ideally, we would have recorded if the projectile left the screen so
003D25  2                   ; that we don't perform these checks again here, but it would just add
003D25  2                   ; overhead to the normal movement routines for the other weapons.
003D25  2               
003D25  2  AD DD 4F         lda L5280+$8       ; y
003D28  2  C9 00            cmp #0
003D2A  2  F0 1E            beq move_projectile_remove_projectile
003D2C  2  C9 09            cmp #9
003D2E  2  F0 1A            beq move_projectile_remove_projectile
003D30  2               
003D30  2  AD DF 4F         lda L5280+$a       ; x
003D33  2  C9 00            cmp #0
003D35  2  F0 13            beq move_projectile_remove_projectile
003D37  2  C9 09            cmp #9
003D39  2  F0 0F            beq move_projectile_remove_projectile
003D3B  2               
003D3B  2  18               clc
003D3C  2  A9 DB            lda #<(L5280+$6)			; $5286
003D3E  2  85 74            sta $74
003D40  2  A9 4F            lda #>(L5280+$6)
003D42  2  85 75            sta $75
003D44  2               
003D44  2  20 63 31         jsr plot_character
003D47  2  4C 4F 3D         jmp move_projectile_exit
003D4A  2               
003D4A  2                   move_projectile_remove_projectile:
003D4A  2               
003D4A  2  A9 00            lda #0              ; remove the projectile from the character list
003D4C  2  8D DB 4F         sta L5280+$6
003D4F  2               
003D4F  2                   move_projectile_exit:
003D4F  2  18               clc
003D50  2  60               rts
003D51  2               
003D51  2               emerge_characters:
003D51  2               
003D51  2  A9 E1            lda #<(L5280+$c)		; $528c set the character address
003D53  2  85 74            sta $74
003D55  2  A9 4F            lda #>(L5280+$c)
003D57  2  85 75            sta $75
003D59  2               
003D59  2                   emerge_characters_loop:
003D59  2               
003D59  2  A0 00                ldy #0
003D5B  2  B1 74                lda ($74),y
003D5D  2  C9 00                cmp #0
003D5F  2  D0 03                bne emerge_characters_next
003D61  2               
003D61  2  4C D1 36             jmp emerge_character    ; optimise away the rts
003D64  2               
003D64  2                       emerge_characters_next:
003D64  2  18                   clc
003D65  2               
003D65  2                       ; Examine the next character.
003D65  2  A5 74                lda $74
003D67  2  69 06                adc #6
003D69  2               
003D69  2  C9 F9                cmp #<(L5280+$c+4*6)
003D6B  2  10 05                bpl emerge_characters_exit
003D6D  2  85 74                sta $74
003D6F  2  4C 59 3D             jmp emerge_characters_loop
003D72  2               
003D72  2                   emerge_characters_exit:
003D72  2  18               clc
003D73  2  60               rts
003D74  2               
003D74  2  00 06 0C 12  enemy_slots: .byte 0, 6, 12, 18
003D78  2               
003D78  2               move_characters:
003D78  2               
003D78  2  A9 E1            lda #<(L5280+$c)		; $528c set the character address
003D7A  2  85 74            sta $74
003D7C  2  A9 4F            lda #>(L5280+$c)
003D7E  2  85 75            sta $75
003D80  2               
003D80  2  AD 63 55         lda L578e           ; read a value from 0 to 3 from the motion counter
003D83  2  29 03            and #3
003D85  2  AA               tax
003D86  2  BD 74 3D         lda enemy_slots,x   ; look up the corresponding slot in the character list
003D89  2  65 74            adc $74
003D8B  2  85 74            sta $74             ; update the character address
003D8D  2               
003D8D  2                   move_characters_loop:
003D8D  2               
003D8D  2  A0 00                ldy #0
003D8F  2  B1 74                lda ($74),y
003D91  2  C9 03                cmp #3
003D93  2  D0 06                bne move_characters_not_emerge_explode
003D95  2               
003D95  2  20 12 37             jsr emerge_explode
003D98  2  4C A2 3D             jmp move_characters_next
003D9B  2               
003D9B  2                       move_characters_not_emerge_explode:
003D9B  2  C9 08                cmp #8
003D9D  2  30 03                bmi move_characters_next
003D9F  2               
003D9F  2  20 27 39             jsr move_enemy
003DA2  2               
003DA2  2                       move_characters_next:
003DA2  2  18                   clc
003DA3  2               
003DA3  2  A5 74                lda $74                     ; for the last enemy, check the next slot
003DA5  2  C9 F3                cmp #<(L5280+$c+3*6)        ; $9E for the presence of an explosion
003DA7  2  D0 08                bne move_characters_endloop ; otherwise leave the loop (only performing
003DA9  2  18                   clc                         ; one iteration)
003DAA  2               
003DAA  2  69 06                adc #6
003DAC  2  85 74                sta $74
003DAE  2  4C 8D 3D             jmp move_characters_loop
003DB1  2               
003DB1  2                   move_characters_endloop:
003DB1  2  18               clc
003DB2  2               
003DB2  2                   ; Check collisions with the player.
003DB2  2               
003DB2  2  20 B7 3F         jsr player_collide
003DB5  2  B0 03            bcs move_characters_collisions
003DB7  2  4C 38 3E         jmp move_characters_exit
003DBA  2               
003DBA  2                   move_characters_collisions:
003DBA  2  18               clc
003DBB  2               
003DBB  2  A0 00            ldy #0
003DBD  2  B1 74            lda ($74),y ; type
003DBF  2  C9 08            cmp #8
003DC1  2  10 57            bpl move_character_destroy_enemy
003DC3  2               
003DC3  2                   ; Unplot the item.
003DC3  2  20 53 31         jsr unplot_character
003DC6  2               
003DC6  2                   ; Remove it from the item table.
003DC6  2  20 3A 3E         jsr remove_room_item
003DC9  2               
003DC9  2  A9 00            lda #0      ; remove the item from the character list
003DCB  2  A0 00            ldy #0
003DCD  2  91 74            sta ($74),y
003DCF  2               
003DCF  2  C8               iny
003DD0  2  B1 74            lda ($74),y         ; get the item type
003DD2  2               
003DD2  2  85 8D            sta $8d             ; temporarily store A and increase the score
003DD4  2  AA               tax
003DD5  2  BD 4B 3E         lda item_scores,x
003DD8  2  85 70            sta $70
003DDA  2  20 75 3E         jsr add_score
003DDD  2  A5 8D            lda $8d
003DDF  2               
003DDF  2                   ; Check the item type.
003DDF  2  C9 08            cmp #8
003DE1  2  30 0E            bmi move_characters_not_health
003DE3  2               
003DE3  2  A9 14            lda #20
003DE5  2  85 70            sta $70
003DE7  2  20 CA 3E         jsr add_strength
003DEA  2  18               clc
003DEB  2               
003DEB  2  A2 02            ldx #2
003DED  2  20 B8 40         jsr play_sound
003DF0  2               
003DF0  2  60               rts
003DF1  2               
003DF1  2                   move_characters_not_health:
003DF1  2  C9 05            cmp #5
003DF3  2  30 07            bmi move_characters_not_treasure
003DF5  2               
003DF5  2  A2 02            ldx #2
003DF7  2  20 B8 40         jsr play_sound
003DFA  2               
003DFA  2  18               clc
003DFB  2  60               rts
003DFC  2               
003DFC  2                   move_characters_not_treasure:
003DFC  2  C9 04            cmp #4
003DFE  2  30 0F            bmi move_characters_not_key
003E00  2               
003E00  2                   ; Key - update the item/player flags byte.
003E00  2  AD 55 55         lda L5780
003E03  2  09 01            ora #$01
003E05  2  8D 55 55         sta L5780
003E08  2  18               clc
003E09  2               
003E09  2  A2 03            ldx #3
003E0B  2  20 B8 40         jsr play_sound
003E0E  2               
003E0E  2  60               rts
003E0F  2               
003E0F  2                   move_characters_not_key:
003E0F  2               
003E0F  2                   ; Update the player's weapon.
003E0F  2  0A               asl
003E10  2  8D 5E 55         sta L5789
003E13  2  18               clc
003E14  2               
003E14  2  A2 02            ldx #2
003E16  2  20 B8 40         jsr play_sound
003E19  2               
003E19  2  60               rts
003E1A  2               
003E1A  2                   move_character_destroy_enemy:
003E1A  2               
003E1A  2                   ; Unplot the enemy and replace it with an explosion.
003E1A  2               
003E1A  2  20 53 31         jsr unplot_character
003E1D  2               
003E1D  2  A9 03            lda #3      ; explosion
003E1F  2  A0 00            ldy #0
003E21  2  91 74            sta ($74),y
003E23  2               
003E23  2  A9 04            lda #4
003E25  2  A0 01            ldy #1
003E27  2  91 74            sta ($74),y
003E29  2               
003E29  2  20 63 31         jsr plot_character
003E2C  2               
003E2C  2                   ; Reduce the player's strength.
003E2C  2               
003E2C  2  A2 01            ldx #1
003E2E  2  20 B8 40         jsr play_sound
003E31  2               
003E31  2  A9 01            lda #1
003E33  2  85 70            sta $70
003E35  2  4C 03 3F         jmp reduce_strength ; optimise away the rts
003E38  2               
003E38  2                   move_characters_exit:
003E38  2  18               clc
003E39  2  60               rts
003E3A  2               
003E3A  2               remove_room_item:
003E3A  2               
003E3A  2  AE 57 55         ldx L5782                       ; current room row number
003E3D  2  BD CB 2D         lda eleven_times_table,x
003E40  2  6D 58 55         adc L5782+1                       ; current room column number
003E43  2  AA               tax
003E44  2  A9 80            lda #$80    ; store a value with the top bit set instead of zero because we
003E46  2  9D 55 50         sta L5200,x ; have visited this room if we can collect the object within it
003E49  2  18               clc
003E4A  2  60               rts
003E4B  2               
003E4B  2  01 04 09 16  item_scores:     .byte $1,$4,$9,$16, $50,$20,$5,$10,$40
003E4F  2  50 20 05 10  
003E53  2  40           
003E54  2  30 31 32 33  score_digits:    .byte "0123456789"
003E58  2  34 35 36 37  
003E5C  2  38 39        
003E5E  2  C7 08 61 61  score_name:      .byte red+7,8,"aaaaaaaaa",0,$ff
003E62  2  61 61 61 61  
003E66  2  61 61 61 00  
003E6B  2  C0 01 30 30  score_nr:        .byte red+0,1,"000000",0,$ff
003E6F  2  30 30 30 30  
003E73  2  00 FF        
003E75  2               
003E75  2               add_score:      ; $70=score to add
003E75  2               
003E75  2  F8               sed
003E76  2  AD 5B 55         lda L5786
003E79  2  65 70            adc $70
003E7B  2  8D 5B 55         sta L5786
003E7E  2  AD 5C 55         lda L5786+1
003E81  2  69 00            adc #0
003E83  2  8D 5C 55         sta L5786+1
003E86  2  AD 5D 55         lda L5786+2
003E89  2  69 00            adc #0
003E8B  2  8D 5D 55         sta L5786+2
003E8E  2  D8               cld
003E8F  2               
003E8F  2               write_score:
003E8F  2               
003E8F  2  A9 5B            lda #<L5786			;$5786
003E91  2  85 70            sta $70
003E93  2  A9 55            lda #>L5786
003E95  2  85 71            sta $71
003E97  2               
003E97  2  A2 6B        	ldx #<score_nr
003E99  2  A0 3E        	ldy #>score_nr
003E9B  2  20 A3 4D     	jsr PUTSTRING
003E9E  2               
003E9E  2               ;--------------------------------------
003E9E  2               ;Write score digits
003E9E  2               ;--------------------------------------
003E9E  2               write_score_digits:     ; $70,$71=address of score bytes
003E9E  2               
003E9E  2  A2 00        	ldx #0
003EA0  2  A0 02            ldy #2
003EA2  2                   write_score_loop:
003EA2  2               
003EA2  2  B1 70                lda ($70),y
003EA4  2  4A                   lsr
003EA5  2  4A                   lsr
003EA6  2  4A                   lsr
003EA7  2  4A                   lsr
003EA8  2  18                   clc
003EA9  2  69 30        	adc #$30
003EAB  2  9D 6D 3E     	sta score_nr+2,x
003EAE  2  E8           	inx
003EAF  2               
003EAF  2  B1 70                lda ($70),y
003EB1  2  29 0F                and #$0f
003EB3  2  18                   clc
003EB4  2  69 30        	adc #$30
003EB6  2  9D 6D 3E     	sta score_nr+2,x
003EB9  2  E8           	inx
003EBA  2               
003EBA  2  88                   dey
003EBB  2  10 E5                bpl write_score_loop
003EBD  2               
003EBD  2  A2 6B        	ldx #<score_nr
003EBF  2  A0 3E        	ldy #>score_nr
003EC1  2  20 A3 4D     	jsr PUTSTRING
003EC4  2               
003EC4  2  18               clc
003EC5  2  60               rts
003EC6  2               
003EC6  2  AA 6A 5A 56  strength_units:          .byte $aa,$6a,$5a,$56
003ECA  2               
003ECA  2               add_strength:   ; $70=strength to add
003ECA  2               
003ECA  2                   ; Divide the initial strength by 4 to determine which half character to
003ECA  2                   ; start plotting at, and multiply by 8 to get the address. The net result
003ECA  2                   ; is to mask off the bottom two bits and shift left once.
003ECA  2               
003ECA  2  AD 59 55         lda L5784
003ECD  2  65 70            adc $70
003ECF  2  C9 41            cmp #65
003ED1  2  30 02            bmi add_strength_update
003ED3  2               
003ED3  2  A9 40            lda #64
003ED5  2               
003ED5  2                   add_strength_update:
003ED5  2  18               clc
003ED6  2  8D 59 55         sta L5784   ; the final strength
003ED9  2               
003ED9  2               plot_strength:
003ED9  2  4A           	lsr a
003EDA  2  4A           	lsr a
003EDB  2  AA           	tax         ; the number of units to add between the rounded original
003EDC  2                               ; strength and the final strength
003EDC  2  A9 70        	lda #<$8170    ; the start of the strength bar
003EDE  2  85 72        	sta $72
003EE0  2  A9 81        	lda #>$8170
003EE2  2  85 73        	sta $73
003EE4  2               
003EE4  2  A0 00        	ldy #0
003EE6  2  AD 59 55     	lda L5784
003EE9  2  C9 04        	cmp #4
003EEB  2  30 0E        	bmi add_strength_loop_extra
003EED  2               
003EED  2               	add_strength_loop:
003EED  2  18                   clc
003EEE  2  A9 55                lda #$55
003EF0  2  91 72                sta ($72),y
003EF2  2  C8           	   iny
003EF3  2  CA           	   dex
003EF4  2  D0 F7                bne add_strength_loop
003EF6  2               
003EF6  2  AD 59 55     	lda L5784
003EF9  2  29 03        	and #3
003EFB  2               
003EFB  2                   add_strength_loop_extra:
003EFB  2                   ; For any remaining units in excess of the multiples of four units, plot
003EFB  2                   ; the appropriate byte.
003EFB  2  AA           	tax
003EFC  2  BD C6 3E     	lda strength_units,x
003EFF  2  91 72        	sta ($72),y
003F01  2               
003F01  2                   add_strength_exit:
003F01  2  18           	clc
003F02  2  60           	rts
003F03  2               
003F03  2               reduce_strength:    ; $70=strength to remove
003F03  2               
003F03  2  AD 59 55         lda L5784
003F06  2  AA               tax
003F07  2  38               sec
003F08  2  E5 70            sbc $70
003F0A  2  10 02            bpl reduce_strength_update
003F0C  2               
003F0C  2  A9 00            lda #0
003F0E  2               
003F0E  2                   reduce_strength_update:
003F0E  2  18               clc
003F0F  2  8D 59 55         sta L5784
003F12  2               
003F12  2                   ; Divide the final strength by 4 to determine which half character to
003F12  2                   ; plot, and multiply by 8 to get the address. The net result is to mask off
003F12  2                   ; the bottom two bits and shift left once.
003F12  2               
003F12  2  20 D9 3E     	jsr plot_strength
003F15  2               
003F15  2  AD 59 55         lda L5784
003F18  2  C9 00            cmp #0
003F1A  2  D0 23            bne reduce_strength_exit
003F1C  2               
003F1C  2  AD 55 55         lda L5780       ; the player ran out of strength
003F1F  2  09 40            ora #$40
003F21  2  8D 55 55         sta L5780
003F24  2               
003F24  2  A9 40            lda #64         ; reset the delay counter
003F26  2  8D 5A 55         sta L5785
003F29  2               
003F29  2  A9 D5            lda #<L5280		; $5280 unplot the player
003F2B  2  85 74            sta $74
003F2D  2  A9 4F            lda #>L5280
003F2F  2  85 75            sta $75
003F31  2               
003F31  2  20 53 31         jsr unplot_character
003F34  2               
003F34  2  A9 08            lda #8          ; change the player's direction to the demise animation
003F36  2  8D D6 4F         sta L5280+$1
003F39  2               
003F39  2  20 63 31         jsr plot_character
003F3C  2  4C 41 3F         jmp destroy_enemies ; optimise away the rts
003F3F  2               
003F3F  2                   reduce_strength_exit:
003F3F  2  18               clc
003F40  2  60               rts
003F41  2               
003F41  2               destroy_enemies:
003F41  2               
003F41  2  A9 E1            lda #<(L5280+$c)		; $528c
003F43  2  85 74            sta $74
003F45  2  A9 4F            lda #>(L5280+$c)
003F47  2  85 75            sta $75
003F49  2               
003F49  2                   destroy_enemies_loop:
003F49  2               
003F49  2  A0 00                ldy #0
003F4B  2  B1 74                lda ($74),y
003F4D  2  C9 08                cmp #8
003F4F  2  30 14                bmi destroy_enemies_not_enemy
003F51  2               
003F51  2  20 53 31             jsr unplot_character
003F54  2               
003F54  2  A9 03                lda #3          ; emerge/explosion
003F56  2  A0 00                ldy #0
003F58  2  91 74                sta ($74),y
003F5A  2               
003F5A  2  C8                   iny
003F5B  2  A9 04                lda #4          ; explosion
003F5D  2  91 74                sta ($74),y
003F5F  2               
003F5F  2  20 63 31             jsr plot_character
003F62  2  4C 76 3F             jmp destroy_enemies_not_emerging_enemy
003F65  2               
003F65  2                       destroy_enemies_not_enemy:
003F65  2  C9 03                cmp #3
003F67  2  D0 0D                bne destroy_enemies_not_emerging_enemy
003F69  2               
003F69  2  20 53 31             jsr unplot_character
003F6C  2               
003F6C  2  C8                   iny             ; whether emerging or exploding, ensure that the enemy
003F6D  2  B1 74                lda ($74),y     ; is now exploding
003F6F  2  09 04                ora #4
003F71  2  91 74                sta ($74),y
003F73  2               
003F73  2  20 63 31             jsr plot_character
003F76  2               
003F76  2                       destroy_enemies_not_emerging_enemy:
003F76  2  18                   clc
003F77  2  A5 74                lda $74
003F79  2  69 06                adc #6
003F7B  2  85 74                sta $74
003F7D  2  C9 F9                cmp #<(L5280+$c+4*6)		; $a4
003F7F  2  30 C8                bmi destroy_enemies_loop
003F81  2               
003F81  2  18               clc
003F82  2  60               rts
003F83  2               
003F83  2               remove_characters:
003F83  2               
003F83  2                   ; Clear the character table.
003F83  2               
003F83  2  A2 06            ldx #6
003F85  2                   remove_characters_loop:
003F85  2  A9 00                lda #0
003F87  2  9D D5 4F             sta L5280,x
003F8A  2  8A                   txa
003F8B  2  69 06                adc #6
003F8D  2  AA                   tax
003F8E  2  E0 2A                cpx #$2a
003F90  2  30 F3                bmi remove_characters_loop
003F92  2               
003F92  2  60               rts
003F93  2               
003F93  2               ; The player collision masks use bits to represent where the player is in a
003F93  2               ; tile. See the collisions.txt file for more information.
003F93  2               
003F93  2               ; Player is above, enemy is below, checking the overlap in the lower tile.
003F93  2  00 C0 F0 FC  player_collision_mask_above: .byte $00, $c0, $f0, $fc
003F97  2               
003F97  2  00 00 00 80  projectile_collision_mask_above: .byte $00, $00, $00, $80
003F9B  2               
003F9B  2               ; Player and enemy share the same tile or player is on the tile below.
003F9B  2  FF 3F 0F 03  player_collision_mask_below:  .byte $ff, $3f, $0f, $03
003F9F  2               
003F9F  2  E0 38 0E 03  projectile_collision_mask_below: .byte $e0, $38, $0e, $03
003FA3  2               
003FA3  2               ; Player is above or on the same tile, enemy is below, checking the overlap in
003FA3  2               ; the lower tile.
003FA3  2  F8 3F 0F 03  enemy_collision_mask_above:  .byte $f8, $3f, $0f, $03
003FA7  2               
003FA7  2               ; Enemy is above, player is below, checking the overlap in the lower tile.
003FA7  2  00 00 C0 F0  enemy_collision_mask_below: .byte $00, $00, $c0, $f0
003FAB  2               
003FAB  2               ; Player is to the left, enemy is to the right, checking the overlap in the
003FAB  2               ; right hand tile.
003FAB  2               player_collision_mask_left:
003FAB  2  00 00 08     projectile_collision_mask_left: .byte $00,$00,$08		;,$08
003FAE  2               
003FAE  2               ; Player and enemy share the same tile or player is on the tile to the right.
003FAE  2               player_collision_mask_right:
003FAE  2  0C 06 03     projectile_collision_mask_right: .byte $0c, $06, $03		;,$01
003FB1  2               
003FB1  2               ; Player is to the left, enemy is to the right or on the same tile, checking
003FB1  2               ; the overlap in the right hand tile.
003FB1  2  0F 07 03     enemy_collision_mask_left:  .byte $0f, $07, $03			;,$01
003FB4  2               
003FB4  2               ; Enemy is to the left, player is to the right, checking the overlap in the
003FB4  2               ; right hand tile.
003FB4  2  00 08 0C     enemy_collision_mask_right: .byte $00, $08, $0c			;,$0e
003FB7  2               
003FB7  2               player_collide:
003FB7  2               
003FB7  2  AD D7 4F         lda L5280+$2                           ; player y
003FBA  2  85 8A            sta $8a
003FBC  2  AD D9 4F         lda L5280+$4                           ; player x
003FBF  2  85 8B            sta $8b
003FC1  2               
003FC1  2  AE D8 4F         ldx L5280+$3                           ; player dy
003FC4  2  BD 93 3F         lda player_collision_mask_above,x
003FC7  2  85 86            sta $86
003FC9  2  BD 9B 3F         lda player_collision_mask_below,x
003FCC  2  85 88            sta $88
003FCE  2  AE DA 4F         ldx L5280+$5                           ; player dx
003FD1  2  BD AB 3F         lda player_collision_mask_left,x
003FD4  2  85 87            sta $87
003FD6  2  BD AE 3F         lda player_collision_mask_right,x
003FD9  2  85 89            sta $89
003FDB  2               
003FDB  2  4C 02 40         jmp collide ; optimise away the rts
003FDE  2               
003FDE  2               projectile_collide:
003FDE  2               
003FDE  2  AD DD 4F         lda L5280+$8                           ; projectile y
003FE1  2  85 8A            sta $8a
003FE3  2  AD DF 4F         lda L5280+$a                           ; projectile x
003FE6  2  85 8B            sta $8b
003FE8  2               
003FE8  2  AE DE 4F         ldx L5280+$9                           ; projectile dy
003FEB  2  BD 97 3F         lda projectile_collision_mask_above,x
003FEE  2  85 86            sta $86
003FF0  2  BD 9F 3F         lda projectile_collision_mask_below,x
003FF3  2  85 88            sta $88
003FF5  2  AE E0 4F         ldx L5280+$b                           ; projectile dx
003FF8  2  BD AB 3F         lda projectile_collision_mask_left,x
003FFB  2  85 87            sta $87
003FFD  2  BD AE 3F         lda projectile_collision_mask_right,x
004000  2  85 89            sta $89
004002  2               
004002  2                   ; Run on into the next routine.
004002  2               
004002  2               collide:
004002  2               
004002  2  A9 E1            lda #<(L5280+$c)		; $528c set the character address
004004  2  85 74            sta $74
004006  2  A9 4F            lda #>(L5280+$c)
004008  2  85 75            sta $75
00400A  2               
00400A  2                   collide_loop:
00400A  2               
00400A  2  A0 00                ldy #0
00400C  2  B1 74                lda ($74),y         ; type
00400E  2  C9 04                cmp #4
004010  2  10 03                bpl collide_check
004012  2               
004012  2  4C 94 40             jmp collide_next
004015  2               
004015  2                       collide_check:
004015  2               
004015  2  A0 02                ldy #2
004017  2  B1 74                lda ($74),y         ; y
004019  2  38                   sec
00401A  2  E5 8A                sbc $8a             ; y - player/projectile y
00401C  2  F0 0B                beq check_collide_y_equal
00401E  2  C9 01                cmp #1
004020  2  F0 16                beq check_collide_y_greater
004022  2  C9 FF                cmp #255
004024  2  F0 21                beq check_collide_y_less
004026  2               
004026  2  4C 94 40             jmp collide_next
004029  2               
004029  2                       check_collide_y_equal:
004029  2                       ; The enemy is on the same tile as the player/projectile so look at the
004029  2                       ; collision on their common tile.
004029  2  A0 03                ldy #3
00402B  2  B1 74                lda ($74),y                         ; dy
00402D  2  AA                   tax
00402E  2  BD A3 3F             lda enemy_collision_mask_above,x
004031  2  25 88                and $88                             ; player/projectile mask below
004033  2  D0 21                bne check_collide_x
004035  2               
004035  2  4C 94 40             jmp collide_next
004038  2               
004038  2                       check_collide_y_greater:
004038  2                       ; The enemy is on the tile below the player/projectile so look at the
004038  2                       ; collision on the enemy's tile.
004038  2  A0 03                ldy #3
00403A  2  B1 74                lda ($74),y                         ; dy
00403C  2  AA                   tax
00403D  2  BD A3 3F             lda enemy_collision_mask_above,x
004040  2  25 86                and $86                             ; player mask above
004042  2  D0 12                bne check_collide_x
004044  2               
004044  2  4C 94 40             jmp collide_next
004047  2               
004047  2                       check_collide_y_less:
004047  2                       ; The enemy is on the tile above the player/projectile so look at the
004047  2                       ; collision on the player's tile.
004047  2  A0 03                ldy #3
004049  2  B1 74                lda ($74),y                         ; dy
00404B  2  AA                   tax
00404C  2  BD A7 3F             lda enemy_collision_mask_below,x
00404F  2  25 88                and $88                             ; player mask below
004051  2  D0 03                bne check_collide_x
004053  2               
004053  2  4C 94 40             jmp collide_next
004056  2               
004056  2                       check_collide_x:
004056  2  A0 04                ldy #4
004058  2  B1 74                lda ($74),y         ; x
00405A  2  38                   sec
00405B  2  E5 8B                sbc $8b             ; x - player/projectile x
00405D  2  F0 0B                beq check_collide_x_equal
00405F  2  C9 01                cmp #1
004061  2  F0 16                beq check_collide_x_greater
004063  2  C9 FF                cmp #255
004065  2  F0 21                beq check_collide_x_less
004067  2               
004067  2  4C 94 40             jmp collide_next
00406A  2               
00406A  2                       check_collide_x_equal:
00406A  2                       ; The enemy is on the same tile as the player/projectile so look at the
00406A  2                       ; collision on their common tile.
00406A  2  A0 05                ldy #5
00406C  2  B1 74                lda ($74),y                         ; dx
00406E  2  AA                   tax
00406F  2  BD B1 3F             lda enemy_collision_mask_left,x
004072  2  25 89                and $89                             ; player mask right
004074  2  D0 2C                bne check_collide_destroy
004076  2               
004076  2  4C 94 40             jmp collide_next
004079  2               
004079  2                       check_collide_x_greater:
004079  2                       ; The enemy is the tile to the right of the player/projectile so look
004079  2                       ; at the collision on the enemy's tile.
004079  2  A0 05                ldy #5
00407B  2  B1 74                lda ($74),y                         ; dx
00407D  2  AA                   tax
00407E  2  BD B1 3F             lda enemy_collision_mask_left,x
004081  2  25 87                and $87                             ; player mask left
004083  2  D0 1D                bne check_collide_destroy
004085  2               
004085  2  4C 94 40             jmp collide_next
004088  2               
004088  2                       check_collide_x_less:
004088  2                       ; The enemy is the tile to the left of the player/projectile so look at
004088  2                       ; the collision on the player's tile.
004088  2  A0 05                ldy #5
00408A  2  B1 74                lda ($74),y                         ; dx
00408C  2  AA                   tax
00408D  2  BD B4 3F             lda enemy_collision_mask_right,x
004090  2  25 89                and $89                             ; player mask right
004092  2  D0 0E                bne check_collide_destroy
004094  2               
004094  2                       collide_next:
004094  2  18                   clc
004095  2               
004095  2                       ; Examine the next character.
004095  2  A5 74                lda $74
004097  2  69 06                adc #6
004099  2               
004099  2  C9 F9                cmp #<(L5280+$c+4*6)		; $a4
00409B  2  10 07                bpl collide_exit
00409D  2  85 74                sta $74
00409F  2  4C 0A 40             jmp collide_loop
0040A2  2               
0040A2  2                   check_collide_destroy:
0040A2  2               
0040A2  2  38               sec         ; set the carry flag to inform the caller that the
0040A3  2  60               rts         ; player/projectile should be destroyed
0040A4  2               
0040A4  2                   collide_exit:
0040A4  2  18               clc
0040A5  2  60               rts
0040A6  2               
0040A6  2               ;sounds_low:  .byte <explosion_sound, <damage_sound, <item_sound, <key_sound, <note_sound, <emerge_sound
0040A6  2               ;sounds_high: .byte >explosion_sound, >damage_sound, >item_sound, >key_sound, >note_sound, >emerge_sound
0040A6  2               
0040A6  2               ;explosion_sound: .byte 1,0, 1,0, 60,0, 2,0
0040A6  2               ;damage_sound:    .byte 1,0, 2,0, 40,0, 4,0
0040A6  2               ;item_sound:      .byte $13,0, 3,0, 32,0, 3,0
0040A6  2               ;key_sound:       .byte $13,0, 4,0, 50,0, 5,0
0040A6  2               ;emerge_sound:    .byte 2,0, 3,0, 0,0, 2,0
0040A6  2               
0040A6  2               ;note_sound=L5760
0040A6  2               ;note_pitch=L5760+4
0040A6  2               ;note_duration=L5760+6
0040A6  2               
0040A6  2               play_note:      ; A=duration, X=pitch
0040A6  2  8D 7F 41     	sta tmp_note
0040A9  2  AD D5 55     lda L579d
0040AC  2  F0 01        	beq note_play
0040AE  2  60           	rts
0040AF  2               note_play:
0040AF  2  AD 7F 41     	lda tmp_note
0040B2  2  A0 02        	ldy #2
0040B4  2  20 C5 4E     	jsr sound
0040B7  2  60           	rts
0040B8  2               
0040B8  2               ;    sta note_pitch
0040B8  2               ;    sty note_duration
0040B8  2               ;    ldx #4
0040B8  2                   ; Run on into the next routine.
0040B8  2               
0040B8  2               play_sound:     ; X=sound number
0040B8  2  AD D5 55     	lda L579d
0040BB  2  F0 01        	beq snd_play
0040BD  2  60           	rts
0040BE  2               snd_play:
0040BE  2  E0 00        	cpx #0
0040C0  2  D0 03        	bne chk_snd1
0040C2  2  4C E2 40     	jmp play_snd0
0040C5  2               chk_snd1:
0040C5  2  E0 01        	cpx #1
0040C7  2  D0 03        	bne chk_snd2
0040C9  2  4C 05 41     	jmp play_snd1
0040CC  2               chk_snd2:
0040CC  2  E0 02        	cpx #2
0040CE  2  D0 03        	bne chk_snd3
0040D0  2  4C 28 41     	jmp play_snd2
0040D3  2               chk_snd3:
0040D3  2  E0 03        	cpx #3
0040D5  2  D0 03        	bne chk_snd5
0040D7  2  4C 4B 41     	jmp play_snd3
0040DA  2               chk_snd5:
0040DA  2  E0 05        	cpx #5
0040DC  2  D0 03        	bne no_snd
0040DE  2  4C 65 41     	jmp play_snd5
0040E1  2               no_snd:
0040E1  2  60           	rts
0040E2  2               
0040E2  2               
0040E2  2               play_snd0:		; Explosion
0040E2  2  A9 28        	lda #40
0040E4  2  8D 7F 41     	sta tmp_note
0040E7  2               snd0_loop:
0040E7  2  A9 02        	lda #2
0040E9  2  AE 7F 41     	ldx tmp_note
0040EC  2  A0 02        	ldy #2
0040EE  2  20 C5 4E     	jsr sound
0040F1  2  EE 7F 41     	inc tmp_note
0040F4  2  EE 7F 41     	inc tmp_note
0040F7  2  EE 7F 41     	inc tmp_note
0040FA  2  EE 7F 41     	inc tmp_note
0040FD  2  AD 7F 41     	lda tmp_note
004100  2  C9 40        	cmp #64
004102  2  D0 E3        	bne snd0_loop
004104  2  60           	rts
004105  2               
004105  2               play_snd1:		; Damage
004105  2  A9 14        	lda #20
004107  2  8D 7F 41     	sta tmp_note
00410A  2               snd1_loop:
00410A  2  A9 02        	lda #2
00410C  2  AE 7F 41     	ldx tmp_note
00410F  2  A0 02        	ldy #2
004111  2  20 C5 4E     	jsr sound
004114  2  EE 7F 41     	inc tmp_note
004117  2  EE 7F 41     	inc tmp_note
00411A  2  EE 7F 41     	inc tmp_note
00411D  2  EE 7F 41     	inc tmp_note
004120  2  AD 7F 41     	lda tmp_note
004123  2  C9 2C        	cmp #44
004125  2  D0 E3        	bne snd1_loop
004127  2  60           	rts
004128  2               
004128  2               play_snd2:		; Item
004128  2  A9 2C        	lda #44
00412A  2  8D 7F 41     	sta tmp_note
00412D  2               snd2_loop:
00412D  2  A9 01        	lda #1
00412F  2  AE 7F 41     	ldx tmp_note
004132  2  A0 02        	ldy #2
004134  2  20 C5 4E     	jsr sound
004137  2  CE 7F 41     	dec tmp_note
00413A  2  CE 7F 41     	dec tmp_note
00413D  2  CE 7F 41     	dec tmp_note
004140  2  CE 7F 41     	dec tmp_note
004143  2  AD 7F 41     	lda tmp_note
004146  2  C9 14        	cmp #20
004148  2  D0 E3        	bne snd2_loop
00414A  2  60           	rts
00414B  2               
00414B  2               play_snd3:		; Key
00414B  2  A9 0E        	lda #14
00414D  2  8D 7F 41     	sta tmp_note
004150  2               snd3_loop:
004150  2  A9 02        	lda #2
004152  2  AE 7F 41     	ldx tmp_note
004155  2  A0 08        	ldy #8
004157  2  20 C5 4E     	jsr sound
00415A  2  CE 7F 41     	dec tmp_note
00415D  2  AD 7F 41     	lda tmp_note
004160  2  C9 0A        	cmp #10
004162  2  D0 EC        	bne snd3_loop
004164  2  60           	rts
004165  2               
004165  2               play_snd5:		; Emerge
004165  2  A9 0E        	lda #14
004167  2  8D 7F 41     	sta tmp_note
00416A  2               snd5_loop:
00416A  2  A9 02        	lda #2
00416C  2  AE 7F 41     	ldx tmp_note
00416F  2  A0 08        	ldy #8
004171  2  20 C5 4E     	jsr sound
004174  2  CE 7F 41     	dec tmp_note
004177  2  AD 7F 41     	lda tmp_note
00417A  2  C9 0A        	cmp #10
00417C  2  D0 EC        	bne snd5_loop
00417E  2  60           	rts
00417F  2               
00417F  2               tmp_note:
00417F  2  00 00        	.byte 0,0
004181  2               
004181  2               ;    lda sounds_high,x
004181  2               ;    tay
004181  2               ;    lda sounds_low,x
004181  2               ;    tax
004181  2               ;    lda #7
004181  2               ;    jsr $fff1
004181  2               ;    rts
004181  2               
004181  2               ;-----------------------------------
004181  2               ;Copy title screen from #1800->#8000
004181  2               ;-----------------------------------
004181  2               copy_title_up:
004181  2               
004181  2  A9 DA            lda #<title
004183  2  85 70            sta $70
004185  2  A9 67            lda #>title
004187  2  85 71            sta $71
004189  2               
004189  2  A9 00            lda #$00
00418B  2  85 72            sta $72
00418D  2  A9 80            lda #$80
00418F  2  85 73            sta $73
004191  2               
004191  2  A2 05            ldx #5
004193  2                   ; Run on into the next routine.
004193  2               
004193  2               copy_title:
004193  2               
004193  2                   copy_title_loop1:
004193  2               
004193  2  A0 00                ldy #0
004195  2                       copy_title_loop2:
004195  2               
004195  2  B1 70                    lda ($70),y
004197  2  91 72                    sta ($72),y
004199  2  C8                       iny
00419A  2  C0 00                    cpy #0
00419C  2  D0 F7                    bne copy_title_loop2
00419E  2               
00419E  2  E6 71                inc $71
0041A0  2  E6 73                inc $73
0041A2  2               
0041A2  2  CA                   dex
0041A3  2  10 EE                bpl copy_title_loop1
0041A5  2               
0041A5  2  60               rts
0041A6  2               
0041A6  2               copy_completed_screen_up:
0041A6  2               
0041A6  2  A9 DA            lda #<complete
0041A8  2  85 70            sta $70
0041AA  2  A9 6D            lda #>complete
0041AC  2  85 71            sta $71
0041AE  2               
0041AE  2  A9 00            lda #$00
0041B0  2  85 72            sta $72
0041B2  2  A9 81            lda #$81
0041B4  2  85 73            sta $73
0041B6  2               
0041B6  2  A2 08            ldx #8
0041B8  2  4C 93 41         jmp copy_title  ; optimise away the rts
0041BB  2               
0041BB  2               ;--------------------------------
0041BB  2               ;Initialize program
0041BB  2               ;--------------------------------
0041BB  2               init:
0041BB  2                   ; Set up note data.
0041BB  2  A2 07            ldx #7
0041BD  2                   set_up_note_loop:
0041BD  2  BD 15 42             lda note_data,x
0041C0  2  9D 35 55             sta L5760,x
0041C3  2  CA                   dex
0041C4  2  10 F7                bpl set_up_note_loop
0041C6  2               
0041C6  2  A2 86            ldx #$86
0041C8  2  20 F2 47         jsr cls     ; clear the text window
0041CB  2               
0041CB  2                   ; Define the default high scores.
0041CB  2  A0 00            ldy #0
0041CD  2  A9 55            lda #<L5180		; $5180
0041CF  2  85 70            sta $70
0041D1  2  A9 4F            lda #>L5180
0041D3  2  85 71            sta $71
0041D5  2  A9 16            lda #$16
0041D7  2  85 72            sta $72
0041D9  2               
0041D9  2  A2 00            ldx #0
0041DB  2                   init_define_high_scores_loop:
0041DB  2               
0041DB  2  A9 00                lda #0
0041DD  2  91 70                sta ($70),y
0041DF  2  C8                   iny
0041E0  2  A5 72                lda $72
0041E2  2  91 70                sta ($70),y
0041E4  2  C8                   iny
0041E5  2  A9 00                lda #0
0041E7  2  91 70                sta ($70),y
0041E9  2               
0041E9  2  C8                   iny
0041EA  2                       init_define_high_score_name_loop:
0041EA  2               
0041EA  2  BD 1D 42                 lda high_score_default_name1,x
0041ED  2  91 70                    sta ($70),y
0041EF  2  C8                       iny
0041F0  2  E8                       inx
0041F1  2  E0 09                    cpx #9
0041F3  2  F0 06                    beq init_define_high_scores_next
0041F5  2  E0 12                    cpx #18
0041F7  2  D0 F1                    bne init_define_high_score_name_loop
0041F9  2               
0041F9  2  A2 00                ldx #0
0041FB  2                       init_define_high_scores_next:
0041FB  2               
0041FB  2  F8                   sed
0041FC  2  A5 72                lda $72
0041FE  2  38                   sec
0041FF  2  E9 02                sbc #2
004201  2  85 72                sta $72
004203  2  D8                   cld
004204  2  18                   clc
004205  2               
004205  2  C0 60                cpy #96
004207  2  D0 D2                bne init_define_high_scores_loop
004209  2               
004209  2                   ; Disable joystick support.
004209  2  20 8C 4E         jsr joyinit
00420C  2  A9 00            lda #0
00420E  2  8D 53 55         sta L577e
004211  2  8D D5 55     	sta L579d	; Sound on
004214  2               
004214  2  60               rts
004215  2               
004215  2  13 00 F1 FF  note_data: .byte $13,0, 241,255, 0,0, 4,0
004219  2  00 00 04 00  
00421D  2               
00421D  2  52 45 54 52  high_score_default_name1: .byte "RETRO    "
004221  2  4F 20 20 20  
004225  2  20           
004226  2  20 53 4F 46  high_score_default_name2: .byte " SOFTWARE"
00422A  2  54 57 41 52  
00422E  2  45           
00422F  2               
00422F  2  04 15 74 6F  title_vdu_bytes:    .byte green+4,21, "to play",0,$ff
004233  2  20 70 6C 61  
004237  2  79 00 FF     
00423A  2  00 14 50 72  input_message:      .byte green+0,20,  "Press SPACE/FIRE",0,$ff
00423E  2  65 73 73 20  
004242  2  53 50 41 43  
00424E  2  40 17 20 43  title_vdu_bytes1:   .byte yellow+0,23, " Copyright 2011 ",0,$ff
004252  2  6F 70 79 72  
004256  2  69 67 68 74  
004262  2  40 17 44 61  title_vdu_bytes2:   .byte yellow+0,23, "David Boddie for",0,$ff
004266  2  76 69 64 20  
00426A  2  42 6F 64 64  
004276  2  C0 17 20 52  title_vdu_bytes3:   .byte red+0,23,    " Retro Software ",0,$ff
00427A  2  65 74 72 6F  
00427E  2  20 53 6F 66  
00428A  2  40 17 20 20  title_vdu_bytes4:   .byte yellow+0,23, "    GNU GPL3+   ",0,$ff
00428E  2  20 20 47 4E  
004292  2  55 20 47 50  
00429E  2  40 17 20 41  title_vdu_bytes5:   .byte yellow+0,23, " Atomic version ",0,$ff
0042A2  2  74 6F 6D 69  
0042A6  2  63 20 76 65  
0042B2  2  40 17 20 20  title_vdu_bytes6:   .byte yellow+0,23, "  Kees van Oss  ",0,$ff
0042B6  2  4B 65 65 73  
0042BA  2  20 76 61 6E  
0042C6  2               
0042C6  2               message_tab_lb:
0042C6  2  4E 62 76     	.byte <title_vdu_bytes1,<title_vdu_bytes2,<title_vdu_bytes3
0042C9  2  8A 9E B2     	.byte <title_vdu_bytes4,<title_vdu_bytes5,<title_vdu_bytes6
0042CC  2               message_tab_hb:
0042CC  2  42 42 42     	.byte >title_vdu_bytes1,>title_vdu_bytes2,>title_vdu_bytes3
0042CF  2  42 42 42     	.byte >title_vdu_bytes4,>title_vdu_bytes5,>title_vdu_bytes6
0042D2  2               
0042D2  2  02 04 03 05  complete_palette_bytes: .byte 2,4, 3,5, 1,4, 3,3, 2,2
0042D6  2  01 04 03 03  
0042DA  2  02 02        
0042DC  2               
0042DC  2               set_complete_palette:
0042DC  2               
0042DC  2  A9 00            lda #0
0042DE  2  85 80            sta $80
0042E0  2  A9 19            lda #25
0042E2  2  85 81            sta $81
0042E4  2               
0042E4  2                   set_complete_palette_loop:
0042E4  2               
0042E4  2  20 BE 43             jsr wait_for_vsync
0042E7  2               
0042E7  2  C6 81                dec $81
0042E9  2  A5 81                lda $81
0042EB  2  C9 00                cmp #0
0042ED  2  D0 F5                bne set_complete_palette_loop
0042EF  2               
0042EF  2  A9 19                lda #25
0042F1  2  85 81                sta $81
0042F3  2               
0042F3  2  A6 80                ldx $80
0042F5  2  BD D2 42             lda complete_palette_bytes,x
0042F8  2  85 70                sta $70
0042FA  2  E8                   inx
0042FB  2  BD D2 42             lda complete_palette_bytes,x
0042FE  2  85 71                sta $71
004300  2  E8                   inx
004301  2  86 80                stx $80
004303  2               
004303  2  A5 80                lda $80
004305  2  C9 0A                cmp #10
004307  2  D0 DB                bne set_complete_palette_loop
004309  2               
004309  2  60               rts
00430A  2               
00430A  2               ;--------------------------------
00430A  2               ;Show title screen
00430A  2               ;--------------------------------
00430A  2               show_title:
00430A  2               
00430A  2  A2 2F        	ldx #<title_vdu_bytes	; Rotating bottom text, ok
00430C  2  A0 42        	ldy #>title_vdu_bytes
00430E  2  20 A3 4D     	jsr PUTSTRING
004311  2               
004311  2  20 B6 43         jsr show_input_message	; Space/fire to play text, ok
004314  2               
004314  2                   ; Show the title.
004314  2  20 81 41         jsr copy_title_up		; Print header
004317  2               
004317  2                   ; Show the high scores.
004317  2               
004317  2  A9 55            lda #<L5180			; $5180 = High Score
004319  2  85 70            sta $70
00431B  2  A9 4F            lda #>L5180
00431D  2  85 71            sta $71
00431F  2               
00431F  2  A9 07            lda #7			; Y=8 pos High score table!!!!!!!!
004321  2  85 80            sta $80
004323  2               
004323  2  A9 00        	lda #0
004325  2  8D B5 43     	sta linecount
004328  2               
004328  2                   show_title_high_scores_loop:
004328  2               
004328  2  A9 C0        	lda #red+0
00432A  2  8D 6B 3E     	sta score_nr
00432D  2  A5 80                lda $80
00432F  2  8D 5F 3E     	sta score_name+1
004332  2  8D 6C 3E     	sta score_nr+1
004335  2  E6 80        	inc $80
004337  2  E6 80        	inc $80		; !!!!!!!!!!!!!!!!!!
004339  2  18                   clc
00433A  2               
00433A  2  20 9E 3E             jsr write_score_digits	; Print digits
00433D  2               
00433D  2  A2 00                ldx #0		; Print high score name
00433F  2  A0 03                ldy #3
004341  2                       show_title_high_scores_vdu_loop2:
004341  2               
004341  2  B1 70                    lda ($70),y
004343  2  9D 60 3E     	    sta score_name+2,x
004346  2               
004346  2  C8                       iny
004347  2  E8                       inx
004348  2  E0 09        	    cpx #09
00434A  2  D0 F5                    bne show_title_high_scores_vdu_loop2
00434C  2               
00434C  2  A2 5E        	ldx #<score_name	; Print High score line
00434E  2  A0 3E        	ldy #>score_name
004350  2  20 A3 4D     	jsr PUTSTRING
004353  2               
004353  2  18           	clc			; Point to next score table entry
004354  2  A5 70        	lda $70
004356  2  69 0C                adc #12
004358  2  85 70                sta $70
00435A  2  A9 00        	lda #0
00435C  2  65 71        	adc $71
00435E  2  85 71        	sta $71
004360  2  EE B5 43             inc linecount
004363  2  AD B5 43     	   lda linecount
004366  2  C9 06        	   cmp #6
004368  2  D0 BE                bne show_title_high_scores_loop
00436A  2               
00436A  2  A9 00            lda #0			; Rotating message counter
00436C  2  85 72            sta $72
00436E  2               
00436E  2                   show_title_wait_loop:
00436E  2               
00436E  2  A9 96                lda #150		; Delay
004370  2  8D 5A 55             sta L5785
004373  2               
004373  2  A4 72        	ldy $72			; Print string
004375  2  BE C6 42     	ldx message_tab_lb,y
004378  2  B9 CC 42     	lda message_tab_hb,y
00437B  2  A8           	tay
00437C  2  20 A3 4D     	jsr PUTSTRING
00437F  2               
00437F  2  E6 72        	inc $72			; Next string
004381  2  A5 72        	lda $72
004383  2  C9 06        	cmp #6
004385  2  F0 03                beq show_title_wait_reset_offset
004387  2               
004387  2  4C 8E 43             jmp show_title_wait_inner_loop
00438A  2               
00438A  2                       show_title_wait_reset_offset:
00438A  2  A9 00                lda #0			; Reset rotating pointer
00438C  2  85 72                sta $72
00438E  2               
00438E  2                       show_title_wait_inner_loop:
00438E  2  20 BE 43             jsr wait_for_vsync	; Wait for flyback
004391  2               
004391  2  CE 5A 55             dec L5785		; Dec delaycounter
004394  2  F0 D8                beq show_title_wait_loop
004396  2               
004396  2                       show_title_wait_loop_no_update:
004396  2  20 AA 4E     		jsr joyget
004399  2  29 10        		and #$10		; fire button pressed?
00439B  2               
00439B  2               ;        lda #128
00439B  2               ;        ldx #0
00439B  2               ;        jsr $fff4
00439B  2               ;        cpx #0              ; fire button pressed?
00439B  2  F0 08                beq show_title_no_joystick
00439D  2               
00439D  2  A9 01                lda #1              ; enable joystick support
00439F  2  8D 53 55             sta L577e
0043A2  2  4C B3 43             jmp show_title_exit
0043A5  2               
0043A5  2                       show_title_no_joystick:
0043A5  2  A2 00                ldx #0            	; SPACE
0043A7  2  20 60 4A             jsr check_key		; If Space, exit rotating text loop
0043AA  2  C0 FF                cpy #255
0043AC  2  D0 E0                bne show_title_wait_inner_loop
0043AE  2               
0043AE  2  A9 00            lda #0              ; disable joystick support
0043B0  2  8D 53 55         sta L577e
0043B3  2               
0043B3  2                   show_title_exit:
0043B3  2  18               clc
0043B4  2  60               rts
0043B5  2               
0043B5  2  00           linecount:		.byte 0
0043B6  2               
0043B6  2               ;----------------------------------
0043B6  2               ;Show bottom testline
0043B6  2               ;----------------------------------
0043B6  2               show_input_message:
0043B6  2               
0043B6  2  A2 3A        	ldx #<input_message
0043B8  2  A0 42        	ldy #>input_message
0043BA  2  20 A3 4D     	jsr PUTSTRING
0043BD  2               
0043BD  2  60               rts
0043BE  2               
0043BE  2               wait_for_vsync:
0043BE  2               
0043BE  2  4C 66 FE     	jmp $fe66
0043C1  2               
0043C1  2  01 0C 20 20  game_over_vdu_bytes: .byte green+1,12, "             ",0
0043C5  2  20 20 20 20  
0043C9  2  20 20 20 20  
0043D1  2  01 0D 20 54                       .byte green+1,13, " The journey ",0
0043D5  2  68 65 20 6A  
0043D9  2  6F 75 72 6E  
0043E1  2  01 0E 20 20                       .byte green+1,14, "   is over   ",0
0043E5  2  20 69 73 20  
0043E9  2  6F 76 65 72  
0043F1  2  01 0F 20 20                       .byte green+1,15, "             ",0,$ff
0043F5  2  20 20 20 20  
0043F9  2  20 20 20 20  
004402  2               
004402  2               delay:
004402  2               
004402  2                   delay_loop:
004402  2               
004402  2  20 BE 43             jsr wait_for_vsync
004405  2  CE 5A 55             dec L5785
004408  2  D0 F8                bne delay_loop
00440A  2               
00440A  2  60               rts
00440B  2               
00440B  2               show_game_over:
00440B  2               
00440B  2  A9 80            lda #128
00440D  2  8D 5A 55         sta L5785
004410  2  20 02 44         jsr delay
004413  2               
004413  2  A2 C1        	ldx #<game_over_vdu_bytes
004415  2  A0 43        	ldy #>game_over_vdu_bytes
004417  2  20 A3 4D     	jsr PUTSTRING
00441A  2               
00441A  2  A9 C0            lda #192
00441C  2  8D 5A 55         sta L5785
00441F  2  20 02 44         jsr delay
004422  2               
004422  2  60               rts
004423  2               
004423  2  42 03 45 78  end_of_level_bytes1:	.byte yellow+2,3, "Extra  bonus",0
004427  2  74 72 61 20  
00442B  2  20 62 6F 6E  
004432  2  49 05 78 20  			.byte yellow+9,5,"x 9",0,$ff
004436  2  39 00 FF     
004439  2  03 14 4D 79  end_of_level_bytes2:	.byte green+3,20, "My journey",0
00443D  2  20 6A 6F 75  
004441  2  72 6E 65 79  
004446  2  03 16 63 6F  			.byte green+3,22,"continues!",0,$ff
00444A  2  6E 74 69 6E  
00444E  2  75 65 73 21  
004454  2               
004454  2               show_end_of_level_screen:
004454  2               
004454  2                   ; Draw a decorative room.
004454  2               
004454  2  A2 80            ldx #$80
004456  2  20 F2 47         jsr cls
004459  2  20 DE 2B         jsr make_empty_room
00445C  2               
00445C  2  A2 05            ldx #5
00445E  2                   end_of_level_h_walls_loop:
00445E  2               
00445E  2  A9 03                lda #3
004460  2  9D 87 55             sta L579c+22,x
004463  2  9D B9 55             sta L579c+72,x
004466  2  CA                   dex
004467  2  10 F5                bpl end_of_level_h_walls_loop
004469  2               
004469  2  A2 1E            ldx #30
00446B  2                   end_of_level_v_walls_loop:
00446B  2               
00446B  2  A9 03                lda #3
00446D  2  9D 91 55             sta L579c+32,x
004470  2  9D 96 55             sta L579c+37,x
004473  2  8A                   txa
004474  2  38                   sec
004475  2  E9 0A                sbc #10
004477  2  AA                   tax
004478  2  10 F1                bpl end_of_level_v_walls_loop
00447A  2               
00447A  2  20 0B 30         jsr plot_room_tiles
00447D  2               
00447D  2  A2 00            ldx #0
00447F  2                   end_of_level_text_loop1:
00447F  2               
00447F  2               
00447F  2  A2 23        	ldx #<end_of_level_bytes1
004481  2  A0 44        	ldy #>end_of_level_bytes1
004483  2  20 A3 4D     	jsr PUTSTRING
004486  2               
004486  2                   ; Count the number of rooms explored.
004486  2  A2 00            ldx #0
004488  2  A9 00            lda #0
00448A  2  85 8D            sta $8d
00448C  2  85 8E            sta $8e
00448E  2                   end_of_level_room_count_loop:
00448E  2               
00448E  2  BD 55 50             lda L5200,x
004491  2  29 80                and #$80
004493  2  F0 0F                beq end_of_level_room_count_loop_next
004495  2               
004495  2  F8                   sed
004496  2  A5 8D                lda $8d
004498  2  69 01                adc #1
00449A  2  85 8D                sta $8d
00449C  2  A5 8E                lda $8e
00449E  2  69 00                adc #0
0044A0  2  85 8E                sta $8e
0044A2  2  D8                   cld
0044A3  2  18                   clc
0044A4  2               
0044A4  2                       end_of_level_room_count_loop_next:
0044A4  2  E8                   inx
0044A5  2  E0 79                cpx #121
0044A7  2  D0 E5                bne end_of_level_room_count_loop
0044A9  2               
0044A9  2                   ; Position the player so that we can perform an animation.
0044A9  2  20 81 45         jsr position_player_set_up_plotting
0044AC  2               
0044AC  2  A5 8D            lda $8d
0044AE  2  85 70            sta $70
0044B0  2  A5 8E            lda $8e
0044B2  2  85 71            sta $71
0044B4  2  20 48 45         jsr write_bonus
0044B7  2               
0044B7  2  A9 00            lda #0      ; reset motion counter
0044B9  2  8D 63 55         sta L578e
0044BC  2               
0044BC  2                   show_end_of_level_bonus_loop:
0044BC  2               
0044BC  2  20 BE 43             jsr wait_for_vsync
0044BF  2               
0044BF  2  18                   clc
0044C0  2  AD 63 55             lda L578e
0044C3  2  29 0F                and #15
0044C5  2  D0 17                bne end_of_level_no_animation
0044C7  2               
0044C7  2                       ; Animate the player.
0044C7  2               
0044C7  2  20 B5 32             jsr reset_unplot_buffer
0044CA  2  20 A6 32             jsr reset_plot_buffer
0044CD  2               
0044CD  2                       ; $74,$75 should be unchanged
0044CD  2  20 53 31             jsr unplot_character
0044D0  2               
0044D0  2  AD D6 4F             lda L5280+$1
0044D3  2  49 01                eor #1
0044D5  2  8D D6 4F             sta L5280+$1
0044D8  2  20 63 31             jsr plot_character
0044DB  2               
0044DB  2  20 DE 32             jsr plot_buffer
0044DE  2               
0044DE  2                       end_of_level_no_animation:
0044DE  2  18                   clc
0044DF  2  AD 63 55             lda L578e
0044E2  2  29 03                and #3
0044E4  2  D0 29                bne end_of_level_no_countdown
0044E6  2               
0044E6  2                       ; Transfer the bonus to the score.
0044E6  2               
0044E6  2  F8                   sed
0044E7  2  38                   sec
0044E8  2  A5 8D                lda $8d
0044EA  2  E9 01                sbc #1
0044EC  2  85 8D                sta $8d
0044EE  2  85 70                sta $70
0044F0  2  A5 8E                lda $8e
0044F2  2  E9 00                sbc #0
0044F4  2  85 8E                sta $8e
0044F6  2  85 71                sta $71
0044F8  2  D8                   cld
0044F9  2  18                   clc
0044FA  2               
0044FA  2  20 48 45             jsr write_bonus
0044FD  2               
0044FD  2  A9 09                lda #9
0044FF  2  85 70                sta $70
004501  2  20 75 3E             jsr add_score
004504  2               
004504  2  A5 8D                lda $8d
004506  2  29 3F                and #$3f
004508  2  0A                   asl
004509  2  AA           	tax
00450A  2  A9 01                lda #1
00450C  2  20 A6 40             jsr play_note
00450F  2               
00450F  2                       end_of_level_no_countdown:
00450F  2  EE 63 55             inc L578e   ; update motion counter
004512  2  18                   clc
004513  2               
004513  2  A5 8D                lda $8d
004515  2  C9 00                cmp #0
004517  2  D0 A3                bne show_end_of_level_bonus_loop
004519  2               
004519  2  A5 8E                lda $8e
00451B  2  C9 00                cmp #0
00451D  2  D0 9D                bne show_end_of_level_bonus_loop
00451F  2               
00451F  2  A9 40            lda #64    ; initialise delay counter
004521  2  8D 5A 55         sta L5785
004524  2  20 02 44         jsr delay
004527  2               
004527  2  A2 00            ldx #0
004529  2                   end_of_level_text_loop2:
004529  2               
004529  2  A2 39        	ldx #<end_of_level_bytes2
00452B  2  A0 44        	ldy #>end_of_level_bytes2
00452D  2  20 A3 4D     	jsr PUTSTRING
004530  2               
004530  2  AD 5F 55         lda L578a
004533  2  C9 03            cmp #3
004535  2  10 08            bpl show_end_of_level_screen_exit
004537  2               
004537  2  A9 C0            lda #192    ; initialise delay counter
004539  2  8D 5A 55         sta L5785
00453C  2  20 02 44         jsr delay
00453F  2               
00453F  2                   show_end_of_level_screen_exit:
00453F  2  60               rts
004540  2               
004540  2  C4 05 30 30  level_bonus_vdu_bytes: .byte red+4,5,"0000",0,$ff
004544  2  30 30 00 FF  
004548  2               
004548  2               write_bonus:        ; $70,$71=value
004548  2                                   ; $72,$73=address of VDU codes
004548  2               
004548  2                   write_bonus_loop:
004548  2               
004548  2  A5 71                lda $71
00454A  2  4A                   lsr
00454B  2  4A                   lsr
00454C  2  4A                   lsr
00454D  2  4A                   lsr
00454E  2  AA                   tax
00454F  2  BD 54 3E             lda score_digits,x
004552  2  8D 42 45     	sta level_bonus_vdu_bytes+2
004555  2  A5 71                lda $71
004557  2  29 0F                and #$0f
004559  2  AA                   tax
00455A  2  BD 54 3E             lda score_digits,x
00455D  2  8D 43 45     	sta level_bonus_vdu_bytes+3
004560  2               
004560  2  A5 70                lda $70
004562  2  4A                   lsr
004563  2  4A                   lsr
004564  2  4A                   lsr
004565  2  4A                   lsr
004566  2  AA                   tax
004567  2  BD 54 3E             lda score_digits,x
00456A  2  8D 44 45     	sta level_bonus_vdu_bytes+4
00456D  2  A5 70                lda $70
00456F  2  29 0F                and #$0f
004571  2  AA                   tax
004572  2  BD 54 3E             lda score_digits,x
004575  2  8D 45 45     	sta level_bonus_vdu_bytes+5
004578  2               
004578  2  A2 40        	ldx #<level_bonus_vdu_bytes
00457A  2  A0 45        	ldy #>level_bonus_vdu_bytes
00457C  2  20 A3 4D     	jsr PUTSTRING
00457F  2  18               clc
004580  2  60               rts
004581  2               
004581  2               position_player_set_up_plotting:
004581  2               
004581  2  20 70 48         jsr reset_player_position
004584  2  20 83 3F         jsr remove_characters
004587  2               
004587  2  20 B5 32         jsr reset_unplot_buffer
00458A  2  20 A6 32         jsr reset_plot_buffer
00458D  2               
00458D  2                   ; Run on into the next routine.
00458D  2               
00458D  2               plot_the_player:
00458D  2               
00458D  2  A9 D5            lda #<L5280		; $5280 plot the player
00458F  2  85 74            sta $74
004591  2  A9 4F            lda #>L5280
004593  2  85 75            sta $75
004595  2  20 63 31         jsr plot_character
004598  2               
004598  2  20 DE 32         jsr plot_buffer
00459B  2  60               rts
00459C  2               
00459C  2  40 0B 43 6F  complete_game_vdu_bytes:  .byte yellow+0,11, "Congratulations!",0
0045A0  2  6E 67 72 61  
0045A4  2  74 75 6C 61  
0045AF  2  00 0D 20 20                            .byte  green+0,13, "  Now journey   ",0
0045B3  2  4E 6F 77 20  
0045B7  2  6A 6F 75 72  
0045C2  2  00 0F 20 20                            .byte  green+0,15, "  onward to a   ",0
0045C6  2  6F 6E 77 61  
0045CA  2  72 64 20 74  
0045D5  2  00 11 20 6E                            .byte  green+0,17, " new adventure  ",0,$ff
0045D9  2  65 77 20 61  
0045DD  2  64 76 65 6E  
0045E9  2               
0045E9  2               show_complete_game:
0045E9  2               
0045E9  2  A2 80            ldx #$80
0045EB  2  20 F2 47         jsr cls
0045EE  2               
0045EE  2  A2 9C        	ldx #<complete_game_vdu_bytes
0045F0  2  A0 45        	ldy #>complete_game_vdu_bytes
0045F2  2  20 A3 4D     	jsr PUTSTRING
0045F5  2               
0045F5  2  20 A6 41         jsr copy_completed_screen_up
0045F8  2               
0045F8  2  20 DC 42         jsr set_complete_palette
0045FB  2               
0045FB  2  A9 FF            lda #255
0045FD  2  8D 5A 55         sta L5785
004600  2               
004600  2                   show_complete_game_delay_loop:
004600  2               
004600  2  20 BE 43             jsr wait_for_vsync
004603  2               
004603  2  CE 5A 55             dec L5785
004606  2  D0 03                bne show_complete_game_no_message
004608  2               
004608  2  20 B6 43             jsr show_input_message
00460B  2               
00460B  2                       show_complete_game_no_message:
00460B  2               
00460B  2  A9 80                lda #128
00460D  2  A2 00                ldx #0
00460F  2               ;        jsr $fff4
00460F  2  E0 00                cpx #0              ; fire button pressed?
004611  2  F0 03                beq show_complete_game_no_joystick
004613  2  4C 1F 46             jmp show_complete_game_exit
004616  2               
004616  2                       show_complete_game_no_joystick:
004616  2               
004616  2  A2 00                ldx #0		; SPACE
004618  2  20 60 4A             jsr check_key
00461B  2  C0 FF                cpy #255
00461D  2  D0 E1                bne show_complete_game_delay_loop
00461F  2               
00461F  2                   show_complete_game_exit:
00461F  2  18               clc
004620  2  60               rts
004621  2               
004621  2               check_high_scores:
004621  2               
004621  2                   ; Start at the bottom of the table, moving scores down as necessary, and
004621  2                   ; write in the current score at the appropriate place.
004621  2               
004621  2  A9 5B            lda #<L5786		;$5786 current score
004623  2  85 70            sta $70
004625  2  A9 55            lda #>L5786
004627  2  85 71            sta $71
004629  2               
004629  2  A9 55            lda #<L5180		; $5180
00462B  2  85 72            sta $72
00462D  2  A9 4F            lda #>L5180
00462F  2  85 73            sta $73
004631  2               
004631  2                   check_high_scores_loop:
004631  2               
004631  2  A0 02                ldy #2
004633  2                       check_high_scores_digits_loop:
004633  2               
004633  2  B1 72                    lda ($72),y
004635  2  D1 70                    cmp ($70),y     ; existing score less than current score?
004637  2  90 14                    bcc check_high_scores_move_down
004639  2  F0 03                    beq check_high_scores_digits_next   ; keep checking digits if equal
00463B  2  4C 41 46                 jmp check_high_scores_next
00463E  2               
00463E  2                           check_high_scores_digits_next:
00463E  2  88                       dey
00463F  2  10 F2                    bpl check_high_scores_digits_loop
004641  2               
004641  2                       check_high_scores_next:
004641  2  18                   clc
004642  2  A5 72                lda $72
004644  2  69 0C                adc #12
004646  2  85 72                sta $72
004648  2  C9 9D                cmp #<(L5180+6*12)		; $e0
00464A  2  D0 E5                bne check_high_scores_loop
00464C  2               
00464C  2                   ; The player's score didn't make it into the high score table.
00464C  2  60               rts
00464D  2               
00464D  2               check_high_scores_move_down:    ; $70,$71=pointer to current score
00464D  2                                               ; $72,$73=pointer to old score
00464D  2               
00464D  2                   ; The current score exceeded the existing entry. Make a note of the
00464D  2                   ; position in the high score table, insert the player's score, and take
00464D  2                   ; the old score
00464D  2               
00464D  2  A5 72            lda $72     ; Record the position in the high score table of the
00464F  2  85 8D            sta $8d     ; player's score.
004651  2  A5 73            lda $73
004653  2  85 8E            sta $8e
004655  2               
004655  2  A9 B5            lda #<(L5180+$60)			; $51e0
004657  2  85 74            sta $74
004659  2  A9 4F            lda #>(L5180+$60)
00465B  2  85 75            sta $75
00465D  2               
00465D  2  A0 00            ldy #0
00465F  2                   insert_blank_player_name_loop:
00465F  2               
00465F  2  C0 03                cpy #3
004661  2  10 05                bpl insert_blank_player_name_score_only
004663  2               
004663  2  B1 70                lda ($70),y
004665  2  4C 6A 46             jmp insert_blank_player_name_store
004668  2               
004668  2                       insert_blank_player_name_score_only:
004668  2  A9 20                lda #32
00466A  2               
00466A  2                       insert_blank_player_name_store:
00466A  2  91 74                sta ($74),y
00466C  2  C8                   iny
00466D  2  C0 0C                cpy #12
00466F  2  D0 EE                bne insert_blank_player_name_loop
004671  2               
004671  2                   check_high_scores_move_down_loop:
004671  2               
004671  2  A0 00                ldy #0
004673  2                       check_high_scores_copy_score_and_name:
004673  2               
004673  2  B1 72                    lda ($72),y ; swap the current score with the score in the table
004675  2  AA                       tax
004676  2  B1 74                    lda ($74),y
004678  2  91 72                    sta ($72),y
00467A  2  8A                       txa
00467B  2  91 74                    sta ($74),y
00467D  2  C8                       iny
00467E  2  C0 0C                    cpy #12
004680  2  D0 F1                    bne check_high_scores_copy_score_and_name
004682  2               
004682  2  18                   clc
004683  2  A5 72                lda $72
004685  2  69 0C                adc #12
004687  2  85 72                sta $72
004689  2  C9 B5                cmp #<(L5180+$60)
00468B  2  D0 E4                bne check_high_scores_move_down_loop
00468D  2               
00468D  2                   ; Draw a decorative room.
00468D  2               
00468D  2  A2 80        	ldx #$80
00468F  2  20 F2 47     	jsr cls
004692  2  20 DE 2B     	jsr make_empty_room
004695  2               
004695  2  A9 03            lda #3
004697  2  85 76            sta $76
004699  2  85 77            sta $77
00469B  2  20 76 2B         jsr draw_top_line
00469E  2  20 AA 2B         jsr draw_bottom_line
0046A1  2  20 8C 2B         jsr draw_left_line
0046A4  2               
0046A4  2  A9 00            lda #0
0046A6  2  85 77            sta $77
0046A8  2  20 C0 2B         jsr draw_right_line
0046AB  2               
0046AB  2  20 0B 30         jsr plot_room_tiles
0046AE  2               
0046AE  2                   ; Add text characters to the room.
0046AE  2  A9 40        	lda #yellow
0046B0  2  20 D8 4D     	jsr setcolor
0046B3  2               
0046B3  2  A9 03            lda #3          ; x
0046B5  2  85 70            sta $70
0046B7  2  A9 06            lda #6          ; y
0046B9  2  85 71            sta $71
0046BB  2               
0046BB  2  A9 41            lda #65
0046BD  2  85 72            sta $72
0046BF  2               
0046BF  2  A2 03            ldx #3
0046C1  2                   plot_text_characters_loop:
0046C1  2               
0046C1  2  20 1C 48             jsr print_xy
0046C4  2               
0046C4  2  18                   clc
0046C5  2  A5 70        	lda $70
0046C7  2  69 03                adc #3
0046C9  2  85 70                sta $70
0046CB  2               
0046CB  2  CA                   dex
0046CC  2  10 0D                bpl plot_text_characters_next
0046CE  2               
0046CE  2  A9 03               lda #3
0046D0  2  85 70                sta $70
0046D2  2  18                   clc
0046D3  2  A5 71        	lda $71
0046D5  2  69 02                adc #2
0046D7  2  85 71                sta $71
0046D9  2               
0046D9  2  A2 03                ldx #3
0046DB  2               
0046DB  2                       plot_text_characters_next:
0046DB  2               
0046DB  2  E6 72                inc $72
0046DD  2  A5 72                lda $72
0046DF  2  C9 5B                cmp #91
0046E1  2  D0 DE                bne plot_text_characters_loop
0046E3  2               
0046E3  2  A9 09            lda #9
0046E5  2  85 70            sta $70
0046E7  2  A9 5F            lda #95         ; _ representing a space
0046E9  2  85 72            sta $72
0046EB  2  20 1C 48         jsr print_xy
0046EE  2               
0046EE  2  A9 0C            lda #12
0046F0  2  85 70            sta $70
0046F2  2  A9 3C            lda #60         ; < representing delete
0046F4  2  85 72            sta $72
0046F6  2  20 1C 48         jsr print_xy
0046F9  2               
0046F9  2                   ; Put the player in the centre of the room.
0046F9  2  20 81 45         jsr position_player_set_up_plotting
0046FC  2               
0046FC  2  A9 00            lda #0          ; reset motion counter
0046FE  2  8D 63 55         sta L578e
004701  2               
004701  2  A9 00            lda #0          ; not on a character
004703  2  8D 62 55         sta L578d
004706  2               
004706  2  A9 00            lda #0          ; reset the level number so that the correct tiles are used
004708  2  8D 5F 55         sta L578a
00470B  2               
00470B  2  A9 03            lda #3          ; cursor position in the high score entry held in $8d,$8e
00470D  2  85 8F            sta $8f
00470F  2               
00470F  2  A2 D0        	ldx #<high_score_vdu_bytes
004711  2  A0 47        	ldy #>high_score_vdu_bytes
004713  2  20 A3 4D     	jsr PUTSTRING
004716  2               
004716  2                   high_score_entry_loop:
004716  2               
004716  2  20 B5 32             jsr reset_unplot_buffer
004719  2  20 A6 32             jsr reset_plot_buffer
00471C  2               
00471C  2  20 AF 33             jsr move_player
00471F  2  20 BE 43     	jsr wait_for_vsync
004722  2               
004722  2                       ; Check if the player leaves the room.
004722  2  90 03                bcc high_score_entry_check_position
004724  2  4C C9 47             jmp high_score_entry_after_loop
004727  2               
004727  2                       high_score_entry_check_position:
004727  2               
004727  2  AD DA 4F             lda L5280+$5       ; dx
00472A  2  C9 02                cmp #2
00472C  2  F0 03                beq high_score_entry_maybe_aligned
00472E  2  4C B7 47             jmp high_score_entry_not_aligned
004731  2               
004731  2                       high_score_entry_maybe_aligned:
004731  2               
004731  2  AD D7 4F             lda L5280+$2       ; y
004734  2  A8                   tay
004735  2  C9 08                cmp #8
004737  2  10 7E                bpl high_score_entry_not_aligned
004739  2               
004739  2  AD D9 4F             lda L5280+$4       ; x
00473C  2  AA                   tax
00473D  2  C9 09                cmp #9
00473F  2  F0 76                beq high_score_entry_not_aligned
004741  2  29 01                and #1
004743  2  F0 72                beq high_score_entry_not_aligned
004745  2               
004745  2  AD D8 4F             lda L5280+$3       ; dy
004748  2  C9 02                cmp #2
00474A  2  30 0B                bmi high_score_entry_aligned
00474C  2  4C B7 47             jmp high_score_entry_not_aligned
00474F  2               
00474F  2  AD D7 4F             lda L5280+$2       ; y again (don't apply the touching rule to the bottom
004752  2  C9 07                cmp #7          ;          row of characters)
004754  2  F0 61                beq high_score_entry_not_aligned
004756  2               
004756  2  C8                   iny             ; we are really touching the character below
004757  2               
004757  2                       high_score_entry_aligned:
004757  2               
004757  2  AD 62 55             lda L578d
00475A  2  C9 01                cmp #1
00475C  2  F0 5E                beq high_score_entry_next
00475E  2               
00475E  2                       ; The player is aligned with a letter.
00475E  2  8A                   txa
00475F  2  38                   sec
004760  2  E9 01                sbc #1
004762  2  4A                   lsr
004763  2  85 7E                sta $7e         ; record (x - 1) / 2
004765  2               
004765  2  98                   tya             ; recall y
004766  2  38                   sec
004767  2  E9 01                sbc #1
004769  2  0A                   asl
00476A  2  0A                   asl             ; (y - 1) * 4
00476B  2  18                   clc
00476C  2               
00476C  2  65 7E                adc $7e         ; (y - 1) * 4 + (x - 1) / 2
00476E  2  69 41                adc #65
004770  2  85 7E                sta $7e         ; record the ASCII code
004772  2               
004772  2  C9 5B                cmp #91
004774  2  30 08                bmi insert_character
004776  2               
004776  2  C9 5C                cmp #92
004778  2  F0 17                beq delete_character
00477A  2               
00477A  2                       ; Insert a space.
00477A  2  A9 20                lda #32
00477C  2  85 7E                sta $7e
00477E  2               
00477E  2                       insert_character:
00477E  2  A5 8F                lda $8f
004780  2  C9 0C                cmp #12
004782  2  10 2B                bpl high_score_entry_pressed
004784  2               
004784  2  A8                   tay             ; insert the character
004785  2  A5 7E                lda $7e
004787  2  91 8D                sta ($8d),y
004789  2  20 0F 48             jsr print_high_score_character
00478C  2               
00478C  2  E6 8F                inc $8f
00478E  2  4C AF 47             jmp high_score_entry_pressed
004791  2               
004791  2                       delete_character:
004791  2  A5 8F                lda $8f
004793  2  C9 04                cmp #4
004795  2  30 18                bmi high_score_entry_pressed
004797  2               
004797  2  C9 0C                cmp #12
004799  2  F0 08                beq high_score_delete_previous_character
00479B  2               
00479B  2  A8                   tay
00479C  2  A9 20                lda #32         ; insert a space
00479E  2  91 8D                sta ($8d),y
0047A0  2  20 0F 48             jsr print_high_score_character
0047A3  2               
0047A3  2                       high_score_delete_previous_character:
0047A3  2  C6 8F                dec $8f
0047A5  2  A5 8F                lda $8f
0047A7  2  A8                   tay             ; insert a space
0047A8  2  A9 20                lda #32
0047AA  2  91 8D                sta ($8d),y
0047AC  2  20 0F 48             jsr print_high_score_character
0047AF  2               
0047AF  2                       high_score_entry_pressed:
0047AF  2  A9 01                lda #1
0047B1  2  8D 62 55             sta L578d
0047B4  2  4C BC 47             jmp high_score_entry_next
0047B7  2               
0047B7  2                       high_score_entry_not_aligned:
0047B7  2  A9 00                lda #0
0047B9  2  8D 62 55             sta L578d
0047BC  2               
0047BC  2                       high_score_entry_next:
0047BC  2               
0047BC  2  20 BE 43             jsr wait_for_vsync
0047BF  2  20 DE 32             jsr plot_buffer
0047C2  2               
0047C2  2  4C 16 47             jmp high_score_entry_loop
0047C5  2               
0047C5  2  EE 63 55             inc L578e
0047C8  2  18                   clc
0047C9  2               
0047C9  2                   high_score_entry_after_loop:
0047C9  2  18               clc
0047CA  2               
0047CA  2  A2 80        	ldx #$80
0047CC  2  20 F2 47         jsr cls
0047CF  2               
0047CF  2  60               rts
0047D0  2               
0047D0  2  C0 01 45 6E  high_score_vdu_bytes: .byte red+0,1, "Enter your name!",0
0047D4  2  74 65 72 20  
0047D8  2  79 6F 75 72  
0047E3  2  43 16 3E 20                        .byte yellow+3,22, ">         <",0,$ff
0047E7  2  20 20 20 20  
0047EB  2  20 20 20 20  
0047F2  2               
0047F2  2               cls:
0047F2  2  86 91        	stx $91
0047F4  2  A9 F0        	lda #$f0
0047F6  2  8D 00 B0     	sta $b000
0047F9  2  A9 00        	lda #<$8000
0047FB  2  85 90        	sta $90
0047FD  2  A9 00        	lda #$00
0047FF  2               
0047FF  2               yloop:
0047FF  2  A0 00        	ldy #0
004801  2               xloop:
004801  2  91 90        	sta ($90),y
004803  2  C8           	iny
004804  2  D0 FB        	bne xloop
004806  2  E6 91        	inc $91
004808  2  A6 91        	ldx $91
00480A  2  E0 98        	cpx #$98
00480C  2  D0 F1        	bne yloop
00480E  2               
00480E  2  60           	rts
00480F  2               
00480F  2               print_high_score_character:  ; A=ASCII code
00480F  2               
00480F  2  18               clc
004810  2  85 72            sta $72         ; store the character
004812  2  A5 8F            lda $8f
004814  2  69 01            adc #1
004816  2  85 70            sta $70         ; store the x position of the character
004818  2  A9 16            lda #22
00481A  2  85 71            sta $71
00481C  2                   ; Run on into the next routine.
00481C  2               
00481C  2               print_xy:
00481C  2               
00481C  2  8E 2C 48     	stx x_tmp
00481F  2  A6 70        	ldx $70
004821  2  A4 71        	ldy $71
004823  2  A5 72        	lda $72
004825  2  20 EE 4D     	jsr PUTCHAR
004828  2  AE 2C 48     	ldx x_tmp
00482B  2  60           	rts
00482C  2               
00482C  2  00           x_tmp:		.byte 0
00482D  2               
00482D  2               disable_sound:  ; X=1 (disable); X=0 (enable)
00482D  2  8E D5 55     	stx L579d
004830  2  60           	rts
004831  2               
004831  2  41 00 53 63  status_vdu_bytes: .byte yellow+1,0,"Score",0,green+8,0, "Strength",0,$ff
004835  2  6F 72 65 00  
004839  2  08 00 53 74  
004845  2               
004845  2               start_new_game:
004845  2               
004845  2                   ; Clear the screen.
004845  2  A2 80        	ldx #$80
004847  2  20 F2 47         jsr cls
00484A  2               
00484A  2                   ; Set the level.
00484A  2  A9 00            lda #0
00484C  2  8D 5F 55         sta L578a
00484F  2               
00484F  2                   ; Set the score.
00484F  2  A9 00            lda #0
004851  2  8D 5B 55         sta L5786
004854  2  A9 00            lda #0
004856  2  8D 5C 55         sta L5786+1
004859  2  A9 00            lda #0
00485B  2  8D 5D 55         sta L5786+2
00485E  2               
00485E  2                   ; Blank the screen now because it will be blanked before the room is shown
00485E  2                   ; and otherwise the strength bar will show briefly.
00485E  2               
00485E  2                   ; Set the player's strength.
00485E  2  A9 00            lda #0
004860  2  8D 59 55         sta L5784
004863  2  A9 40            lda #64
004865  2  85 70            sta $70
004867  2  20 CA 3E         jsr add_strength		; ok
00486A  2               
00486A  2                   ; Set the projectile type.
00486A  2  A9 00            lda #0
00486C  2  8D 5E 55         sta L5789
00486F  2               
00486F  2  60               rts
004870  2               
004870  2               reset_player_position:
004870  2               
004870  2  A9 01            lda #1      ; player
004872  2  8D D5 4F         sta L5280
004875  2  A9 06            lda #6      ; down (first frame)
004877  2  8D D6 4F         sta L5280+$1
00487A  2  A9 04            lda #4      ; y=4
00487C  2  8D D7 4F         sta L5280+$2
00487F  2  A9 02            lda #2      ; dy=2
004881  2  8D D8 4F         sta L5280+$3
004884  2  A9 04            lda #4      ; x=4
004886  2  8D D9 4F         sta L5280+$4
004889  2  A9 02            lda #2      ; dx=3
00488B  2  8D DA 4F         sta L5280+$5
00488E  2               
00488E  2  60               rts
00488F  2               
00488F  2               start_level:
00488F  2               
00488F  2                   ; Clear the item/player flags.
00488F  2  A9 00            lda #0
004891  2  8D 55 55         sta L5780
004894  2               
004894  2                   ; Set current room.
004894  2               
004894  2  AE 5F 55         ldx L578a
004897  2  BD 0B 2B         lda start_rooms_y,x
00489A  2  8D 57 55         sta L5782
00489D  2  BD 07 2B         lda start_rooms_x,x
0048A0  2  8D 58 55         sta L5782+1
0048A3  2               
0048A3  2                   ; Set the player's position.
0048A3  2               
0048A3  2  20 70 48         jsr reset_player_position		; ok
0048A6  2               
0048A6  2                   ; Reset the weapon counter.
0048A6  2  A9 00            lda #0
0048A8  2  8D 54 55         sta L577f
0048AB  2               
0048AB  2                   ; Fill the treasure table with objects.
0048AB  2  AE 5F 55         ldx L578a   ; level
0048AE  2  BD 1F 2B         lda key_rooms,x
0048B1  2  85 80            sta $80
0048B3  2               
0048B3  2  AE 5F 55         ldx L578a   ; level
0048B6  2  BD 03 2B         lda seeds,x
0048B9  2  69 01            adc #1
0048BB  2  29 1F            and #31
0048BD  2  85 7C            sta $7c
0048BF  2  18               clc
0048C0  2  BD 03 2B         lda seeds,x
0048C3  2  69 02            adc #2
0048C5  2  29 1F            and #31
0048C7  2  85 7D            sta $7d
0048C9  2  18               clc
0048CA  2               
0048CA  2  AD 5F 55         lda L578a   ; create an upper limit on the weapon type found in this level
0048CD  2  69 02            adc #2
0048CF  2  8D 56 55         sta L5781
0048D2  2  18               clc
0048D3  2               
0048D3  2  A9 55            lda #<L5200		; $5200 is objects/treasure level
0048D5  2  85 8E            sta $8e
0048D7  2  A9 50            lda #>L5200
0048D9  2  85 8F            sta $8f
0048DB  2               
0048DB  2  A0 00            ldy #0
0048DD  2                   start_level_add_treasure_loop:
0048DD  2               
0048DD  2  C4 80                cpy $80                         ; check for the key room
0048DF  2  D0 05                bne start_level_add_treasure_item
0048E1  2               
0048E1  2  A9 05                lda #5                          ; the value to store is type + 1
0048E3  2  4C 15 49             jmp start_level_add_treasure_store
0048E6  2               
0048E6  2                       start_level_add_treasure_item:
0048E6  2  18                   clc
0048E7  2  20 43 2B             jsr unlimited_values
0048EA  2  29 0F                and #$0f
0048EC  2  C9 00                cmp #0
0048EE  2  F0 22                beq start_level_add_treasure_none
0048F0  2               
0048F0  2  18                   clc
0048F1  2  85 8C                sta $8c
0048F3  2  98                   tya
0048F4  2  65 8C                adc $8c
0048F6  2  29 1F                and #31
0048F8  2  18                   clc
0048F9  2  AA                   tax
0048FA  2  BD 23 2B             lda treasure_table,x
0048FD  2               
0048FD  2  C9 04                cmp #4
0048FF  2  30 06                bmi start_level_add_treasure_weapon
004901  2               
004901  2  18                   clc
004902  2  69 01                adc #1
004904  2  4C 15 49             jmp start_level_add_treasure_store
004907  2               
004907  2                       start_level_add_treasure_weapon:
004907  2               
004907  2                       ; Only add weapons with types that equal the level number or exceed it
004907  2                       ; by one.
004907  2  CD 56 55             cmp L5781
00490A  2  B0 06                bcs start_level_add_treasure_none
00490C  2               
00490C  2  18                   clc
00490D  2  69 01                adc #1                              ; store values 0-8 as values 1-9
00490F  2  4C 15 49             jmp start_level_add_treasure_store
004912  2               
004912  2                       start_level_add_treasure_none:
004912  2  18                   clc
004913  2  A9 00                lda #0                  ; do not put treasure in this room
004915  2               
004915  2                       start_level_add_treasure_store:
004915  2  18                   clc
004916  2  91 8E                sta ($8e),y             ; add the item to the table
004918  2               
004918  2  C8                   iny
004919  2  C0 79                cpy #121
00491B  2  30 C0                bmi start_level_add_treasure_loop
00491D  2               
00491D  2                   ; Write the status text.
00491D  2  A9 01        	lda #1
00491F  2  8D 6C 3E     	sta score_nr+1
004922  2               
004922  2  A2 31        	ldx #<status_vdu_bytes
004924  2  A0 48        	ldy #>status_vdu_bytes
004926  2  20 A3 4D     	jsr PUTSTRING
004929  2               
004929  2  20 8F 3E         jsr write_score
00492C  2               
00492C  2  18               clc
00492D  2  60               rts
00492E  2               
00492E  2               ;-----------------------------
00492E  2               ;Main entry
00492E  2               ;-----------------------------
00492E  2               main:
00492E  2  20 BB 41         jsr init
004931  2               
004931  2                   main_loop:
004931  2               
004931  2  20 0A 43             jsr show_title
004934  2               
004934  2  20 45 48             jsr start_new_game
004937  2               
004937  2                       level_loop:
004937  2               
004937  2  20 8F 48                 jsr start_level
00493A  2               
00493A  2                           game_loop:
00493A  2               
00493A  2  20 83 3F                     jsr remove_characters
00493D  2  20 B5 32                     jsr reset_unplot_buffer
004940  2  20 A6 32                     jsr reset_plot_buffer
004943  2               
004943  2  AD 57 55                     lda L5782       ; current room (y)
004946  2  85 78                        sta $78
004948  2  AD 58 55                     lda L5782+1       ; current room (x)
00494B  2  85 79                        sta $79
00494D  2               
00494D  2  20 FE 2F                     jsr plot_room
004950  2               
004950  2  20 65 2E                     jsr create_enemy_positions
004953  2  20 D6 2D                     jsr add_treasure
004956  2               
004956  2  20 8D 45                     jsr plot_the_player
004959  2               
004959  2  A9 00                        lda #0          ; reset projectile counter
00495B  2  8D 62 55                     sta L578d
00495E  2               
00495E  2  A9 00                        lda #0          ; reset motion counter
004960  2  8D 63 55                     sta L578e
004963  2               
004963  2  A9 3F                        lda #63         ; reset generation counter
004965  2  8D 64 55                     sta L578f
004968  2               
004968  2                               room_loop:
004968  2  20 B5 32                         jsr reset_unplot_buffer
00496B  2  20 A6 32                         jsr reset_plot_buffer
00496E  2               
00496E  2  20 78 3D                         jsr move_characters
004971  2  20 85 3C                         jsr move_projectile
004974  2               
004974  2  AD 55 55                         lda L5780   ; is player out of strength ($40), leaving the
004977  2  29 C2                            and #$c2    ; level (0x80) or completing the game (0x02)?
004979  2  F0 33                            beq room_loop_player_move
00497B  2  18                               clc
00497C  2               
00497C  2  CE 5A 55                         dec L5785           ; leave the loop when the delay
00497F  2  D0 03                            bne room_loop_delay_next
004981  2  4C 17 4A                         jmp after_room_loop ; counter is about to reset
004984  2               
004984  2                                   room_loop_delay_next:
004984  2               
004984  2  AD D6 4F                         lda L5280+$1           ; leave the loop when the player demise
004987  2  C9 0B                            cmp #11             ; animation has finished
004989  2  F0 36                            beq room_loop_after_player_move
00498B  2  18                               clc
00498C  2               
00498C  2  AD 63 55                         lda L578e
00498F  2  29 07                            and #7
004991  2  D0 2E                            bne room_loop_after_player_move
004993  2               
004993  2  AD 55 55                         lda L5780   ; skip the animation if leaving the level or
004996  2  29 82                            and #$82    ; completing the game
004998  2  D0 27                            bne room_loop_after_player_move
00499A  2               
00499A  2                                   ; Show the demise animation when appropriate.
00499A  2               
00499A  2  A9 D5                            lda #<L5280		; $5280
00499C  2  85 74                            sta $74
00499E  2  A9 4F                            lda #>L5280
0049A0  2  85 75                            sta $75
0049A2  2               
0049A2  2  20 53 31                         jsr unplot_character
0049A5  2               
0049A5  2  EE D6 4F                         inc L5280+$1
0049A8  2  20 63 31                         jsr plot_character
0049AB  2  4C C1 49                         jmp room_loop_after_player_move
0049AE  2               
0049AE  2                                   room_loop_player_move:
0049AE  2               
0049AE  2                                   ; See if it is time to generate a new enemy.
0049AE  2  AD 64 55                         lda L578f
0049B1  2  C9 00                            cmp #0
0049B3  2  D0 03                            bne no_emerge_characters
0049B5  2  20 51 3D                         jsr emerge_characters
0049B8  2               
0049B8  2                                   no_emerge_characters:
0049B8  2  18                               clc
0049B9  2               
0049B9  2  20 21 36                         jsr check_fire_key
0049BC  2  20 AF 33                         jsr move_player
0049BF  2  B0 56                            bcs after_room_loop     ; check if we are leaving the level
0049C1  2               
0049C1  2                                   room_loop_after_player_move:
0049C1  2  18                               clc
0049C2  2               
0049C2  2  20 66 FE     			jsr $fe66		; wait for vertical sync
0049C5  2  20 DE 32                         jsr plot_buffer
0049C8  2               
0049C8  2  A2 3B                            ldx #$3b            ; Escape key check
0049CA  2  20 60 4A                         jsr check_key
0049CD  2  C0 FF                            cpy #255
0049CF  2  F0 78                            beq main_loop_play_again
0049D1  2               
0049D1  2  A2 33                            ldx #$33            ; S key check
0049D3  2  20 60 4A                         jsr check_key
0049D6  2  C0 FF                            cpy #255
0049D8  2  D0 08                            bne no_set_sound
0049DA  2               
0049DA  2  A2 00                            ldx #0
0049DC  2  20 2D 48                         jsr disable_sound
0049DF  2  4C F0 49                         jmp after_sound_checks
0049E2  2               
0049E2  2                                   no_set_sound:
0049E2  2               
0049E2  2  A2 31                            ldx #$31            ; Q key check
0049E4  2  20 60 4A                         jsr check_key
0049E7  2  C0 FF                            cpy #255
0049E9  2  D0 05                            bne after_sound_checks
0049EB  2               
0049EB  2  A2 01                            ldx #1
0049ED  2  20 2D 48                         jsr disable_sound
0049F0  2               
0049F0  2                                   after_sound_checks:
0049F0  2               
0049F0  2  A2 30                            ldx #$30            ; P key check
0049F2  2  20 60 4A                         jsr check_key
0049F5  2  C0 FF                            cpy #255
0049F7  2  D0 09                            bne no_pause
0049F9  2               
0049F9  2                                   pause_loop:
0049F9  2               
0049F9  2  A2 2F                                ldx #$2f         ; O key check
0049FB  2  20 60 4A                             jsr check_key
0049FE  2  C0 FF                                cpy #255
004A00  2  D0 F7                                bne pause_loop
004A02  2               
004A02  2                                   no_pause:
004A02  2  18                               clc
004A03  2               
004A03  2  AD 62 55                         lda L578d
004A06  2  C9 00                            cmp #0
004A08  2  F0 03                            beq room_loop_no_update_projectile_counter
004A0A  2               
004A0A  2  CE 62 55                         dec L578d
004A0D  2               
004A0D  2                                   room_loop_no_update_projectile_counter:
004A0D  2               
004A0D  2  CE 64 55                         dec L578f   ; update generation counter
004A10  2               
004A10  2  EE 63 55                         inc L578e   ; update motion counter
004A13  2  18                               clc
004A14  2  4C 68 49                         jmp room_loop
004A17  2               
004A17  2                               after_room_loop:
004A17  2  18                           clc
004A18  2               
004A18  2  AD 55 55                     lda L5780
004A1B  2  29 80                        and #$80
004A1D  2  D0 11                        bne exit_level
004A1F  2               
004A1F  2  AD 55 55                     lda L5780
004A22  2  29 40                        and #$40
004A24  2  D0 14                        bne game_over
004A26  2               
004A26  2  AD 55 55                     lda L5780
004A29  2  29 02                        and #$02
004A2B  2  D0 13                        bne complete_game
004A2D  2               
004A2D  2  4C 3A 49                     jmp game_loop
004A30  2               
004A30  2                           exit_level:
004A30  2               
004A30  2  20 54 44                 jsr show_end_of_level_screen
004A33  2               
004A33  2  EE 5F 55                 inc L578a
004A36  2  18                       clc
004A37  2  4C 37 49                 jmp level_loop
004A3A  2               
004A3A  2                           game_over:
004A3A  2  20 0B 44                 jsr show_game_over
004A3D  2  4C 49 4A                 jmp main_loop_play_again
004A40  2               
004A40  2                           complete_game:
004A40  2  20 54 44                 jsr show_end_of_level_screen
004A43  2  20 E9 45                 jsr show_complete_game
004A46  2  4C 49 4A                 jmp main_loop_play_again
004A49  2               
004A49  2                       main_loop_play_again:
004A49  2  A2 80        	ldx #$80
004A4B  2  20 F2 47             jsr cls
004A4E  2               
004A4E  2                       ; Check the score against the high scores.
004A4E  2  20 21 46             jsr check_high_scores
004A51  2               
004A51  2  4C 31 49             jmp main_loop
004A54  2               
004A54  2                   exit:
004A54  2  A9 00        	lda #0
004A56  2  8D 00 B0     	sta $b000
004A59  2  A9 0C        	lda #12
004A5B  2  20 F4 FF     	jsr $fff4
004A5E  2               
004A5E  2  18           	clc
004A5F  2  60               rts
004A60  2               
004A60  1               	.include "scankey.inc"
004A60  2               ;------------------------------------------------
004A60  2               ; Scankey X
004A60  2               ; - X = scancode same as $FE71
004A60  2               ; - Exit -> Y=255 = key pressed
004A60  2               ;           Y=0   = key not pressed
004A60  2               ;------------------------------------------------
004A60  2               
004A60  2               scankey:
004A60  2  8A           	txa
004A61  2  C9 80        	cmp #$80 ; Scan CTRL
004A63  2  D0 0A        	bne sk10
004A65  2  AD 01 B0     	lda $b001
004A68  2  29 40        	and #$40
004A6A  2  D0 5A        	bne sk4
004A6C  2  4C C3 4A     	jmp sk13
004A6F  2               sk10:
004A6F  2  C9 81        	cmp #$81 ; Scan REPT
004A71  2  D0 0A        	bne sk11
004A73  2  AD 02 B0     	lda $b002
004A76  2  29 40        	and #$40
004A78  2  D0 4C        	bne sk4
004A7A  2  4C C3 4A     	jmp sk13
004A7D  2               
004A7D  2               sk11:
004A7D  2  C9 82        	cmp #$82 ; Scan SHIFT
004A7F  2  D0 0A        	bne sk12
004A81  2  AD 01 B0     	lda $b001
004A84  2  29 80        	and #$80
004A86  2  D0 3E        	bne sk4
004A88  2  4C C3 4A     	jmp sk13
004A8B  2               
004A8B  2               sk12:
004A8B  2  A2 00        	ldx #0
004A8D  2               sk1:
004A8D  2  C9 0A        	cmp #10
004A8F  2  90 07        	bcc sk5
004A91  2  E8           	inx
004A92  2  38           	sec
004A93  2  E9 0A        	sbc #10
004A95  2  4C 8D 4A     	jmp sk1
004A98  2               sk5:
004A98  2  49 FF        	eor #$ff
004A9A  2  18           	clc
004A9B  2  69 0A        	adc #10
004A9D  2  8D C9 4A     	sta keyrow
004AA0  2               
004AA0  2  A9 01        	lda #1
004AA2  2  8D CA 4A     	sta keycol
004AA5  2               
004AA5  2  AD 00 B0     	lda $b000
004AA8  2  29 F0        	and #$f0
004AAA  2  0D C9 4A     	ora keyrow
004AAD  2  8D 00 B0     	sta $b000
004AB0  2               sk3:
004AB0  2  E0 00        	cpx #0     ; Set keycol mask
004AB2  2  F0 07        	beq sk2
004AB4  2  CA           	dex
004AB5  2  0E CA 4A     	asl keycol
004AB8  2  4C B0 4A     	jmp sk3
004ABB  2               sk2:
004ABB  2  AD 01 B0     	lda $b001  ; Read keycol
004ABE  2  2D CA 4A     	and keycol
004AC1  2  D0 03        	bne sk4
004AC3  2               sk13:
004AC3  2  A0 FF        	ldy #255
004AC5  2  60           	rts
004AC6  2               sk4:
004AC6  2  A0 00        	ldy #0
004AC8  2  60           	rts
004AC9  2               
004AC9  2  00           keyrow:  .byte 0
004ACA  2  00           keycol:  .byte 0
004ACB  2               
004ACB  2               
004ACB  1               	.include "tapecode.oph"
004ACB  2               ; Copyright (C) 2011 David Boddie <david@boddie.org.uk>
004ACB  2               ;
004ACB  2               ; This program is free software: you can redistribute it and/or modify
004ACB  2               ; it under the terms of the GNU General Public License as published by
004ACB  2               ; the Free Software Foundation, either version 3 of the License, or
004ACB  2               ; (at your option) any later version.
004ACB  2               ;
004ACB  2               ; This program is distributed in the hope that it will be useful,
004ACB  2               ; but WITHOUT ANY WARRANTY; without even the implied warranty of
004ACB  2               ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
004ACB  2               ; GNU General Public License for more details.
004ACB  2               ;
004ACB  2               ; You should have received a copy of the GNU General Public License
004ACB  2               ; along with this program.  If not, see <http://www.gnu.org/licenses/>.
004ACB  2               
004ACB  2               ;.org $1e00
004ACB  2               ;.include "mapcode.oph"
004ACB  2               
004ACB  2  33 63 93 E3  tile_addresses_low:  .byte <flowers,<leaf1,<leaf2,<exit1,<exit2,<finalexit1,<finalexit2
004ACF  2  13 43 73     
004AD2  2  4B 4B 4B 4C  tile_addresses_high: .byte >flowers,>leaf1,>leaf2,>exit1,>exit2,>finalexit1,>finalexit2
004AD6  2  4D 4D 4D     
004AD9  2               
004AD9  2  D6 F6 16 36  player_direction_chars_low: .byte <left1,<left2,<right1,<right2,<up1,<up2
004ADD  2  56 76        
004ADF  2  96 B6 D6 F6                              .byte <down1,<down2,<demise1,<demise2,<demise3,<demise4
004AE3  2  16 36        
004AE5  2  5D 5D 5E 5E  player_direction_chars_high: .byte >left1,>left2,>right1,>right2,>up1,>up2
004AE9  2  5E 5E        
004AEB  2  5E 5E 5E 5E                               .byte >down1,>down2,>demise1,>demise2,>demise3,>demise4
004AEF  2  5F 5F        
004AF1  2               
004AF1  2  D6 FA 1E 42  enemy_direction_chars_low:  .byte <birdld1,<birdld2,<birdld3,<birdld4,<birdrd1,<birdrd2,<birdrd3,<birdrd4
004AF5  2  66 8A AE D2  
004AF9  2  5F 5F 60 60  enemy_direction_chars_high: .byte >birdld1,>birdld2,>birdld3,>birdld4,>birdrd1,>birdrd2,>birdrd3,>birdrd4
004AFD  2  60 60 60 60  
004B01  2               
004B01  2  76 9A BE E2  emerge_explode_chars_low:  .byte <emerge1,<emerge2,<emerge3,<emerge4,<explode1,<explode2,<explode3,<explode4
004B05  2  06 2A 4E 72  
004B09  2  65 65 65 65  emerge_explode_chars_high: .byte >emerge1,>emerge2,>emerge3,>emerge4,>explode1,>explode2,>explode3,>explode4
004B0D  2  66 66 66 66  
004B11  2               
004B11  2  96 BA DE 02  item_chars_low:  .byte <weapons1,<weapons2,<weapons3,<weapons4,<key,<chest,<statue,<jewel,<health
004B15  2  26 4A 6E 92  
004B19  2  B6           
004B1A  2  66 66 66 67  item_chars_high: .byte >weapons1,>weapons2,>weapons3,>weapons4,>key,>chest,>statue,>jewel,>health
004B1E  2  67 67 67 67  
004B22  2  67           
004B23  2               
004B23  2  56 66 76 86  projectile_chars_low: .byte <ball1,<ball2,<boomerang1,<boomerang2,<mace1,<mace2,<fire1,<fire2
004B27  2  96 A6 B6 C6  
004B2B  2  5F 5F 5F 5F  projectile_chars_high: .byte >ball1,>ball2,>boomerang1,>boomerang2,>mace1,>mace2,>fire1,>fire2
004B2F  2  5F 5F 5F 5F  
004B33  2               
004B33  1               	.include "sprites.inc"
004B33  2               flowers:
004B33  2  8A 28 A0             .byte $8A,$28,$A0
004B36  2  2A 22 A2             .byte $2A,$22,$A2
004B39  2  A6 A2 22             .byte $A6,$A2,$22
004B3C  2  95 9A 2A             .byte $95,$9A,$2A
004B3F  2  A5 5A AA             .byte $A5,$5A,$AA
004B42  2  A9 6A 2A             .byte $A9,$6A,$2A
004B45  2  A6 08 0A             .byte $A6,$08,$0A
004B48  2  AA 00 22             .byte $AA,$00,$22
004B4B  2  8A 82 0A             .byte $8A,$82,$0A
004B4E  2  8A 82 AA             .byte $8A,$82,$AA
004B51  2  28 80 AA             .byte $28,$80,$AA
004B54  2  A0 20 A2             .byte $A0,$20,$A2
004B57  2  A2 20 80             .byte $A2,$20,$80
004B5A  2  28 A0 00             .byte $28,$A0,$00
004B5D  2  8A A8 22             .byte $8A,$A8,$22
004B60  2  A8 88 2A             .byte $A8,$88,$2A
004B63  2               ;	defblock 48,$00
004B63  2               leaf1:
004B63  2  82 82 AA             .byte $82,$82,$AA
004B66  2  00 8A 02             .byte $00,$8A,$02
004B69  2  00 A8 00             .byte $00,$A8,$00
004B6C  2  20 20 08             .byte $20,$20,$08
004B6F  2  A8 20 2A             .byte $A8,$20,$2A
004B72  2  AA 20 2A             .byte $AA,$20,$2A
004B75  2  AA 08 A0             .byte $AA,$08,$A0
004B78  2  82 02 80             .byte $82,$02,$80
004B7B  2  00 02 00             .byte $00,$02,$00
004B7E  2  02 02 02             .byte $02,$02,$02
004B81  2  0A 00 0A             .byte $0A,$00,$0A
004B84  2  0A 00 A2             .byte $0A,$00,$A2
004B87  2  AA 82 80             .byte $AA,$82,$80
004B8A  2  A0 82 08             .byte $A0,$82,$08
004B8D  2  A0 02 2A             .byte $A0,$02,$2A
004B90  2  8A 00 2A             .byte $8A,$00,$2A
004B93  2               ;	defblock 48,$00
004B93  2               leaf2:
004B93  2  A2 02 AA             .byte $A2,$02,$AA
004B96  2  84 82 8A             .byte $84,$82,$8A
004B99  2  11 82 12             .byte $11,$82,$12
004B9C  2  A2 80 44             .byte $A2,$80,$44
004B9F  2  AA A0 8A             .byte $AA,$A0,$8A
004BA2  2  AA A0 AA             .byte $AA,$A0,$AA
004BA5  2  A8 A0 AA             .byte $A8,$A0,$AA
004BA8  2  A1 00 8A             .byte $A1,$00,$8A
004BAB  2  84 82 1A             .byte $84,$82,$1A
004BAE  2  AA 82 86             .byte $AA,$82,$86
004BB1  2  8A 82 AA             .byte $8A,$82,$AA
004BB4  2  12 82 AA             .byte $12,$82,$AA
004BB7  2  84 02 2A             .byte $84,$02,$2A
004BBA  2  A2 00 12             .byte $A2,$00,$12
004BBD  2  AA 0A 4A             .byte $AA,$0A,$4A
004BC0  2  AA 0A AA             .byte $AA,$0A,$AA
004BC3  2               ;	defblock 48,$00
004BC3  2               flowers2:
004BC3  2  8A 28 A0             .byte $8A,$28,$A0
004BC6  2  2A 22 A2             .byte $2A,$22,$A2
004BC9  2  A6 A2 22             .byte $A6,$A2,$22
004BCC  2  9D 9A 2A             .byte $9D,$9A,$2A
004BCF  2  A7 DA AA             .byte $A7,$DA,$AA
004BD2  2  AB E9 A6             .byte $AB,$E9,$A6
004BD5  2  A6 0B DD             .byte $A6,$0B,$DD
004BD8  2  AA 00 F6             .byte $AA,$00,$F6
004BDB  2  8A 82 6A             .byte $8A,$82,$6A
004BDE  2  8A 82 AA             .byte $8A,$82,$AA
004BE1  2  28 80 AA             .byte $28,$80,$AA
004BE4  2  A7 20 A2             .byte $A7,$20,$A2
004BE7  2  AD 20 80             .byte $AD,$20,$80
004BEA  2  28 A0 00             .byte $28,$A0,$00
004BED  2  8A A8 22             .byte $8A,$A8,$22
004BF0  2  A8 88 2A             .byte $A8,$88,$2A
004BF3  2               ;	defblock 48,$00
004BF3  2               leaf6:
004BF3  2  A0 AA AA             .byte $A0,$AA,$AA
004BF6  2  80 28 0A             .byte $80,$28,$0A
004BF9  2  80 20 00             .byte $80,$20,$00
004BFC  2  0A 20 00             .byte $0A,$20,$00
004BFF  2  2A 02 A2             .byte $2A,$02,$A2
004C02  2  A0 02 AA             .byte $A0,$02,$AA
004C05  2  82 00 2A             .byte $82,$00,$2A
004C08  2  8A 0A 0A             .byte $8A,$0A,$0A
004C0B  2  AA 0A AA             .byte $AA,$0A,$AA
004C0E  2  A2 82 AA             .byte $A2,$82,$AA
004C11  2  8A A0 A2             .byte $8A,$A0,$A2
004C14  2  8A A0 A8             .byte $8A,$A0,$A8
004C17  2  02 A8 28             .byte $02,$A8,$28
004C1A  2  82 A0 2A             .byte $82,$A0,$2A
004C1D  2  02 80 AA             .byte $02,$80,$AA
004C20  2  0A 8A A8             .byte $0A,$8A,$A8
004C23  2               ;	defblock 48,$00
004C23  2               leaf4:
004C23  2  A2 BA A2             .byte $A2,$BA,$A2
004C26  2  A2 DE 82             .byte $A2,$DE,$82
004C29  2  28 BA 80             .byte $28,$BA,$80
004C2C  2  28 AA 08             .byte $28,$AA,$08
004C2F  2  0A 0A 08             .byte $0A,$0A,$08
004C32  2  02 A0 20             .byte $02,$A0,$20
004C35  2  20 A2 08             .byte $20,$A2,$08
004C38  2  20 0A 20             .byte $20,$0A,$20
004C3B  2  08 02 00             .byte $08,$02,$00
004C3E  2  22 82 82             .byte $22,$82,$82
004C41  2  02 00 A2             .byte $02,$00,$A2
004C44  2  0A 20 0A             .byte $0A,$20,$0A
004C47  2  00 80 A2             .byte $00,$80,$A2
004C4A  2  80 80 A8             .byte $80,$80,$A8
004C4D  2  A0 02 A8             .byte $A0,$02,$A8
004C50  2  AA 0A A2             .byte $AA,$0A,$A2
004C53  2               ;	defblock 48,$00
004C53  2               flowers3:
004C53  2  AA AA AA             .byte $AA,$AA,$AA
004C56  2  AA AE AA             .byte $AA,$AE,$AA
004C59  2  AA BF A8             .byte $AA,$BF,$A8
004C5C  2  8A AE AA             .byte $8A,$AE,$AA
004C5F  2  AA A2 AA             .byte $AA,$A2,$AA
004C62  2  AA 82 2A             .byte $AA,$82,$2A
004C65  2  AA A0 AA             .byte $AA,$A0,$AA
004C68  2  AE A2 A6             .byte $AE,$A2,$A6
004C6B  2  BF AA 8A             .byte $BF,$AA,$8A
004C6E  2  AE AA AA             .byte $AE,$AA,$AA
004C71  2  82 AA EA             .byte $82,$AA,$EA
004C74  2  A0 AB FA             .byte $A0,$AB,$FA
004C77  2  A2 AA EA             .byte $A2,$AA,$EA
004C7A  2  8A A8 2A             .byte $8A,$A8,$2A
004C7D  2  AA AA 0A             .byte $AA,$AA,$0A
004C80  2  AA 2A 2A             .byte $AA,$2A,$2A
004C83  2               ;	defblock 48,$00
004C83  2               leaf5:
004C83  2  AA 0A 80             .byte $AA,$0A,$80
004C86  2  5A 82 02             .byte $5A,$82,$02
004C89  2  95 AA 02             .byte $95,$AA,$02
004C8C  2  A5 5A 8A             .byte $A5,$5A,$8A
004C8F  2  A5 55 8A             .byte $A5,$55,$8A
004C92  2  A9 55 60             .byte $A9,$55,$60
004C95  2  8A 95 6A             .byte $8A,$95,$6A
004C98  2  00 AA 5A             .byte $00,$AA,$5A
004C9B  2  00 AA 9A             .byte $00,$AA,$9A
004C9E  2  80 16 95             .byte $80,$16,$95
004CA1  2  A0 25 9A             .byte $A0,$25,$9A
004CA4  2  AA 0A 6A             .byte $AA,$0A,$6A
004CA7  2  AA 8A 68             .byte $AA,$8A,$68
004CAA  2  A8 0A 68             .byte $A8,$0A,$68
004CAD  2  A2 A2 62             .byte $A2,$A2,$62
004CB0  2  8A A8 0A             .byte $8A,$A8,$0A
004CB3  2               ;	defblock 48,$00
004CB3  2               leaf3:
004CB3  2  80 2A 0A             .byte $80,$2A,$0A
004CB6  2  80 0A 82             .byte $80,$0A,$82
004CB9  2  80 A2 A0             .byte $80,$A2,$A0
004CBC  2  02 A5 A0             .byte $02,$A5,$A0
004CBF  2  02 A0 A8             .byte $02,$A0,$A8
004CC2  2  02 A5 AA             .byte $02,$A5,$AA
004CC5  2  00 AA AA             .byte $00,$AA,$AA
004CC8  2  80 AA AA             .byte $80,$AA,$AA
004CCB  2  80 82 AA             .byte $80,$82,$AA
004CCE  2  80 00 2A             .byte $80,$00,$2A
004CD1  2  80 08 8A             .byte $80,$08,$8A
004CD4  2  A0 2A 9A             .byte $A0,$2A,$9A
004CD7  2  80 AA 02             .byte $80,$AA,$02
004CDA  2  80 AA 56             .byte $80,$AA,$56
004CDD  2  82 AA 8A             .byte $82,$AA,$8A
004CE0  2  80 AA AA             .byte $80,$AA,$AA
004CE3  2               ;	defblock 48,$00
004CE3  2               
004CE3  2               ; exit --------------------------
004CE3  2               
004CE3  2               exit1:
004CE3  2  AA 96 A2             .byte $AA,$96,$A2
004CE6  2  89 69 68             .byte $89,$69,$68
004CE9  2  26 BE 98             .byte $26,$BE,$98
004CEC  2  9B BA E6             .byte $9B,$BA,$E6
004CEF  2  7B FE FD             .byte $7B,$FE,$FD
004CF2  2  7B BF ED             .byte $7B,$BF,$ED
004CF5  2  7F AE ED             .byte $7F,$AE,$ED
004CF8  2  7B BE ED             .byte $7B,$BE,$ED
004CFB  2  7B FE FD             .byte $7B,$FE,$FD
004CFE  2  7B BF ED             .byte $7B,$BF,$ED
004D01  2  7F BA ED             .byte $7F,$BA,$ED
004D04  2  7B BE ED             .byte $7B,$BE,$ED
004D07  2  7B AF FD             .byte $7B,$AF,$FD
004D0A  2  7B EE ED             .byte $7B,$EE,$ED
004D0D  2  6A AA A9             .byte $6A,$AA,$A9
004D10  2  55 55 55             .byte $55,$55,$55
004D13  2               ;	defblock 48,$00
004D13  2               exit2:
004D13  2  AA 96 A2             .byte $AA,$96,$A2
004D16  2  89 69 68             .byte $89,$69,$68
004D19  2  26 AA 98             .byte $26,$AA,$98
004D1C  2  9A AA A6             .byte $9A,$AA,$A6
004D1F  2  6A AA A9             .byte $6A,$AA,$A9
004D22  2  6A AA A9             .byte $6A,$AA,$A9
004D25  2  6A AA A9             .byte $6A,$AA,$A9
004D28  2  6A AA A9             .byte $6A,$AA,$A9
004D2B  2  6A AA A9             .byte $6A,$AA,$A9
004D2E  2  6A 65 A9             .byte $6A,$65,$A9
004D31  2  6A AA A9             .byte $6A,$AA,$A9
004D34  2  69 96 69             .byte $69,$96,$69
004D37  2  6A AA A9             .byte $6A,$AA,$A9
004D3A  2  65 55 59             .byte $65,$55,$59
004D3D  2  6A AA A9             .byte $6A,$AA,$A9
004D40  2  55 55 55             .byte $55,$55,$55
004D43  2               ;	defblock 48,$00
004D43  2               
004D43  2               ; Final exit --------------------
004D43  2               
004D43  2               finalexit1:
004D43  2  82 12 51             .byte $82,$12,$51
004D46  2  4D 18 58             .byte $4D,$18,$58
004D49  2  B7 44 A2             .byte $B7,$44,$A2
004D4C  2  4E 46 2A             .byte $4E,$46,$2A
004D4F  2  05 1A AA             .byte $05,$1A,$AA
004D52  2  16 6A A8             .byte $16,$6A,$A8
004D55  2  04 6A 8A             .byte $04,$6A,$8A
004D58  2  80 AA AA             .byte $80,$AA,$AA
004D5B  2  50 A2 AA             .byte $50,$A2,$AA
004D5E  2  42 A8 AA             .byte $42,$A8,$AA
004D61  2  24 AA AA             .byte $24,$AA,$AA
004D64  2  96 EA A6             .byte $96,$EA,$A6
004D67  2  15 A8 AA             .byte $15,$A8,$AA
004D6A  2  02 6A 82             .byte $02,$6A,$82
004D6D  2  80 4A 68             .byte $80,$4A,$68
004D70  2  68 66 A8             .byte $68,$66,$A8
004D73  2               ;	defblock 48,$00
004D73  2               finalexit2:
004D73  2  14 78 61             .byte $14,$78,$61
004D76  2  29 DD 01             .byte $29,$DD,$01
004D79  2  AA B2 55             .byte $AA,$B2,$55
004D7C  2  A2 89 18             .byte $A2,$89,$18
004D7F  2  AA AB 85             .byte $AA,$AB,$85
004D82  2  8A AA 52             .byte $8A,$AA,$52
004D85  2  AA 8A 81             .byte $AA,$8A,$81
004D88  2  AA AA 10             .byte $AA,$AA,$10
004D8B  2  AA AA 95             .byte $AA,$AA,$95
004D8E  2  AA 88 94             .byte $AA,$88,$94
004D91  2  AA AA 82             .byte $AA,$AA,$82
004D94  2  A6 AA 96             .byte $A6,$AA,$96
004D97  2  2A AA 1D             .byte $2A,$AA,$1D
004D9A  2  AA 29 77             .byte $AA,$29,$77
004D9D  2  A4 A5 4C             .byte $A4,$A5,$4C
004DA0  2  AA 99 01             .byte $AA,$99,$01
004DA3  2               ;	defblock 48,$00
004DA3  2               
004DA3  2               
004DA3  1               	.include "font.inc"
004DA3  2               ;======================================================================
004DA3  2               ;FONT ROUTINES:
004DA3  2               ;======================================================================
004DA3  2               ;PUTSTRING
004DA3  2               ; - col,x,y,string,0
004DA3  2               ; - col,x,y,string,0
004DA3  2               ; - $ff
004DA3  2               ;
004DA3  2               ;PUTCHAR x,y,a
004DA3  2               ;======================================================================
004DA3  2               XPOS     = $90
004DA3  2               YPOS     = $91
004DA3  2               COLOR    = $92
004DA3  2               COLORTMP = $98
004DA3  2               
004DA3  2               PUTSTRING:
004DA3  2  86 E8            stx $e8
004DA5  2  84 E9            sty $e9
004DA7  2               
004DA7  2               
004DA7  2  A0 00            ldy #0
004DA9  2               P_S_0:
004DA9  2  B1 E8            lda ($e8),y    ; Check end of printing
004DAB  2  C9 FF            cmp #$ff
004DAD  2  F0 21            beq P_S_4
004DAF  2               
004DAF  2               P_S_1:
004DAF  2  85 90            sta XPOS       ; Save x,y,attribute
004DB1  2  20 D8 4D         jsr setcolor
004DB4  2  20 D1 4D         jsr PTR_INC
004DB7  2  B1 E8            lda ($e8),y
004DB9  2  85 91            sta YPOS
004DBB  2               
004DBB  2               P_S_2:
004DBB  2  20 D1 4D         jsr PTR_INC    ; Print character until 0
004DBE  2  B1 E8            lda ($e8),y
004DC0  2  F0 08            beq P_S_5
004DC2  2  20 F2 4D         jsr PRINTCHAR
004DC5  2  E6 90            inc XPOS
004DC7  2  4C BB 4D         jmp P_S_2
004DCA  2               P_S_5:
004DCA  2  20 D1 4D         jsr PTR_INC
004DCD  2  4C A9 4D         jmp P_S_0
004DD0  2               
004DD0  2               P_S_4:
004DD0  2  60               rts            ; Return to program
004DD1  2               
004DD1  2               PTR_INC:           ; Increment textpointer
004DD1  2  E6 E8            inc $e8
004DD3  2  D0 02            bne PTR_1
004DD5  2  E6 E9            inc $e9
004DD7  2               PTR_1:
004DD7  2  60               rts
004DD8  2               
004DD8  2               setcolor:
004DD8  2  85 98            sta COLORTMP
004DDA  2  A5 90            lda XPOS
004DDC  2  29 1F            and #31
004DDE  2  85 90            sta XPOS
004DE0  2               
004DE0  2  A2 04            ldx #4
004DE2  2               nshift:
004DE2  2  A5 98            lda COLORTMP
004DE4  2  0A               asl a
004DE5  2  26 92            rol COLOR
004DE7  2  0A               asl a
004DE8  2  26 92            rol COLOR
004DEA  2  CA               dex
004DEB  2  D0 F5            bne nshift
004DED  2  60               rts
004DEE  2               
004DEE  2               ;----------------------------------------------------------------------
004DEE  2               SCR      = $93
004DEE  2               CHR      = $95
004DEE  2               CHR1     = $9A
004DEE  2               TMP_Y    = $97
004DEE  2               TMP_A    = $98
004DEE  2               TMP_DAT  = $99
004DEE  2               
004DEE  2               PUTCHAR:
004DEE  2  86 90            stx XPOS
004DF0  2  84 91            sty YPOS
004DF2  2               
004DF2  2               PRINTCHAR:
004DF2  2  38               sec
004DF3  2  E9 20        	sbc #32
004DF5  2  85 98        	sta TMP_A
004DF7  2  85 95            sta CHR        ; Calculate characterspritedata address
004DF9  2  A9 00            lda #0         ; = A * 8 + charsprite data address
004DFB  2  85 96            sta CHR+1
004DFD  2  06 95            asl CHR
004DFF  2  26 96            rol CHR+1
004E01  2  06 95            asl CHR
004E03  2  26 96            rol CHR+1
004E05  2  06 95            asl CHR
004E07  2  26 96            rol CHR+1
004E09  2  A5 95            lda CHR
004E0B  2  18               clc
004E0C  2  69 D6            adc #<font
004E0E  2  85 95            sta CHR
004E10  2  85 9A        	sta CHR1
004E12  2  A5 96            lda CHR+1
004E14  2  69 55            adc #>font
004E16  2  85 96            sta CHR+1
004E18  2  18           	clc
004E19  2  69 04        	adc #4
004E1B  2  85 9B        	sta CHR1+1
004E1D  2               
004E1D  2  A5 90            lda XPOS       ; Calculate screenaddress
004E1F  2               ;-*-
004E1F  2  0A           	asl a
004E20  2               ;-*-
004E20  2  85 93            sta SCR
004E22  2  A5 91            lda YPOS
004E24  2  18               clc
004E25  2  69 80            adc #$80
004E27  2  85 94            sta SCR+1
004E29  2               
004E29  2  84 97            sty TMP_Y
004E2B  2  A2 00            ldx #0
004E2D  2  A0 00            ldy #0         ; Put character on screen
004E2F  2               P_C_1:
004E2F  2               
004E2F  2  B1 95            lda (CHR),y
004E31  2               ;---
004E31  2  49 FF        	eor #$ff
004E33  2  29 AA        	and #$aa
004E35  2  85 99        	sta TMP_DAT
004E37  2  B1 95        	lda (CHR),y
004E39  2  25 92        	and COLOR
004E3B  2  05 99        	ora TMP_DAT
004E3D  2  91 93        	sta (SCR),y
004E3F  2               ;---
004E3F  2               ;    and COLOR
004E3F  2               ;    sta (SCR),y
004E3F  2               
004E3F  2  E6 95            inc CHR
004E41  2  D0 02            bne P_C_2
004E43  2  E6 96            inc CHR+1
004E45  2               P_C_2:
004E45  2               
004E45  2               ;-*-
004E45  2  B1 9A            lda (CHR1),y
004E47  2  48           	pha
004E48  2  C8               iny
004E49  2               ;---
004E49  2  49 FF        	eor #$ff
004E4B  2  29 AA        	and #$aa
004E4D  2  85 99        	sta TMP_DAT
004E4F  2  68           	pla
004E50  2  25 92        	and COLOR
004E52  2  05 99        	ora TMP_DAT
004E54  2  91 93        	sta (SCR),y
004E56  2  88           	dey
004E57  2               ;---
004E57  2               ;    and COLOR
004E57  2               ;    sta (SCR),y
004E57  2               
004E57  2  E6 9A            inc CHR1
004E59  2  D0 02            bne P_C_3
004E5B  2  E6 9B            inc CHR1+1
004E5D  2               P_C_3:
004E5D  2               ;-*-
004E5D  2               
004E5D  2  A5 93            lda SCR
004E5F  2  18               clc
004E60  2  69 20            adc #$20
004E62  2  85 93            sta SCR
004E64  2  A5 94            lda SCR+1
004E66  2  69 00            adc #0
004E68  2  85 94            sta SCR+1
004E6A  2  E8               inx
004E6B  2  E0 08            cpx #8
004E6D  2  D0 C0            bne P_C_1
004E6F  2               
004E6F  2  A4 97            ldy TMP_Y
004E71  2  A5 98            lda TMP_A
004E73  2  60               rts
004E74  2               
004E74  2               INV_CURSOR:
004E74  2  86 93            stx SCR
004E76  2  98               tya
004E77  2  18               clc
004E78  2  69 80            adc #$80
004E7A  2  85 94            sta SCR+1
004E7C  2               
004E7C  2  A0 00            ldy #0         ; Put character on screen
004E7E  2               IC1:
004E7E  2  B1 93            lda (SCR),y
004E80  2  49 FF            eor #$ff
004E82  2  91 93            sta (SCR),y
004E84  2  98               tya
004E85  2  18               clc
004E86  2  69 20            adc #$20
004E88  2  A8               tay
004E89  2  D0 F3            bne IC1
004E8B  2  60               rts
004E8C  2               
004E8C  1               	.include "joystick.inc"
004E8C  2               ;----------------------------------------------------------
004E8C  2               ; Set PORTB direction
004E8C  2               ;----------------------------------------------------------
004E8C  2               
004E8C  2               joyinit:
004E8C  2  A9 FF        	lda #$ff   ; Write value to latch, bits 0-7 input
004E8E  2  8D 01 B4     	sta $b401
004E91  2               
004E91  2  20 BC 4E     	jsr interwritedelay
004E94  2               
004E94  2  A9 A1        	lda #$a1   ; Write direction in latch to PORTB
004E96  2  8D 00 B4     	sta $b400
004E99  2               
004E99  2  20 BC 4E     	jsr interwritedelay
004E9C  2               
004E9C  2  A9 FF        	lda #$ff   ; Write value to latch, bits 0-7 high
004E9E  2  8D 01 B4     	sta $b401
004EA1  2               
004EA1  2  20 BC 4E     	jsr interwritedelay
004EA4  2               
004EA4  2  A9 A3        	lda #$a3   ; Write value in latch to PORTB
004EA6  2  8D 00 B4     	sta $b400
004EA9  2  60           	rts
004EAA  2               
004EAA  2               ;----------------------------------------------------------
004EAA  2               ; Get PORTB value
004EAA  2               ;----------------------------------------------------------
004EAA  2               
004EAA  2               joyget:
004EAA  2  A9 A2        	lda #$a2   ; Read value PORTB in latch
004EAC  2  8D 00 B4     	sta $b400
004EAF  2               
004EAF  2  20 BC 4E     	jsr interwritedelay
004EB2  2               
004EB2  2  AD 01 B4     	lda $b401
004EB5  2  F0 04        	beq no_joystick
004EB7  2  49 FF        	eor #$ff
004EB9  2  29 1F        	and #$1f
004EBB  2               no_joystick:
004EBB  2  60           	rts
004EBC  2               
004EBC  2               ;----------------------------------------------------------
004EBC  2               ; Short delay
004EBC  2               ;
004EBC  2               ; Enough to intersperse 2 writes to the FATPIC.
004EBC  2               ;----------------------------------------------------------
004EBC  2               
004EBC  2               interwritedelay:
004EBC  2  A9 04        	lda  #4
004EBE  2  38           	sec
004EBF  2               loop:
004EBF  2  E9 01        	sbc  #1
004EC1  2  D0 FC        	bne  loop
004EC3  2  60           	rts
004EC4  2               
004EC4  2  00           tmp_byte:   .byte 0
004EC5  2               
004EC5  1               	.include "sound.inc"
004EC5  2               ;---------------------------------------------------
004EC5  2               ; SOUND A,X,Y, produce tone
004EC5  2               ;
004EC5  2               ; A = Duration (1-255) * 0,005 usec
004EC5  2               ; X = Pitch (9-19)
004EC5  2               ; Y = Octave (0-7)
004EC5  2               ;---------------------------------------------------
004EC5  2               
004EC5  2               dur_val   = $f0
004EC5  2               pit_val   = $f1
004EC5  2               oct_val   = $f2
004EC5  2               
004EC5  2               sound:
004EC5  2  85 F0        	sta dur_val	; 4
004EC7  2  86 F1        	stx pit_val	; 4
004EC9  2  84 F2        	sty oct_val	; 4
004ECB  2               
004ECB  2  A9 88        	lda #<5000	; 2, Set Timer 2=0,005 sec
004ECD  2  8D 08 B8     	sta $b808	; 4
004ED0  2  A9 13        	lda #>5000	; 2
004ED2  2  8D 09 B8     	sta $b809	; 4
004ED5  2               
004ED5  2  E0 00        	cpx #0
004ED7  2  D0 03        	bne loop3
004ED9  2  4C F7 4E     	jmp pauseloop
004EDC  2               loop3:
004EDC  2  20 11 4F     	  jsr toggle	     ;22 , t3=t2+22+3
004EDF  2               
004EDF  2  A4 F2        	  ldy oct_val        ; 4 , t2=Y*(t1+4)+4
004EE1  2  A6 F1        loop2:	    ldx pit_val      ; 4 , t1=X*32+4
004EE3  2  AD 0D B8     loop1:	      lda $b80d       	; 4, Read IFR
004EE6  2  29 20        	      and #$20     	; 2, Mask T2
004EE8  2  D0 30        	      bne chk_timer  	; 2 If T2=0, jump
004EEA  2  20 2E 4F     	      jsr wait       	; 6+18 Else wait
004EED  2  CA           loop5:	      dex            	; 2
004EEE  2  D0 F3        	    bne loop1        	; 2
004EF0  2  88           	    dey              ; 2
004EF1  2  D0 EE        	  bne loop2          ; 2
004EF3  2               
004EF3  2  4C DC 4E     	jmp loop3            ; 3
004EF6  2               
004EF6  2               end_sound:
004EF6  2  60           	rts
004EF7  2               
004EF7  2               ;--------------------------------------
004EF7  2               ; Pause
004EF7  2               ;--------------------------------------
004EF7  2               pauseloop:
004EF7  2  A4 F0        	ldy dur_val
004EF9  2               loop10:
004EF9  2  A9 88        	lda #<5000
004EFB  2  8D 08 B8     	sta $b808
004EFE  2  A9 13        	lda #>5000
004F00  2  8D 09 B8     	sta $b809
004F03  2               loop11:
004F03  2  AD 0D B8     	lda $b80d
004F06  2  29 20        	and #$20
004F08  2  F0 F9        	beq loop11
004F0A  2               
004F0A  2  AD 08 B8     	lda $b808
004F0D  2  88           	dey
004F0E  2  D0 E9        	bne loop10
004F10  2  60           	rts
004F11  2               
004F11  2               ;--------------------------------------
004F11  2               ; Toggle speaker (16 usec)
004F11  2               ;--------------------------------------
004F11  2               toggle:
004F11  2  AD 02 B0     	lda $b002      ; 4
004F14  2  49 04        	eor #4         ; 2
004F16  2  8D 02 B0     	sta $b002      ; 4
004F19  2  60           	rts            ; 6
004F1A  2               
004F1A  2               ;--------------------------------------
004F1A  2               ; Check if time is over (24 usec)
004F1A  2               ;--------------------------------------
004F1A  2               chk_timer:
004F1A  2  AD 08 B8     	lda $b808      ; 4
004F1D  2  C6 F0        	dec dur_val    ; 3
004F1F  2  F0 D5        	beq end_sound  ; 2
004F21  2               settimer:
004F21  2  A9 88        	lda #<5000     ; 2
004F23  2  8D 08 B8     	sta $b808      ; 4
004F26  2  A9 13        	lda #>5000     ; 2
004F28  2  8D 09 B8     	sta $b809      ; 4
004F2B  2  4C ED 4E     	jmp loop5      ; 3
004F2E  2               
004F2E  2               ;--------------------------------------
004F2E  2               ; Wait routine 24-6=18 usec
004F2E  2               ;--------------------------------------
004F2E  2               wait:
004F2E  2  EA           	nop            ; 2
004F2F  2  EA           	nop            ; 2
004F30  2  EA           	nop            ; 2
004F31  2  EA           	nop            ; 2
004F32  2  EA           	nop            ; 2
004F33  2  EA           	nop            ; 2
004F34  2  60           	rts            ; 6
004F35  2               
004F35  2               
004F35  1               	.include "vars.inc"
004F35  2  00 00 00 00  L0ee0:		defblock 16,0
004F39  2  00 00 00 00  
004F3D  2  00 00 00 00  
004F45  2  00 00 00 00  L0ef0:		defblock 16,0
004F49  2  00 00 00 00  
004F4D  2  00 00 00 00  
004F55  2  00 00 00 00  L5180:		defblock 8*12,0	; High scores
004F59  2  00 00 00 00  
004F5D  2  00 00 00 00  
004FB5  2  00 00 00 00  		defblock 32,0
004FB9  2  00 00 00 00  
004FBD  2  00 00 00 00  
004FD5  2  00 00 00 00  L5280:		defblock 128,0	; Character table
004FD9  2  00 00 00 00  
004FDD  2  00 00 00 00  
005055  2  00 00 00 00  L5200:		defblock 121,0	; Objects/treasure table
005059  2  00 00 00 00  
00505D  2  00 00 00 00  
0050CE  2  00 00 00 00  		defblock 7,0
0050D2  2  00 00 00     
0050D5  2  00 00 00 00  L5300:		defblock 256,0	; Plot buffer
0050D9  2  00 00 00 00  
0050DD  2  00 00 00 00  
0051D5  2  00 00 00 00  		defblock $360,0
0051D9  2  00 00 00 00  
0051DD  2  00 00 00 00  
005535  2  00 00 00 00  L5760:		defblock 8,0	; Note data
005539  2  00 00 00 00  
00553D  2  00 00 00 00  		defblock 22,0
005541  2  00 00 00 00  
005545  2  00 00 00 00  
005553  2  00           L577e:		.byte 0		; Joystick
005554  2  00           L577f:		.byte 0		; Weapon counter
005555  2  00           L5780:		.byte 0		; Item/player flags
005556  2  00           L5781:		.byte 0		; Weapon/enemy limit
005557  2  00 00        L5782:		.byte 0,0	; Current room (i,j)
005559  2  00           L5784:		.byte 0		; Lives (strength)
00555A  2  00           L5785:		.byte 0		; Delay counter
00555B  2  00 00 00     L5786:		.byte 0,0,0	; Score
00555E  2  00           L5789:		.byte 0		; Projectile type
00555F  2  00           L578a:		.byte 0		; Level
005560  2  00 00        L578b:		.byte 0,0	; Palette workspace
005562  2  00           L578d:		.byte 0		; Projectile counter
005563  2  00           L578e:		.byte 0		; Motion counter
005564  2  00           L578f:		.byte 0		; Enemy generation counter
005565  2  00 00 00 00  		defblock 12,0
005569  2  00 00 00 00  
00556D  2  00 00 00 00  
005571  2  00 00 00 00  L579c:		defblock 100,0	; Room data
005575  2  00 00 00 00  
005579  2  00 00 00 00  
0055D5  2  00           L579d:		.byte 0
0055D6  2               
0055D6  2               
0055D6  1               	.include "fontdat.inc"
0055D6  2               ;
0055D6  2               ; Start of code
0055D6  2               ;
0055D6  2               ;            *= $3000
0055D6  2               ;
0055D6  2               font:
0055D6  2  00 00 00 00              .byte $00,$00,$00,$00,$00,$00,$00,$00
0055DA  2  00 00 00 00  
0055DE  2  03 03 03 03              .byte $03,$03,$03,$03,$03,$00,$03,$00
0055E2  2  03 00 03 00  
0055E6  2  3C 3C 3C 00              .byte $3C,$3C,$3C,$00,$00,$00,$00,$00
0055EA  2  00 00 00 00  
0055EE  2  0F 0F 3F 0F              .byte $0F,$0F,$3F,$0F,$3F,$0F,$0F,$00
0055F2  2  3F 0F 0F 00  
0055F6  2  00 0F 3C 0F              .byte $00,$0F,$3C,$0F,$00,$3F,$03,$00
0055FA  2  00 3F 03 00  
0055FE  2  3C 3C 00 03              .byte $3C,$3C,$00,$03,$0F,$3C,$00,$00
005602  2  0F 3C 00 00  
005606  2  0F 3C 3C 0F              .byte $0F,$3C,$3C,$0F,$3C,$3C,$0F,$00
00560A  2  3C 3C 0F 00  
00560E  2  00 03 0F 00              .byte $00,$03,$0F,$00,$00,$00,$00,$00
005612  2  00 00 00 00  
005616  2  00 03 0F 0F              .byte $00,$03,$0F,$0F,$0F,$03,$00,$00
00561A  2  0F 03 00 00  
00561E  2  0F 03 00 00              .byte $0F,$03,$00,$00,$00,$03,$0F,$00
005622  2  00 03 0F 00  
005626  2  00 03 3F 0F              .byte $00,$03,$3F,$0F,$3F,$03,$00,$00
00562A  2  3F 03 00 00  
00562E  2  00 03 03 3F              .byte $00,$03,$03,$3F,$03,$03,$00,$00
005632  2  03 03 00 00  
005636  2  00 00 00 00              .byte $00,$00,$00,$00,$00,$03,$03,$0F
00563A  2  00 03 03 0F  
00563E  2  00 00 00 3F              .byte $00,$00,$00,$3F,$00,$00,$00,$00
005642  2  00 00 00 00  
005646  2  00 00 00 00              .byte $00,$00,$00,$00,$00,$03,$03,$00
00564A  2  00 03 03 00  
00564E  2  00 00 00 03              .byte $00,$00,$00,$03,$0F,$3C,$00,$00
005652  2  0F 3C 00 00  
005656  2  0F 3C 3C 3F              .byte $0F,$3C,$3C,$3F,$3F,$3C,$0F,$00
00565A  2  3F 3C 0F 00  
00565E  2  03 0F 03 03              .byte $03,$0F,$03,$03,$03,$03,$3F,$00
005662  2  03 03 3F 00  
005666  2  0F 3C 00 00              .byte $0F,$3C,$00,$00,$03,$0F,$3F,$00
00566A  2  03 0F 3F 00  
00566E  2  0F 3C 00 03              .byte $0F,$3C,$00,$03,$00,$3C,$0F,$00
005672  2  00 3C 0F 00  
005676  2  00 03 0F 3C              .byte $00,$03,$0F,$3C,$3F,$00,$00,$00
00567A  2  3F 00 00 00  
00567E  2  3F 3C 3F 00              .byte $3F,$3C,$3F,$00,$00,$3C,$0F,$00
005682  2  00 3C 0F 00  
005686  2  03 0F 3C 3F              .byte $03,$0F,$3C,$3F,$3C,$3C,$0F,$00
00568A  2  3C 3C 0F 00  
00568E  2  3F 00 00 03              .byte $3F,$00,$00,$03,$0F,$0F,$0F,$00
005692  2  0F 0F 0F 00  
005696  2  0F 3C 3C 0F              .byte $0F,$3C,$3C,$0F,$3C,$3C,$0F,$00
00569A  2  3C 3C 0F 00  
00569E  2  0F 3C 3C 0F              .byte $0F,$3C,$3C,$0F,$00,$00,$0F,$00
0056A2  2  00 00 0F 00  
0056A6  2  00 00 03 03              .byte $00,$00,$03,$03,$00,$03,$03,$00
0056AA  2  00 03 03 00  
0056AE  2  00 00 03 03              .byte $00,$00,$03,$03,$00,$03,$03,$0F
0056B2  2  00 03 03 0F  
0056B6  2  00 03 0F 3C              .byte $00,$03,$0F,$3C,$0F,$03,$00,$00
0056BA  2  0F 03 00 00  
0056BE  2  00 00 3F 00              .byte $00,$00,$3F,$00,$3F,$00,$00,$00
0056C2  2  3F 00 00 00  
0056C6  2  0F 03 00 00              .byte $0F,$03,$00,$00,$00,$03,$0F,$00
0056CA  2  00 03 0F 00  
0056CE  2  0F 3C 00 03              .byte $0F,$3C,$00,$03,$03,$00,$03,$00
0056D2  2  03 00 03 00  
0056D6  2  0F 3C 3C 3C              .byte $0F,$3C,$3C,$3C,$3C,$3C,$0F,$00
0056DA  2  3C 3C 0F 00  
0056DE  2  0F 3C 3C 3F              .byte $0F,$3C,$3C,$3F,$3C,$3C,$3C,$00
0056E2  2  3C 3C 3C 00  
0056E6  2  3F 3C 3C 3F              .byte $3F,$3C,$3C,$3F,$3C,$3C,$3F,$00
0056EA  2  3C 3C 3F 00  
0056EE  2  0F 3C 3C 3C              .byte $0F,$3C,$3C,$3C,$3C,$3C,$0F,$00
0056F2  2  3C 3C 0F 00  
0056F6  2  3F 3C 3C 3C              .byte $3F,$3C,$3C,$3C,$3C,$3C,$3F,$00
0056FA  2  3C 3C 3F 00  
0056FE  2  3F 3C 3C 3F              .byte $3F,$3C,$3C,$3F,$3C,$3C,$3F,$00
005702  2  3C 3C 3F 00  
005706  2  3F 3C 3C 3F              .byte $3F,$3C,$3C,$3F,$3C,$3C,$3C,$00
00570A  2  3C 3C 3C 00  
00570E  2  0F 3C 3C 3C              .byte $0F,$3C,$3C,$3C,$3C,$3C,$0F,$00
005712  2  3C 3C 0F 00  
005716  2  3C 3C 3C 3F              .byte $3C,$3C,$3C,$3F,$3C,$3C,$3C,$00
00571A  2  3C 3C 3C 00  
00571E  2  3F 03 03 03              .byte $3F,$03,$03,$03,$03,$03,$3F,$00
005722  2  03 03 3F 00  
005726  2  0F 00 00 00              .byte $0F,$00,$00,$00,$00,$3C,$0F,$00
00572A  2  00 3C 0F 00  
00572E  2  3C 3C 3F 3F              .byte $3C,$3C,$3F,$3F,$3F,$3C,$3C,$00
005732  2  3F 3C 3C 00  
005736  2  3C 3C 3C 3C              .byte $3C,$3C,$3C,$3C,$3C,$3C,$3F,$00
00573A  2  3C 3C 3F 00  
00573E  2  3C 3F 3F 3C              .byte $3C,$3F,$3F,$3C,$3C,$3C,$3C,$00
005742  2  3C 3C 3C 00  
005746  2  3C 3C 3F 3F              .byte $3C,$3C,$3F,$3F,$3C,$3C,$3C,$00
00574A  2  3C 3C 3C 00  
00574E  2  0F 3C 3C 3C              .byte $0F,$3C,$3C,$3C,$3C,$3C,$0F,$00
005752  2  3C 3C 0F 00  
005756  2  3F 3C 3C 3F              .byte $3F,$3C,$3C,$3F,$3C,$3C,$3C,$00
00575A  2  3C 3C 3C 00  
00575E  2  0F 3C 3C 3C              .byte $0F,$3C,$3C,$3C,$3C,$3C,$0F,$00
005762  2  3C 3C 0F 00  
005766  2  3F 3C 3C 3F              .byte $3F,$3C,$3C,$3F,$3C,$3C,$3C,$00
00576A  2  3C 3C 3C 00  
00576E  2  0F 3C 3C 0F              .byte $0F,$3C,$3C,$0F,$00,$3C,$0F,$00
005772  2  00 3C 0F 00  
005776  2  3F 03 03 03              .byte $3F,$03,$03,$03,$03,$03,$03,$00
00577A  2  03 03 03 00  
00577E  2  3C 3C 3C 3C              .byte $3C,$3C,$3C,$3C,$3C,$3C,$0F,$00
005782  2  3C 3C 0F 00  
005786  2  3C 3C 3C 3C              .byte $3C,$3C,$3C,$3C,$3C,$0F,$03,$00
00578A  2  3C 0F 03 00  
00578E  2  3C 3C 3C 3C              .byte $3C,$3C,$3C,$3C,$3F,$3F,$3C,$00
005792  2  3F 3F 3C 00  
005796  2  3C 3C 0F 03              .byte $3C,$3C,$0F,$03,$0F,$3C,$3C,$00
00579A  2  0F 3C 3C 00  
00579E  2  3C 3C 3C 0F              .byte $3C,$3C,$3C,$0F,$03,$03,$03,$00
0057A2  2  03 03 03 00  
0057A6  2  3F 00 00 03              .byte $3F,$00,$00,$03,$0F,$3C,$3F,$00
0057AA  2  0F 3C 3F 00  
0057AE  2  3F 3C 3C 3C              .byte $3F,$3C,$3C,$3C,$3C,$3C,$3F,$00
0057B2  2  3C 3C 3F 00  
0057B6  2  00 3C 0F 03              .byte $00,$3C,$0F,$03,$00,$00,$00,$00
0057BA  2  00 00 00 00  
0057BE  2  0F 00 00 00              .byte $0F,$00,$00,$00,$00,$00,$0F,$00
0057C2  2  00 00 0F 00  
0057C6  2  03 0F 3C 30              .byte $03,$0F,$3C,$30,$00,$00,$00,$00
0057CA  2  00 00 00 00  
0057CE  2  00 00 00 00              .byte $00,$00,$00,$00,$00,$00,$00,$FF
0057D2  2  00 00 00 FF  
0057D6  2  03 0F 0F 3F              .byte $03,$0F,$0F,$3F,$0F,$0F,$3F,$00
0057DA  2  0F 0F 3F 00  
0057DE  2  00 00 0F 00              .byte $00,$00,$0F,$00,$0F,$3C,$0F,$00
0057E2  2  0F 3C 0F 00  
0057E6  2  3C 3C 3F 3C              .byte $3C,$3C,$3F,$3C,$3C,$3C,$3F,$00
0057EA  2  3C 3C 3F 00  
0057EE  2  00 00 0F 3C              .byte $00,$00,$0F,$3C,$3C,$3C,$0F,$00
0057F2  2  3C 3C 0F 00  
0057F6  2  00 00 0F 3C              .byte $00,$00,$0F,$3C,$3C,$3C,$0F,$00
0057FA  2  3C 3C 0F 00  
0057FE  2  00 00 0F 3C              .byte $00,$00,$0F,$3C,$3F,$3C,$0F,$00
005802  2  3F 3C 0F 00  
005806  2  03 0F 0F 3F              .byte $03,$0F,$0F,$3F,$0F,$0F,$0F,$00
00580A  2  0F 0F 0F 00  
00580E  2  00 00 0F 3C              .byte $00,$00,$0F,$3C,$3C,$0F,$00,$0F
005812  2  3C 0F 00 0F  
005816  2  3C 3C 3F 3C              .byte $3C,$3C,$3F,$3C,$3C,$3C,$3C,$00
00581A  2  3C 3C 3C 00  
00581E  2  03 00 0F 03              .byte $03,$00,$0F,$03,$03,$03,$0F,$00
005822  2  03 03 0F 00  
005826  2  03 00 0F 03              .byte $03,$00,$0F,$03,$03,$03,$03,$3F
00582A  2  03 03 03 3F  
00582E  2  3C 3C 3C 3C              .byte $3C,$3C,$3C,$3C,$3F,$3C,$3C,$00
005832  2  3F 3C 3C 00  
005836  2  0F 03 03 03              .byte $0F,$03,$03,$03,$03,$03,$0F,$00
00583A  2  03 03 0F 00  
00583E  2  00 00 0F 3F              .byte $00,$00,$0F,$3F,$3C,$3C,$3C,$00
005842  2  3C 3C 3C 00  
005846  2  00 00 3F 3C              .byte $00,$00,$3F,$3C,$3C,$3C,$3C,$00
00584A  2  3C 3C 3C 00  
00584E  2  00 00 0F 3C              .byte $00,$00,$0F,$3C,$3C,$3C,$0F,$00
005852  2  3C 3C 0F 00  
005856  2  00 00 3F 3C              .byte $00,$00,$3F,$3C,$3C,$3F,$3C,$3C
00585A  2  3C 3F 3C 3C  
00585E  2  00 00 0F 3C              .byte $00,$00,$0F,$3C,$3C,$0F,$00,$00
005862  2  3C 0F 00 00  
005866  2  00 00 3C 3F              .byte $00,$00,$3C,$3F,$3C,$3C,$3C,$00
00586A  2  3C 3C 3C 00  
00586E  2  00 00 0F 3C              .byte $00,$00,$0F,$3C,$0F,$00,$3F,$00
005872  2  0F 00 3F 00  
005876  2  0F 0F 3F 0F              .byte $0F,$0F,$3F,$0F,$0F,$0F,$03,$00
00587A  2  0F 0F 03 00  
00587E  2  00 00 3C 3C              .byte $00,$00,$3C,$3C,$3C,$3C,$0F,$00
005882  2  3C 3C 0F 00  
005886  2  00 00 3C 3C              .byte $00,$00,$3C,$3C,$3C,$0F,$03,$00
00588A  2  3C 0F 03 00  
00588E  2  00 00 3C 3C              .byte $00,$00,$3C,$3C,$3C,$3F,$0F,$00
005892  2  3C 3F 0F 00  
005896  2  00 00 3C 0F              .byte $00,$00,$3C,$0F,$03,$0F,$3C,$00
00589A  2  03 0F 3C 00  
00589E  2  00 00 3C 3C              .byte $00,$00,$3C,$3C,$3C,$0F,$00,$0F
0058A2  2  3C 0F 00 0F  
0058A6  2  00 00 3F 00              .byte $00,$00,$3F,$00,$03,$0F,$3F,$00
0058AA  2  03 0F 3F 00  
0058AE  2  00 03 03 3F              .byte $00,$03,$03,$3F,$03,$03,$00,$00
0058B2  2  03 03 00 00  
0058B6  2  03 03 03 00              .byte $03,$03,$03,$00,$03,$03,$03,$00
0058BA  2  03 03 03 00  
0058BE  2  0F 03 03 00              .byte $0F,$03,$03,$00,$03,$03,$0F,$00
0058C2  2  03 03 0F 00  
0058C6  2  00 00 00 00              .byte $00,$00,$00,$00,$00,$00,$00,$00
0058CA  2  00 00 00 00  
0058CE  2  00 00 00 00              .byte $00,$00,$00,$00,$00,$00,$00,$00
0058D2  2  00 00 00 00  
0058D6  2  69 06 85 84              .byte $69,$06,$85,$84,$4C,$C9,$32,$18
0058DA  2  4C C9 32 18  
0058DE  2  A5 84 65 88              .byte $A5,$84,$65,$88,$85,$84,$4C,$C9
0058E2  2  85 84 4C C9  
0058E6  2  32 18 60 9C              .byte $32,$18,$60,$9C,$A6,$B0,$BA,$C4
0058EA  2  A6 B0 BA C4  
0058EE  2  CE D8 E2 EC              .byte $CE,$D8,$E2,$EC,$F6,$AD,$81,$52
0058F2  2  F6 AD 81 52  
0058F6  2  29 01 49 01              .byte $29,$01,$49,$01,$8D,$81,$52,$20
0058FA  2  8D 81 52 20  
0058FE  2  60 31 60 AD              .byte $60,$31,$60,$AD,$81,$52,$29,$01
005902  2  81 52 29 01  
005906  2  49 01 09 02              .byte $49,$01,$09,$02,$8D,$81,$52,$20
00590A  2  8D 81 52 20  
00590E  2  60 31 60 AD              .byte $60,$31,$60,$AD,$81,$52,$29,$01
005912  2  81 52 29 01  
005916  2  49 01 09 04              .byte $49,$01,$09,$04,$8D,$81,$52,$20
00591A  2  8D 81 52 20  
00591E  2  60 31 60 AD              .byte $60,$31,$60,$AD,$81,$52,$29,$01
005922  2  81 52 29 01  
005926  2  49 01 09 06              .byte $49,$01,$09,$06,$8D,$81,$52,$20
00592A  2  8D 81 52 20  
00592E  2  60 31 60 C9              .byte $60,$31,$60,$C9,$A0,$90,$05,$38
005932  2  A0 90 05 38  
005936  2  E9 80 18 60              .byte $E9,$80,$18,$60,$C9,$61,$B0,$09
00593A  2  C9 61 B0 09  
00593E  2  85 81 A9 80              .byte $85,$81,$A9,$80,$38,$E5,$81,$18
005942  2  38 E5 81 18  
005946  2  60 A9 00 18              .byte $60,$A9,$00,$18,$60,$A9,$80,$A2
00594A  2  60 A9 80 A2  
00594E  2  02 98 85 8E              .byte $02,$98,$85,$8E,$20,$5B,$33,$85
005952  2  20 5B 33 85  
005956  2  8F A9 80 A2              .byte $8F,$A9,$80,$A2,$01,$98,$85,$8D
00595A  2  01 98 85 8D  
00595E  2  20 5B 33 C9              .byte $20,$5B,$33,$C9,$00,$F0,$10,$C5
005962  2  00 F0 10 C5  
005966  2  8F 90 0C A5              .byte $8F,$90,$0C,$A5,$8D,$C9,$80,$B0
00596A  2  8D C9 80 B0  
00596E  2  03 4C 69 34              .byte $03,$4C,$69,$34,$4C,$DA,$33,$A5
005972  2  4C DA 33 A5  
005976  2  8F C9 00 D0              .byte $8F,$C9,$00,$D0,$02,$18,$60,$A5
00597A  2  02 18 60 A5  
00597E  2  8E C9 80 B0              .byte $8E,$C9,$80,$B0,$03,$4C,$83,$35
005982  2  03 4C 83 35  
005986  2  4C 09 35 AD              .byte $4C,$09,$35,$AD,$8E,$57,$29,$01
00598A  2  8E 57 29 01  
00598E  2  F0 02 18 60              .byte $F0,$02,$18,$60,$A9,$80,$85,$74
005992  2  A9 80 85 74  
005996  2  A9 52 85 75              .byte $A9,$52,$85,$75,$AD,$7E,$57,$C9
00599A  2  AD 7E 57 C9  
00599E  2  00 F0 03 4C              .byte $00,$F0,$03,$4C,$75,$33,$A2,$9E
0059A2  2  75 33 A2 9E  
0059A6  2  20 08 31 C0              .byte $20,$08,$31,$C0,$FF,$F0,$03,$4C
0059AA  2  FF F0 03 4C  
0059AE  2  5D 34 AD 85              .byte $5D,$34,$AD,$85,$52,$C9,$00,$F0
0059B2  2  52 C9 00 F0  
0059B6  2  0A 20 50 31              .byte $0A,$20,$50,$31,$CE,$85,$52,$18
0059BA  2  CE 85 52 18  
0059BE  2  4C 1D 33 AD              .byte $4C,$1D,$33,$AD,$84,$52,$C9,$00
0059C2  2  84 52 C9 00  
0059C6  2  F0 52 18 A8              .byte $F0,$52,$18,$A8,$88,$AD,$82,$52
0059CA  2  88 AD 82 52  
0059CE  2  AA BD 13 33              .byte $AA,$BD,$13,$33,$85,$70,$A9,$57
0059D2  2  85 70 A9 57  
0059D6  2               
0059D6  2  00 00 00 00              .byte $00,$00,$00,$00,$00,$00,$00,$00
0059DA  2  00 00 00 00  
0059DE  2  C0 C0 C0 C0              .byte $C0,$C0,$C0,$C0,$C0,$00,$C0,$00
0059E2  2  C0 00 C0 00  
0059E6  2  F0 F0 F0 00              .byte $F0,$F0,$F0,$00,$00,$00,$00,$00
0059EA  2  00 00 00 00  
0059EE  2  3C 3C FF 3C              .byte $3C,$3C,$FF,$3C,$FF,$3C,$3C,$00
0059F2  2  FF 3C 3C 00  
0059F6  2  F0 FF C0 FC              .byte $F0,$FF,$C0,$FC,$CF,$FC,$C0,$00
0059FA  2  CF FC C0 00  
0059FE  2  00 3C F0 C0              .byte $00,$3C,$F0,$C0,$00,$3C,$3C,$00
005A02  2  00 3C 3C 00  
005A06  2  C0 F0 F0 C0              .byte $C0,$F0,$F0,$C0,$F3,$3C,$CF,$00
005A0A  2  F3 3C CF 00  
005A0E  2  F0 C0 00 00              .byte $F0,$C0,$00,$00,$00,$00,$00,$00
005A12  2  00 00 00 00  
005A16  2  F0 C0 00 00              .byte $F0,$C0,$00,$00,$00,$C0,$F0,$00
005A1A  2  00 C0 F0 00  
005A1E  2  00 C0 F0 F0              .byte $00,$C0,$F0,$F0,$F0,$C0,$00,$00
005A22  2  F0 C0 00 00  
005A26  2  00 C0 FC F0              .byte $00,$C0,$FC,$F0,$FC,$C0,$00,$00
005A2A  2  FC C0 00 00  
005A2E  2  00 C0 C0 FC              .byte $00,$C0,$C0,$FC,$C0,$C0,$00,$00
005A32  2  C0 C0 00 00  
005A36  2  00 00 00 00              .byte $00,$00,$00,$00,$00,$C0,$C0,$00
005A3A  2  00 C0 C0 00  
005A3E  2  00 00 00 FC              .byte $00,$00,$00,$FC,$00,$00,$00,$00
005A42  2  00 00 00 00  
005A46  2  00 00 00 00              .byte $00,$00,$00,$00,$00,$C0,$C0,$00
005A4A  2  00 C0 C0 00  
005A4E  2  00 3C F0 C0              .byte $00,$3C,$F0,$C0,$00,$00,$00,$00
005A52  2  00 00 00 00  
005A56  2  F0 3C FC FC              .byte $F0,$3C,$FC,$FC,$3C,$3C,$F0,$00
005A5A  2  3C 3C F0 00  
005A5E  2  C0 C0 C0 C0              .byte $C0,$C0,$C0,$C0,$C0,$C0,$FC,$00
005A62  2  C0 C0 FC 00  
005A66  2  F0 3C 3C F0              .byte $F0,$3C,$3C,$F0,$C0,$00,$FC,$00
005A6A  2  C0 00 FC 00  
005A6E  2  F0 3C 3C F0              .byte $F0,$3C,$3C,$F0,$3C,$3C,$F0,$00
005A72  2  3C 3C F0 00  
005A76  2  F0 F0 F0 F0              .byte $F0,$F0,$F0,$F0,$FC,$F0,$F0,$00
005A7A  2  FC F0 F0 00  
005A7E  2  FC 00 F0 3C              .byte $FC,$00,$F0,$3C,$3C,$3C,$F0,$00
005A82  2  3C 3C F0 00  
005A86  2  F0 00 00 F0              .byte $F0,$00,$00,$F0,$3C,$3C,$F0,$00
005A8A  2  3C 3C F0 00  
005A8E  2  FC 3C F0 C0              .byte $FC,$3C,$F0,$C0,$00,$00,$00,$00
005A92  2  00 00 00 00  
005A96  2  F0 3C 3C F0              .byte $F0,$3C,$3C,$F0,$3C,$3C,$F0,$00
005A9A  2  3C 3C F0 00  
005A9E  2  F0 3C 3C FC              .byte $F0,$3C,$3C,$FC,$3C,$F0,$C0,$00
005AA2  2  3C F0 C0 00  
005AA6  2  00 00 C0 C0              .byte $00,$00,$C0,$C0,$00,$C0,$C0,$00
005AAA  2  00 C0 C0 00  
005AAE  2  00 00 C0 C0              .byte $00,$00,$C0,$C0,$00,$C0,$C0,$00
005AB2  2  00 C0 C0 00  
005AB6  2  F0 C0 00 00              .byte $F0,$C0,$00,$00,$00,$C0,$F0,$00
005ABA  2  00 C0 F0 00  
005ABE  2  00 00 FC 00              .byte $00,$00,$FC,$00,$FC,$00,$00,$00
005AC2  2  FC 00 00 00  
005AC6  2  00 C0 F0 3C              .byte $00,$C0,$F0,$3C,$F0,$C0,$00,$00
005ACA  2  F0 C0 00 00  
005ACE  2  F0 3C F0 C0              .byte $F0,$3C,$F0,$C0,$C0,$00,$C0,$00
005AD2  2  C0 00 C0 00  
005AD6  2  F0 3C FC CC              .byte $F0,$3C,$FC,$CC,$FC,$00,$F0,$00
005ADA  2  FC 00 F0 00  
005ADE  2  F0 3C 3C FC              .byte $F0,$3C,$3C,$FC,$3C,$3C,$3C,$00
005AE2  2  3C 3C 3C 00  
005AE6  2  F0 3C 3C F0              .byte $F0,$3C,$3C,$F0,$3C,$3C,$F0,$00
005AEA  2  3C 3C F0 00  
005AEE  2  F0 3C 00 00              .byte $F0,$3C,$00,$00,$00,$3C,$F0,$00
005AF2  2  00 3C F0 00  
005AF6  2  C0 F0 3C 3C              .byte $C0,$F0,$3C,$3C,$3C,$F0,$C0,$00
005AFA  2  3C F0 C0 00  
005AFE  2  FC 00 00 F0              .byte $FC,$00,$00,$F0,$00,$00,$FC,$00
005B02  2  00 00 FC 00  
005B06  2  FC 00 00 F0              .byte $FC,$00,$00,$F0,$00,$00,$00,$00
005B0A  2  00 00 00 00  
005B0E  2  F0 3C 00 FC              .byte $F0,$3C,$00,$FC,$3C,$3C,$F0,$00
005B12  2  3C 3C F0 00  
005B16  2  3C 3C 3C FC              .byte $3C,$3C,$3C,$FC,$3C,$3C,$3C,$00
005B1A  2  3C 3C 3C 00  
005B1E  2  FC C0 C0 C0              .byte $FC,$C0,$C0,$C0,$C0,$C0,$FC,$00
005B22  2  C0 C0 FC 00  
005B26  2  FC F0 F0 F0              .byte $FC,$F0,$F0,$F0,$F0,$F0,$C0,$00
005B2A  2  F0 F0 C0 00  
005B2E  2  3C F0 C0 00              .byte $3C,$F0,$C0,$00,$C0,$F0,$3C,$00
005B32  2  C0 F0 3C 00  
005B36  2  00 00 00 00              .byte $00,$00,$00,$00,$00,$00,$FC,$00
005B3A  2  00 00 FC 00  
005B3E  2  0F 3F FF CF              .byte $0F,$3F,$FF,$CF,$CF,$0F,$0F,$00
005B42  2  CF 0F 0F 00  
005B46  2  3C 3C 3C FC              .byte $3C,$3C,$3C,$FC,$FC,$3C,$3C,$00
005B4A  2  FC 3C 3C 00  
005B4E  2  F0 3C 3C 3C              .byte $F0,$3C,$3C,$3C,$3C,$3C,$F0,$00
005B52  2  3C 3C F0 00  
005B56  2  F0 3C 3C F0              .byte $F0,$3C,$3C,$F0,$00,$00,$00,$00
005B5A  2  00 00 00 00  
005B5E  2  F0 3C 3C 3C              .byte $F0,$3C,$3C,$3C,$CC,$F0,$3C,$00
005B62  2  CC F0 3C 00  
005B66  2  F0 3C 3C F0              .byte $F0,$3C,$3C,$F0,$F0,$3C,$3C,$00
005B6A  2  F0 3C 3C 00  
005B6E  2  F0 3C 00 F0              .byte $F0,$3C,$00,$F0,$3C,$3C,$F0,$00
005B72  2  3C 3C F0 00  
005B76  2  FC C0 C0 C0              .byte $FC,$C0,$C0,$C0,$C0,$C0,$C0,$00
005B7A  2  C0 C0 C0 00  
005B7E  2  3C 3C 3C 3C              .byte $3C,$3C,$3C,$3C,$3C,$3C,$F0,$00
005B82  2  3C 3C F0 00  
005B86  2  3C 3C 3C 3C              .byte $3C,$3C,$3C,$3C,$3C,$F0,$C0,$00
005B8A  2  3C F0 C0 00  
005B8E  2  0F 0F CF CF              .byte $0F,$0F,$CF,$CF,$FF,$3F,$0F,$00
005B92  2  FF 3F 0F 00  
005B96  2  3C 3C F0 C0              .byte $3C,$3C,$F0,$C0,$F0,$3C,$3C,$00
005B9A  2  F0 3C 3C 00  
005B9E  2  3C 3C 3C F0              .byte $3C,$3C,$3C,$F0,$C0,$C0,$C0,$00
005BA2  2  C0 C0 C0 00  
005BA6  2  FC 3C F0 C0              .byte $FC,$3C,$F0,$C0,$00,$00,$FC,$00
005BAA  2  00 00 FC 00  
005BAE  2  F0 00 00 00              .byte $F0,$00,$00,$00,$00,$00,$F0,$00
005BB2  2  00 00 F0 00  
005BB6  2  00 00 00 C0              .byte $00,$00,$00,$C0,$F0,$3C,$00,$00
005BBA  2  F0 3C 00 00  
005BBE  2  FC 3C 3C 3C              .byte $FC,$3C,$3C,$3C,$3C,$3C,$FC,$00
005BC2  2  3C 3C FC 00  
005BC6  2  C0 F0 3C 0C              .byte $C0,$F0,$3C,$0C,$00,$00,$00,$00
005BCA  2  00 00 00 00  
005BCE  2  00 00 00 00              .byte $00,$00,$00,$00,$00,$00,$00,$FF
005BD2  2  00 00 00 FF  
005BD6  2  F0 3C 00 F0              .byte $F0,$3C,$00,$F0,$00,$00,$FC,$00
005BDA  2  00 00 FC 00  
005BDE  2  00 00 F0 3C              .byte $00,$00,$F0,$3C,$FC,$3C,$FC,$00
005BE2  2  FC 3C FC 00  
005BE6  2  00 00 F0 3C              .byte $00,$00,$F0,$3C,$3C,$3C,$F0,$00
005BEA  2  3C 3C F0 00  
005BEE  2  00 00 F0 3C              .byte $00,$00,$F0,$3C,$00,$3C,$F0,$00
005BF2  2  00 3C F0 00  
005BF6  2  3C 3C FC 3C              .byte $3C,$3C,$FC,$3C,$3C,$3C,$FC,$00
005BFA  2  3C 3C FC 00  
005BFE  2  00 00 F0 3C              .byte $00,$00,$F0,$3C,$FC,$00,$F0,$00
005C02  2  FC 00 F0 00  
005C06  2  F0 00 00 F0              .byte $F0,$00,$00,$F0,$00,$00,$00,$00
005C0A  2  00 00 00 00  
005C0E  2  00 00 FC 3C              .byte $00,$00,$FC,$3C,$3C,$FC,$3C,$F0
005C12  2  3C FC 3C F0  
005C16  2  00 00 F0 3C              .byte $00,$00,$F0,$3C,$3C,$3C,$3C,$00
005C1A  2  3C 3C 3C 00  
005C1E  2  C0 00 C0 C0              .byte $C0,$00,$C0,$C0,$C0,$C0,$F0,$00
005C22  2  C0 C0 F0 00  
005C26  2  C0 00 C0 C0              .byte $C0,$00,$C0,$C0,$C0,$C0,$C0,$00
005C2A  2  C0 C0 C0 00  
005C2E  2  00 00 3C F0              .byte $00,$00,$3C,$F0,$C0,$F0,$3C,$00
005C32  2  C0 F0 3C 00  
005C36  2  C0 C0 C0 C0              .byte $C0,$C0,$C0,$C0,$C0,$C0,$F0,$00
005C3A  2  C0 C0 F0 00  
005C3E  2  00 00 3C FF              .byte $00,$00,$3C,$FF,$CF,$CF,$0F,$00
005C42  2  CF CF 0F 00  
005C46  2  00 00 F0 3C              .byte $00,$00,$F0,$3C,$3C,$3C,$3C,$00
005C4A  2  3C 3C 3C 00  
005C4E  2  00 00 F0 3C              .byte $00,$00,$F0,$3C,$3C,$3C,$F0,$00
005C52  2  3C 3C F0 00  
005C56  2  00 00 F0 3C              .byte $00,$00,$F0,$3C,$3C,$F0,$00,$00
005C5A  2  3C F0 00 00  
005C5E  2  00 00 FC 3C              .byte $00,$00,$FC,$3C,$3C,$FC,$3C,$3F
005C62  2  3C FC 3C 3F  
005C66  2  00 00 F0 3C              .byte $00,$00,$F0,$3C,$00,$00,$00,$00
005C6A  2  00 00 00 00  
005C6E  2  00 00 FC 00              .byte $00,$00,$FC,$00,$F0,$3C,$F0,$00
005C72  2  F0 3C F0 00  
005C76  2  00 00 F0 00              .byte $00,$00,$F0,$00,$00,$00,$F0,$00
005C7A  2  00 00 F0 00  
005C7E  2  00 00 3C 3C              .byte $00,$00,$3C,$3C,$3C,$3C,$FC,$00
005C82  2  3C 3C FC 00  
005C86  2  00 00 3C 3C              .byte $00,$00,$3C,$3C,$3C,$F0,$C0,$00
005C8A  2  3C F0 C0 00  
005C8E  2  00 00 0F CF              .byte $00,$00,$0F,$CF,$CF,$FF,$3C,$00
005C92  2  CF FF 3C 00  
005C96  2  00 00 3C F0              .byte $00,$00,$3C,$F0,$C0,$F0,$3C,$00
005C9A  2  C0 F0 3C 00  
005C9E  2  00 00 3C 3C              .byte $00,$00,$3C,$3C,$3C,$FC,$3C,$F0
005CA2  2  3C FC 3C F0  
005CA6  2  00 00 FC F0              .byte $00,$00,$FC,$F0,$C0,$00,$FC,$00
005CAA  2  C0 00 FC 00  
005CAE  2  F0 C0 C0 00              .byte $F0,$C0,$C0,$00,$C0,$C0,$F0,$00
005CB2  2  C0 C0 F0 00  
005CB6  2  C0 C0 C0 00              .byte $C0,$C0,$C0,$00,$C0,$C0,$C0,$00
005CBA  2  C0 C0 C0 00  
005CBE  2  00 C0 C0 FC              .byte $00,$C0,$C0,$FC,$C0,$C0,$00,$00
005CC2  2  C0 C0 00 00  
005CC6  2  00 00 00 00              .byte $00,$00,$00,$00,$00,$00,$00,$00
005CCA  2  00 00 00 00  
005CCE  2  00 00 00 00              .byte $00,$00,$00,$00,$00,$00,$00,$00
005CD2  2  00 00 00 00  
005CD6  2  A5 80 C8 91              .byte $A5,$80,$C8,$91,$74,$A9,$00,$C8
005CDA  2  74 A9 00 C8  
005CDE  2  91 74 20 60              .byte $91,$74,$20,$60,$31,$A2,$05,$20
005CE2  2  31 A2 05 20  
005CE6  2  04 41 18 60              .byte $04,$41,$18,$60,$20,$50,$31,$A0
005CEA  2  20 50 31 A0  
005CEE  2  01 B1 74 AA              .byte $01,$B1,$74,$AA,$69,$01,$29,$03
005CF2  2  69 01 29 03  
005CF6  2  85 80 D0 24              .byte $85,$80,$D0,$24,$8A,$29,$04,$D0
005CFA  2  8A 29 04 D0  
005CFE  2  16 8A 29 70              .byte $16,$8A,$29,$70,$09,$08,$A0,$00
005D02  2  09 08 A0 00  
005D06  2  91 74 C8 A5              .byte $91,$74,$C8,$A5,$7D,$29,$0C,$91
005D0A  2  7D 29 0C 91  
005D0E  2  74 20 60 31              .byte $74,$20,$60,$31,$4C,$54,$37,$A9
005D12  2  4C 54 37 A9  
005D16  2  00 A0 00 91              .byte $00,$A0,$00,$91,$74,$4C,$54,$37
005D1A  2  74 4C 54 37  
005D1E  2  8A 29 FC 05              .byte $8A,$29,$FC,$05,$80,$A0,$01,$91
005D22  2  80 A0 01 91  
005D26  2  74 20 60 31              .byte $74,$20,$60,$31,$18,$60,$A0,$01
005D2A  2  18 60 A0 01  
005D2E  2  B1 74 29 FB              .byte $B1,$74,$29,$FB,$91,$74,$60,$A0
005D32  2  91 74 60 A0  
005D36  2  05 B1 74 C9              .byte $05,$B1,$74,$C9,$00,$F0,$0B,$38
005D3A  2  00 F0 0B 38  
005D3E  2  E9 01 A0 05              .byte $E9,$01,$A0,$05,$91,$74,$18,$4C
005D42  2  91 74 18 4C  
005D46  2  56 37 A0 04              .byte $56,$37,$A0,$04,$B1,$74,$C9,$00
005D4A  2  B1 74 C9 00  
005D4E  2  F0 42 38 E9              .byte $F0,$42,$38,$E9,$01,$85,$81,$A0
005D52  2  01 85 81 A0  
005D56  2  02 B1 74 AA              .byte $02,$B1,$74,$AA,$BD,$13,$33,$85
005D5A  2  BD 13 33 85  
005D5E  2  70 A9 57 85              .byte $70,$A9,$57,$85,$71,$A4,$81,$B1
005D62  2  71 A4 81 B1  
005D66  2  70 C9 00 D0              .byte $70,$C9,$00,$D0,$27,$A0,$03,$B1
005D6A  2  27 A0 03 B1  
005D6E  2  74 C9 02 30              .byte $74,$C9,$02,$30,$0F,$18,$A5,$70
005D72  2  0F 18 A5 70  
005D76  2  69 0A 85 70              .byte $69,$0A,$85,$70,$A4,$81,$B1,$70
005D7A  2  A4 81 B1 70  
005D7E  2  C9 00 D0 10              .byte $C9,$00,$D0,$10,$A5,$81,$A0,$04
005D82  2  A5 81 A0 04  
005D86  2  91 74 A9 03              .byte $91,$74,$A9,$03,$A0,$05,$91,$74
005D8A  2  A0 05 91 74  
005D8E  2  18 4C 56 37              .byte $18,$4C,$56,$37,$38,$60,$A0,$01
005D92  2  38 60 A0 01  
005D96  2  B1 74 09 04              .byte $B1,$74,$09,$04,$91,$74,$60,$A0
005D9A  2  91 74 60 A0  
005D9E  2  05 B1 74 C9              .byte $05,$B1,$74,$C9,$00,$F0,$0E,$C9
005DA2  2  00 F0 0E C9  
005DA6  2  03 F0 51 18              .byte $03,$F0,$51,$18,$69,$01,$A0,$05
005DAA  2  69 01 A0 05  
005DAE  2  91 74 4C BE              .byte $91,$74,$4C,$BE,$37,$A0,$04,$B1
005DB2  2  37 A0 04 B1  
005DB6  2  74 C9 09 F0              .byte $74,$C9,$09,$F0,$51,$18,$69,$01
005DBA  2  51 18 69 01  
005DBE  2  85 81 A0 02              .byte $85,$81,$A0,$02,$B1,$74,$AA,$BD
005DC2  2  B1 74 AA BD  
005DC6  2  13 33 85 70              .byte $13,$33,$85,$70,$A9,$57,$85,$71
005DCA  2  A9 57 85 71  
005DCE  2  A4 81 B1 70              .byte $A4,$81,$B1,$70,$C9,$00,$D0,$36
005DD2  2  C9 00 D0 36  
005DD6  2               
005DD6  1               	.include "chars.inc"
005DD6  2               ; player ---------------
005DD6  2               
005DD6  2               left1:
005DD6  2  02 0A 2A 0C          .byte $02,$0A,$2A,$0C,$3F,$0F,$03,$0A,$C8,$CA,$0A,$00,$0A,$2A,$28,$A8
005DDA  2  3F 0F 03 0A  
005DDE  2  C8 CA 0A 00  
005DE6  2  A0 88 AA FC          .byte $A0,$88,$AA,$FC,$FC,$FC,$F0,$A8,$A8,$28,$8F,$0F,$A8,$2A,$0A,$2A
005DEA  2  FC FC F0 A8  
005DEE  2  A8 28 8F 0F  
005DF6  2               ;	defblock 16,$00
005DF6  2               left2:
005DF6  2  02 0A 2A 0C          .byte $02,$0A,$2A,$0C,$3F,$0F,$03,$0A,$08,$FA,$FA,$00,$0A,$02,$02,$0A
005DFA  2  3F 0F 03 0A  
005DFE  2  08 FA FA 00  
005E06  2  A0 88 AA FC          .byte $A0,$88,$AA,$FC,$FC,$FC,$F0,$A8,$A8,$88,$20,$00,$A0,$A0,$A0,$A0
005E0A  2  FC FC F0 A8  
005E0E  2  A8 88 20 00  
005E16  2               ;	defblock 16,$00
005E16  2               right1:
005E16  2  0A 22 AA 3F          .byte $0A,$22,$AA,$3F,$3F,$3F,$0F,$2A,$2A,$28,$F2,$F0,$2A,$A8,$A0,$A8
005E1A  2  3F 3F 0F 2A  
005E1E  2  2A 28 F2 F0  
005E26  2  80 A0 A8 30          .byte $80,$A0,$A8,$30,$FC,$F0,$C0,$A0,$23,$A3,$A0,$00,$A0,$A8,$28,$2A
005E2A  2  FC F0 C0 A0  
005E2E  2  23 A3 A0 00  
005E36  2               ;	defblock 16,$00
005E36  2               right2:
005E36  2  0A 22 AA 3F          .byte $0A,$22,$AA,$3F,$3F,$3F,$0F,$2A,$2A,$22,$08,$00,$0A,$0A,$0A,$0A
005E3A  2  3F 3F 0F 2A  
005E3E  2  2A 22 08 00  
005E46  2  80 A0 A8 30          .byte $80,$A0,$A8,$30,$FC,$F0,$C0,$A0,$20,$AF,$AF,$00,$A0,$80,$80,$A0
005E4A  2  FC F0 C0 A0  
005E4E  2  20 AF AF 00  
005E56  2               ;	defblock 16,$00
005E56  2               up1:
005E56  2  0A 2A AA 3F          .byte $0A,$2A,$AA,$3F,$3F,$3F,$0F,$2A,$AA,$CA,$0A,$00,$2A,$28,$A8,$00
005E5A  2  3F 3F 0F 2A  
005E5E  2  AA CA 0A 00  
005E66  2  A0 88 AA FC          .byte $A0,$88,$AA,$FC,$FC,$FC,$F0,$A8,$AA,$A2,$A2,$00,$A0,$A8,$28,$2A
005E6A  2  FC FC F0 A8  
005E6E  2  AA A2 A2 00  
005E76  2               ;	defblock 16,$00
005E76  2               up2:
005E76  2  0A 2A AA 3F          .byte $0A,$2A,$AA,$3F,$3F,$3F,$0F,$2A,$AA,$8A,$CA,$00,$0A,$2A,$28,$A8
005E7A  2  3F 3F 0F 2A  
005E7E  2  AA 8A CA 00  
005E86  2  A0 88 AA FC          .byte $A0,$88,$AA,$FC,$FC,$FC,$F0,$A8,$AA,$A2,$A0,$00,$A8,$28,$2A,$00
005E8A  2  FC FC F0 A8  
005E8E  2  AA A2 A0 00  
005E96  2               ;	defblock 16,$00
005E96  2               down1:
005E96  2  0A 2A AA 33          .byte $0A,$2A,$AA,$33,$3F,$3F,$0F,$2A,$FA,$FA,$0A,$00,$2A,$28,$A8,$00
005E9A  2  3F 3F 0F 2A  
005E9E  2  FA FA 0A 00  
005EA6  2  A0 88 AA CC          .byte $A0,$88,$AA,$CC,$FC,$FC,$F0,$A8,$AA,$A3,$A0,$00,$A0,$A8,$28,$2A
005EAA  2  FC FC F0 A8  
005EAE  2  AA A3 A0 00  
005EB6  2               ;	defblock 16,$00
005EB6  2               down2:
005EB6  2  0A 2A AA 33          .byte $0A,$2A,$AA,$33,$3F,$3F,$0F,$2A,$AA,$CA,$0A,$00,$0A,$2A,$28,$A8
005EBA  2  3F 3F 0F 2A  
005EBE  2  AA CA 0A 00  
005EC6  2  A0 88 AA CC          .byte $A0,$88,$AA,$CC,$FC,$FC,$F0,$A8,$AF,$AF,$A0,$00,$A8,$28,$2A,$00
005ECA  2  FC FC F0 A8  
005ECE  2  AF AF A0 00  
005ED6  2               ;	defblock 16,$00
005ED6  2               demise1:
005ED6  2  0A 2A AA 33          .byte $0A,$2A,$AA,$33,$3F,$3F,$0F,$2A,$FA,$FA,$0A,$00,$20,$82,$A2,$22
005EDA  2  3F 3F 0F 2A  
005EDE  2  FA FA 0A 00  
005EE6  2  A0 88 AA CC          .byte $A0,$88,$AA,$CC,$FC,$FC,$F0,$A8,$AF,$AF,$A0,$00,$88,$02,$88,$88
005EEA  2  FC FC F0 A8  
005EEE  2  AF AF A0 00  
005EF6  2               ;	defblock 16,$00
005EF6  2               demise2:
005EF6  2  0A 2A AA 00          .byte $0A,$2A,$AA,$00,$00,$03,$00,$22,$0A,$02,$22,$82,$8A,$82,$A2,$22
005EFA  2  00 03 00 22  
005EFE  2  0A 02 22 82  
005F06  2  A0 88 AA 00          .byte $A0,$88,$AA,$00,$F0,$C0,$A0,$80,$00,$08,$28,$02,$22,$0A,$88,$88
005F0A  2  F0 C0 A0 80  
005F0E  2  00 08 28 02  
005F16  2               ;	defblock 16,$00
005F16  2               demise3:
005F16  2  0C 03 0F 03          .byte $0C,$03,$0F,$03,$0C,$80,$22,$0A,$02,$22,$22,$82,$8A,$82,$A2,$22
005F1A  2  0C 80 22 0A  
005F1E  2  02 22 22 82  
005F26  2  CC F0 3C F0          .byte $CC,$F0,$3C,$F0,$CC,$80,$88,$0A,$28,$20,$88,$02,$22,$0A,$88,$88
005F2A  2  CC 80 88 0A  
005F2E  2  28 20 88 02  
005F36  2               ;	defblock 16,$00
005F36  2               demise4:
005F36  2  0C 03 0F 03          .byte $0C,$03,$0F,$03,$0C,$C0,$22,$0A,$02,$32,$22,$82,$8A,$82,$A2,$22
005F3A  2  0C C0 22 0A  
005F3E  2  02 32 22 82  
005F46  2  CC F0 FC F0          .byte $CC,$F0,$FC,$F0,$CC,$80,$8C,$0B,$28,$20,$88,$02,$32,$0A,$88,$88
005F4A  2  CC 80 8C 0B  
005F4E  2  28 20 88 02  
005F56  2               ;	defblock 16,$00
005F56  2               
005F56  2               ; project ---------------------
005F56  2               
005F56  2               ball1:
005F56  2  05 14 55 75          .byte $05,$14,$55,$75,$55,$51,$14,$05
005F5A  2  55 51 14 05  
005F5E  2  50 14 45 55          .byte $50,$14,$45,$55,$5D,$55,$14,$50
005F62  2  5D 55 14 50  
005F66  2               ball2:
005F66  2  05 15 51 45          .byte $05,$15,$51,$45,$45,$55,$17,$05
005F6A  2  45 55 17 05  
005F6E  2  50 D4 55 51          .byte $50,$D4,$55,$51,$51,$45,$54,$50
005F72  2  51 45 54 50  
005F76  2               boomerang1:
005F76  2  05 15 54 50          .byte $05,$15,$54,$50,$50,$50,$10,$03
005F7A  2  50 50 10 03  
005F7E  2  50 54 00 00          .byte $50,$54,$00,$00,$00,$00,$0C,$C0
005F82  2  00 00 0C C0  
005F86  2               boomerang2:
005F86  2  04 10 00 00          .byte $04,$10,$00,$00,$00,$00,$3F,$0F
005F8A  2  00 00 3F 0F  
005F8E  2  40 0C 0F 0F          .byte $40,$0C,$0F,$0F,$0F,$3F,$FC,$F3
005F92  2  0F 3F FC F3  
005F96  2               mace1:
005F96  2  CF 3F FC 3F          .byte $CF,$3F,$FC,$3F,$3F,$F3,$FF,$30
005F9A  2  3F F3 FF 30  
005F9E  2  3F FC 3F CC          .byte $3F,$FC,$3F,$CC,$FC,$FF,$FC,$C3
005FA2  2  FC FF FC C3  
005FA6  2               mace2:
005FA6  2  CC 3F FF 3F          .byte $CC,$3F,$FF,$3F,$33,$FC,$3F,$CC
005FAA  2  33 FC 3F CC  
005FAE  2  33 FC CF FC          .byte $33,$FC,$CF,$FC,$FC,$3F,$FC,$33
005FB2  2  FC 3F FC 33  
005FB6  2               fire1:
005FB6  2  0D C0 00 07          .byte $0D,$C0,$00,$07,$1C,$34,$07,$01
005FBA  2  1C 34 07 01  
005FBE  2  00 D0 0C 41          .byte $00,$D0,$0C,$41,$33,$01,$0C,$D0
005FC2  2  33 01 0C D0  
005FC6  2               fire2:
005FC6  2  0F 10 C0 44          .byte $0F,$10,$C0,$44,$C3,$10,$07,$00
005FCA  2  C3 10 07 00  
005FCE  2  40 D0 3C 1C          .byte $40,$D0,$3C,$1C,$70,$00,$01,$70
005FD2  2  70 00 01 70  
005FD6  2               
005FD6  2               ; Enemies ------------------
005FD6  2               
005FD6  2               birdld1:
005FD6  2  00 00 01 05          .byte $00,$00,$01,$05,$05,$05,$01,$04,$15,$75,$54,$40
005FDA  2  05 05 01 04  
005FDE  2  15 75 54 40  
005FE2  2  00 50 51 45          .byte $00,$50,$51,$45,$15,$54,$54,$55,$15,$45,$00,$00
005FE6  2  15 54 54 55  
005FEA  2  15 45 00 00  
005FEE  2  10 40 45 54          .byte $10,$40,$45,$54,$00,$14,$54,$54,$50,$40,$00,$00
005FF2  2  00 14 54 54  
005FF6  2  50 40 00 00  
005FFA  2               ;	defblock 28,$05
005FFA  2               birdld2:
005FFA  2  05 15 15 15          .byte $05,$15,$15,$15,$05,$05,$01,$04,$15,$75,$54,$40
005FFE  2  05 05 01 04  
006002  2  15 75 54 40  
006006  2  00 00 00 45          .byte $00,$00,$00,$45,$55,$55,$54,$55,$15,$45,$01,$00
00600A  2  55 55 54 55  
00600E  2  15 45 01 00  
006012  2  14 50 55 50          .byte $14,$50,$55,$50,$40,$00,$00,$40,$50,$55,$55,$14
006016  2  40 00 00 40  
00601A  2  50 55 55 14  
00601E  2               ;	defblock 28,$50
00601E  2               birdld3:
00601E  2  14 15 15 15          .byte $14,$15,$15,$15,$05,$05,$01,$04,$15,$75,$44,$04
006022  2  05 05 01 04  
006026  2  15 75 44 04  
00602A  2  00 00 40 45          .byte $00,$00,$40,$45,$55,$55,$54,$55,$15,$45,$01,$00
00602E  2  55 55 54 55  
006032  2  15 45 01 00  
006036  2  14 50 55 50          .byte $14,$50,$55,$50,$40,$00,$00,$40,$54,$55,$55,$15
00603A  2  40 00 00 40  
00603E  2  54 55 55 15  
006042  2               ;	defblock 28,$06
006042  2               birdld4:
006042  2  04 15 15 15          .byte $04,$15,$15,$15,$05,$05,$01,$04,$15,$75,$54,$50
006046  2  05 05 01 04  
00604A  2  15 75 54 50  
00604E  2  00 01 01 45          .byte $00,$01,$01,$45,$55,$55,$54,$55,$15,$45,$01,$00
006052  2  55 55 54 55  
006056  2  15 45 01 00  
00605A  2  50 45 54 40          .byte $50,$45,$54,$40,$00,$00,$00,$00,$40,$54,$54,$50
00605E  2  00 00 00 00  
006062  2  40 54 54 50  
006066  2               ;	defblock 28,$60
006066  2               birdrd1:
006066  2  04 01 51 15          .byte $04,$01,$51,$15,$00,$14,$15,$15,$05,$01,$00,$00
00606A  2  00 14 15 15  
00606E  2  05 01 00 00  
006072  2  00 05 45 51          .byte $00,$05,$45,$51,$54,$15,$15,$55,$54,$51,$00,$00
006076  2  54 15 15 55  
00607A  2  54 51 00 00  
00607E  2  00 00 40 50          .byte $00,$00,$40,$50,$50,$50,$40,$10,$54,$5D,$15,$01
006082  2  50 50 40 10  
006086  2  54 5D 15 01  
00608A  2               ;	defblock 28,$07
00608A  2               birdrd2:
00608A  2  14 05 55 05          .byte $14,$05,$55,$05,$01,$00,$00,$01,$05,$55,$55,$14
00608E  2  01 00 00 01  
006092  2  05 55 55 14  
006096  2  00 00 00 51          .byte $00,$00,$00,$51,$55,$55,$15,$55,$54,$51,$40,$00
00609A  2  55 55 15 55  
00609E  2  54 51 40 00  
0060A2  2  50 54 54 54          .byte $50,$54,$54,$54,$50,$50,$40,$10,$54,$5D,$15,$01
0060A6  2  50 50 40 10  
0060AA  2  54 5D 15 01  
0060AE  2               ;	defblock 28,$70
0060AE  2               birdrd3:
0060AE  2  14 05 55 05          .byte $14,$05,$55,$05,$01,$00,$00,$01,$15,$55,$55,$54
0060B2  2  01 00 00 01  
0060B6  2  15 55 55 54  
0060BA  2  00 00 01 51          .byte $00,$00,$01,$51,$55,$55,$15,$55,$54,$51,$40,$00
0060BE  2  55 55 15 55  
0060C2  2  54 51 40 00  
0060C6  2  14 54 54 54          .byte $14,$54,$54,$54,$50,$50,$40,$10,$54,$5D,$11,$10
0060CA  2  50 50 40 10  
0060CE  2  54 5D 11 10  
0060D2  2               ;	defblock 28,$08
0060D2  2               birdrd4:
0060D2  2  05 51 15 01          .byte $05,$51,$15,$01,$00,$00,$00,$00,$01,$15,$15,$05
0060D6  2  00 00 00 00  
0060DA  2  01 15 15 05  
0060DE  2  00 40 40 51          .byte $00,$40,$40,$51,$55,$55,$15,$55,$54,$51,$40,$00
0060E2  2  55 55 15 55  
0060E6  2  54 51 40 00  
0060EA  2  10 54 54 54          .byte $10,$54,$54,$54,$50,$50,$40,$10,$54,$5D,$15,$05
0060EE  2  50 50 40 10  
0060F2  2  54 5D 15 05  
0060F6  2               ;	defblock 28,$80
0060F6  2               
0060F6  2               waspld1:
0060F6  2  15 40 40 40          .byte $15,$40,$40,$40,$10,$05,$00,$03,$45,$15,$54,$51
0060FA  2  10 05 00 03  
0060FE  2  45 15 54 51  
006102  2  00 40 11 13          .byte $00,$40,$11,$13,$55,$DD,$75,$5D,$C4,$04,$01,$00
006106  2  55 DD 75 5D  
00610A  2  C4 04 01 00  
00610E  2  01 D4 74 5C          .byte $01,$D4,$74,$5C,$D0,$00,$50,$04,$01,$01,$01,$54
006112  2  D0 00 50 04  
006116  2  01 01 01 54  
00611A  2               ;	defblock 28,$08
00611A  2               waspld2:
00611A  2  01 04 10 10          .byte $01,$04,$10,$10,$10,$05,$00,$03,$45,$15,$54,$51
00611E  2  10 05 00 03  
006122  2  45 15 54 51  
006126  2  00 40 11 13          .byte $00,$40,$11,$13,$55,$DD,$75,$5D,$C4,$04,$01,$00
00612A  2  55 DD 75 5D  
00612E  2  C4 04 01 00  
006132  2  01 D4 74 5C          .byte $01,$D4,$74,$5C,$D0,$00,$50,$04,$01,$04,$50,$00
006136  2  D0 00 50 04  
00613A  2  01 04 50 00  
00613E  2               ;	defblock 28,$08
00613E  2               waspld3:
00613E  2  01 04 10 10          .byte $01,$04,$10,$10,$04,$01,$00,$03,$45,$15,$54,$51
006142  2  04 01 00 03  
006146  2  45 15 54 51  
00614A  2  40 10 11 13          .byte $40,$10,$11,$13,$55,$DD,$75,$5D,$C4,$01,$00,$00
00614E  2  55 DD 75 5D  
006152  2  C4 01 00 00  
006156  2  01 D4 74 5C          .byte $01,$D4,$74,$5C,$D0,$00,$54,$01,$01,$04,$50,$00
00615A  2  D0 00 54 01  
00615E  2  01 04 50 00  
006162  2               ;	defblock 28,$08
006162  2               waspld4:
006162  2  05 10 10 10          .byte $05,$10,$10,$10,$10,$05,$00,$03,$45,$15,$54,$51
006166  2  10 05 00 03  
00616A  2  45 15 54 51  
00616E  2  00 40 11 13          .byte $00,$40,$11,$13,$55,$DD,$75,$5D,$C4,$04,$01,$00
006172  2  55 DD 75 5D  
006176  2  C4 04 01 00  
00617A  2  01 D4 74 5C          .byte $01,$D4,$74,$5C,$D0,$00,$50,$04,$01,$01,$54,$00
00617E  2  D0 00 50 04  
006182  2  01 01 54 00  
006186  2               ;	defblock 28,$08
006186  2               wasprd1:
006186  2  40 17 1D 35          .byte $40,$17,$1D,$35,$07,$00,$05,$10,$40,$40,$40,$15
00618A  2  07 00 05 10  
00618E  2  40 40 40 15  
006192  2  00 01 44 C4          .byte $00,$01,$44,$C4,$55,$77,$5D,$75,$13,$10,$40,$00
006196  2  55 77 5D 75  
00619A  2  13 10 40 00  
00619E  2  54 01 01 01          .byte $54,$01,$01,$01,$04,$50,$00,$C0,$51,$54,$15,$45
0061A2  2  04 50 00 C0  
0061A6  2  51 54 15 45  
0061AA  2               ;	defblock 28,$08
0061AA  2               wasprd2:
0061AA  2  40 17 1D 35          .byte $40,$17,$1D,$35,$07,$00,$05,$10,$40,$10,$05,$00
0061AE  2  07 00 05 10  
0061B2  2  40 10 05 00  
0061B6  2  00 01 44 C4          .byte $00,$01,$44,$C4,$55,$77,$5D,$75,$13,$10,$40,$00
0061BA  2  55 77 5D 75  
0061BE  2  13 10 40 00  
0061C2  2  40 10 04 04          .byte $40,$10,$04,$04,$04,$50,$00,$C0,$51,$54,$15,$45
0061C6  2  04 50 00 C0  
0061CA  2  51 54 15 45  
0061CE  2               ;	defblock 28,$08
0061CE  2               wasprd3:
0061CE  2  40 17 1D 35          .byte $40,$17,$1D,$35,$07,$00,$15,$40,$40,$10,$05,$00
0061D2  2  07 00 15 40  
0061D6  2  40 10 05 00  
0061DA  2  01 04 44 C4          .byte $01,$04,$44,$C4,$55,$77,$5D,$75,$13,$40,$00,$00
0061DE  2  55 77 5D 75  
0061E2  2  13 40 00 00  
0061E6  2  40 10 04 04          .byte $40,$10,$04,$04,$10,$40,$00,$C0,$51,$54,$15,$45
0061EA  2  10 40 00 C0  
0061EE  2  51 54 15 45  
0061F2  2               ;	defblock 28,$08
0061F2  2               wasprd4:
0061F2  2  40 17 1D 35          .byte $40,$17,$1D,$35,$07,$00,$05,$10,$40,$40,$15,$00
0061F6  2  07 00 05 10  
0061FA  2  40 40 15 00  
0061FE  2  00 01 44 C4          .byte $00,$01,$44,$C4,$55,$77,$5D,$75,$13,$10,$40,$00
006202  2  55 77 5D 75  
006206  2  13 10 40 00  
00620A  2  50 04 04 04          .byte $50,$04,$04,$04,$04,$50,$00,$C0,$51,$54,$15,$45
00620E  2  04 50 00 C0  
006212  2  51 54 15 45  
006216  2               ;	defblock 28,$08
006216  2               
006216  2               snakeld1:
006216  2  00 01 07 14          .byte $00,$01,$07,$14,$1D,$05,$00,$14,$51,$55,$05,$04
00621A  2  1D 05 00 14  
00621E  2  51 55 05 04  
006222  2  07 75 50 00          .byte $07,$75,$50,$00,$57,$DD,$00,$01,$5D,$D5,$00,$00
006226  2  57 DD 00 01  
00622A  2  5D D5 00 00  
00622E  2  70 00 00 D0          .byte $70,$00,$00,$D0,$5C,$05,$35,$DC,$50,$00,$00,$00
006232  2  5C 05 35 DC  
006236  2  50 00 00 00  
00623A  2               ;	defblock 28,$40
00623A  2               snakeld2:
00623A  2  00 00 03 01          .byte $00,$00,$03,$01,$00,$00,$00,$14,$51,$55,$05,$04
00623E  2  00 00 00 14  
006242  2  51 55 05 04  
006246  2  37 55 40 71          .byte $37,$55,$40,$71,$D7,$00,$15,$75,$51,$D0,$00,$00
00624A  2  D7 00 15 75  
00624E  2  51 D0 00 00  
006252  2  74 50 00 74          .byte $74,$50,$00,$74,$5D,$05,$03,$D5,$74,$00,$00,$00
006256  2  5D 05 03 D5  
00625A  2  74 00 00 00  
00625E  2               ;	defblock 28,$40
00625E  2               snakeld3:
00625E  2  00 05 1D 14          .byte $00,$05,$1D,$14,$1D,$05,$03,$14,$51,$55,$05,$04
006262  2  1D 05 03 14  
006266  2  51 55 05 04  
00626A  2  01 C5 53 34          .byte $01,$C5,$53,$34,$05,$C3,$41,$70,$50,$C0,$40,$00
00626E  2  05 C3 41 70  
006272  2  50 C0 40 00  
006276  2  C0 00 40 70          .byte $C0,$00,$40,$70,$14,$4D,$45,$D3,$55,$1C,$00,$00
00627A  2  14 4D 45 D3  
00627E  2  55 1C 00 00  
006282  2               ;	defblock 28,$40
006282  2               snakeld4:
006282  2  00 01 00 00          .byte $00,$01,$00,$00,$00,$01,$03,$14,$51,$55,$05,$04
006286  2  00 01 03 14  
00628A  2  51 55 05 04  
00628E  2  5D D0 5D 00          .byte $5D,$D0,$5D,$00,$54,$DD,$51,$70,$54,$D4,$40,$00
006292  2  54 DD 51 70  
006296  2  54 D4 40 00  
00629A  2  00 00 70 54          .byte $00,$00,$70,$54,$1D,$05,$43,$D5,$1C,$00,$00,$00
00629E  2  1D 05 43 D5  
0062A2  2  1C 00 00 00  
0062A6  2               ;	defblock 28,$40
0062A6  2               snakerd1:
0062A6  2  0D 00 00 07          .byte $0D,$00,$00,$07,$35,$50,$5C,$37,$05,$00,$00,$00
0062AA  2  35 50 5C 37  
0062AE  2  05 00 00 00  
0062B2  2  D0 5D 05 00          .byte $D0,$5D,$05,$00,$D5,$77,$00,$40,$75,$57,$00,$00
0062B6  2  D5 77 00 40  
0062BA  2  75 57 00 00  
0062BE  2  00 40 D0 14          .byte $00,$40,$D0,$14,$74,$50,$00,$14,$45,$55,$50,$10
0062C2  2  74 50 00 14  
0062C6  2  45 55 50 10  
0062CA  2               ;	defblock 28,$40
0062CA  2               snakerd2:
0062CA  2  1D 05 00 1D          .byte $1D,$05,$00,$1D,$75,$50,$C0,$57,$1D,$00,$00,$00
0062CE  2  75 50 C0 57  
0062D2  2  1D 00 00 00  
0062D6  2  DC 55 01 4D          .byte $DC,$55,$01,$4D,$D7,$00,$54,$5D,$45,$07,$00,$00
0062DA  2  D7 00 54 5D  
0062DE  2  45 07 00 00  
0062E2  2  00 00 C0 40          .byte $00,$00,$C0,$40,$00,$00,$00,$14,$45,$55,$50,$10
0062E6  2  00 00 00 14  
0062EA  2  45 55 50 10  
0062EE  2               ;	defblock 28,$40
0062EE  2               snakerd3:
0062EE  2  03 00 01 0D          .byte $03,$00,$01,$0D,$14,$71,$51,$C7,$55,$34,$00,$00
0062F2  2  14 71 51 C7  
0062F6  2  55 34 00 00  
0062FA  2  40 53 C5 1C          .byte $40,$53,$C5,$1C,$50,$C3,$41,$0D,$05,$03,$01,$00
0062FE  2  50 C3 41 0D  
006302  2  05 03 01 00  
006306  2  00 50 74 14          .byte $00,$50,$74,$14,$74,$50,$C0,$14,$45,$55,$50,$10
00630A  2  74 50 C0 14  
00630E  2  45 55 50 10  
006312  2               ;	defblock 28,$40
006312  2               snakerd4:
006312  2  00 00 0D 15          .byte $00,$00,$0D,$15,$74,$50,$C1,$57,$34,$00,$00,$00
006316  2  74 50 C1 57  
00631A  2  34 00 00 00  
00631E  2  75 07 75 00          .byte $75,$07,$75,$00,$15,$77,$45,$0D,$15,$17,$01,$00
006322  2  15 77 45 0D  
006326  2  15 17 01 00  
00632A  2  00 40 00 00          .byte $00,$40,$00,$00,$00,$40,$C0,$14,$45,$55,$50,$10
00632E  2  00 40 C0 14  
006332  2  45 55 50 10  
006336  2               ;	defblock 28,$40
006336  2               
006336  2               lizardld1:
006336  2  00 00 04 15          .byte $00,$00,$04,$15,$10,$14,$0D,$0D,$17,$75,$54,$10
00633A  2  10 14 0D 0D  
00633E  2  17 75 54 10  
006342  2  05 14 04 17          .byte $05,$14,$04,$17,$17,$75,$75,$5C,$50,$14,$05,$01
006346  2  17 75 75 5C  
00634A  2  50 14 05 01  
00634E  2  00 04 01 5D          .byte $00,$04,$01,$5D,$5C,$C0,$50,$14,$05,$04,$40,$00
006352  2  5C C0 50 14  
006356  2  05 04 40 00  
00635A  2               ;	defblock 28,$40
00635A  2               lizardld2:
00635A  2  00 00 40 50          .byte $00,$00,$40,$50,$40,$14,$0D,$0D,$17,$75,$54,$10
00635E  2  40 14 0D 0D  
006362  2  17 75 54 10  
006366  2  14 50 14 17          .byte $14,$50,$14,$17,$17,$75,$75,$5C,$50,$14,$05,$01
00636A  2  17 75 75 5C  
00636E  2  50 14 05 01  
006372  2  00 04 01 5D          .byte $00,$04,$01,$5D,$5C,$C0,$40,$50,$15,$04,$40,$00
006376  2  5C C0 40 50  
00637A  2  15 04 40 00  
00637E  2               ;	defblock 28,$40
00637E  2               lizardld3:
00637E  2  00 01 10 50          .byte $00,$01,$10,$50,$10,$14,$0D,$0D,$17,$75,$54,$10
006382  2  10 14 0D 0D  
006386  2  17 75 54 10  
00638A  2  40 40 50 17          .byte $40,$40,$50,$17,$17,$75,$75,$5C,$50,$10,$15,$04
00638E  2  17 75 75 5C  
006392  2  50 10 15 04  
006396  2  00 05 34 5C          .byte $00,$05,$34,$5C,$50,$C0,$40,$50,$50,$14,$10,$00
00639A  2  50 C0 40 50  
00639E  2  50 14 10 00  
0063A2  2               ;	defblock 28,$40
0063A2  2               lizardld4:
0063A2  2  00 01 00 40          .byte $00,$01,$00,$40,$50,$14,$0D,$0D,$17,$75,$54,$10
0063A6  2  50 14 0D 0D  
0063AA  2  17 75 54 10  
0063AE  2  40 50 10 17          .byte $40,$50,$10,$17,$17,$75,$75,$5C,$50,$10,$15,$04
0063B2  2  17 75 75 5C  
0063B6  2  50 10 15 04  
0063BA  2  00 05 34 5C          .byte $00,$05,$34,$5C,$50,$C0,$40,$50,$15,$04,$00,$00
0063BE  2  50 C0 40 50  
0063C2  2  15 04 00 00  
0063C6  2               ;	defblock 28,$40
0063C6  2               lizardrd1:
0063C6  2  00 10 40 75          .byte $00,$10,$40,$75,$35,$03,$05,$14,$50,$10,$01,$00
0063CA  2  35 03 05 14  
0063CE  2  50 10 01 00  
0063D2  2  50 14 10 D4          .byte $50,$14,$10,$D4,$D4,$5D,$5D,$35,$05,$14,$50,$40
0063D6  2  D4 5D 5D 35  
0063DA  2  05 14 50 40  
0063DE  2  00 00 10 54          .byte $00,$00,$10,$54,$04,$14,$70,$70,$D4,$5D,$15,$04
0063E2  2  04 14 70 70  
0063E6  2  D4 5D 15 04  
0063EA  2               ;	defblock 28,$40
0063EA  2               lizardrd2:
0063EA  2  00 10 40 75          .byte $00,$10,$40,$75,$35,$03,$01,$05,$54,$10,$01,$00
0063EE  2  35 03 01 05  
0063F2  2  54 10 01 00  
0063F6  2  14 05 14 D4          .byte $14,$05,$14,$D4,$D4,$5D,$5D,$35,$05,$14,$50,$40
0063FA  2  D4 5D 5D 35  
0063FE  2  05 14 50 40  
006402  2  00 00 01 05          .byte $00,$00,$01,$05,$01,$14,$70,$70,$D4,$5D,$15,$04
006406  2  01 14 70 70  
00640A  2  D4 5D 15 04  
00640E  2               ;	defblock 28,$40
00640E  2               lizardrd3:
00640E  2  00 50 1C 35          .byte $00,$50,$1C,$35,$05,$03,$01,$05,$05,$14,$04,$00
006412  2  05 03 01 05  
006416  2  05 14 04 00  
00641A  2  01 01 05 D4          .byte $01,$01,$05,$D4,$D4,$5D,$5D,$35,$05,$04,$54,$10
00641E  2  D4 5D 5D 35  
006422  2  05 04 54 10  
006426  2  00 40 04 05          .byte $00,$40,$04,$05,$04,$14,$70,$70,$D4,$5D,$15,$04
00642A  2  04 14 70 70  
00642E  2  D4 5D 15 04  
006432  2               ;	defblock 28,$40
006432  2               lizardrd4:
006432  2  00 50 1C 35          .byte $00,$50,$1C,$35,$05,$03,$01,$05,$54,$10,$00,$00
006436  2  05 03 01 05  
00643A  2  54 10 00 00  
00643E  2  01 05 04 D4          .byte $01,$05,$04,$D4,$D4,$5D,$5D,$35,$05,$04,$54,$10
006442  2  D4 5D 5D 35  
006446  2  05 04 54 10  
00644A  2  00 40 00 01          .byte $00,$40,$00,$01,$05,$14,$70,$70,$D4,$5D,$15,$04
00644E  2  05 14 70 70  
006452  2  D4 5D 15 04  
006456  2               ;	defblock 28,$40
006456  2               
006456  2               beastld1:
006456  2  00 00 10 15          .byte $00,$00,$10,$15,$1D,$55,$01,$14,$00,$00,$01,$00
00645A  2  1D 55 01 14  
00645E  2  00 00 01 00  
006462  2  00 05 15 1D          .byte $00,$05,$15,$1D,$55,$55,$75,$55,$14,$14,$50,$40
006466  2  55 55 75 55  
00646A  2  14 14 50 40  
00646E  2  00 51 D4 55          .byte $00,$51,$D4,$55,$55,$5D,$D5,$54,$50,$50,$15,$04
006472  2  55 5D D5 54  
006476  2  50 50 15 04  
00647A  2               ;	defblock 28,$40
00647A  2               beastld2:
00647A  2  00 10 15 1D          .byte $00,$10,$15,$1D,$55,$01,$14,$00,$00,$00,$00,$00
00647E  2  55 01 14 00  
006482  2  00 00 00 00  
006486  2  05 15 1D 55          .byte $05,$15,$1D,$55,$55,$75,$55,$14,$14,$14,$50,$10
00648A  2  55 75 55 14  
00648E  2  14 14 50 10  
006492  2  51 D4 55 55          .byte $51,$D4,$55,$55,$5D,$D5,$54,$50,$50,$50,$14,$10
006496  2  5D D5 54 50  
00649A  2  50 50 14 10  
00649E  2               ;	defblock 28,$40
00649E  2               beastld3:
00649E  2  00 10 15 1D          .byte $00,$10,$15,$1D,$55,$15,$00,$00,$00,$00,$00,$00
0064A2  2  55 15 00 00  
0064A6  2  00 00 00 00  
0064AA  2  05 15 1D 55          .byte $05,$15,$1D,$55,$55,$75,$55,$14,$14,$14,$05,$14
0064AE  2  55 75 55 14  
0064B2  2  14 14 05 14  
0064B6  2  51 D4 55 55          .byte $51,$D4,$55,$55,$5D,$D5,$54,$50,$50,$50,$40,$40
0064BA  2  5D D5 54 50  
0064BE  2  50 50 40 40  
0064C2  2               ;	defblock 28,$40
0064C2  2               beastld4:
0064C2  2  00 10 15 1D          .byte $00,$10,$15,$1D,$55,$01,$14,$00,$00,$00,$00,$00
0064C6  2  55 01 14 00  
0064CA  2  00 00 00 00  
0064CE  2  05 15 1D 55          .byte $05,$15,$1D,$55,$55,$75,$55,$14,$14,$14,$05,$04
0064D2  2  55 75 55 14  
0064D6  2  14 14 05 04  
0064DA  2  51 D4 55 55          .byte $51,$D4,$55,$55,$5D,$D5,$54,$50,$50,$50,$14,$10
0064DE  2  5D D5 54 50  
0064E2  2  50 50 14 10  
0064E6  2               ;	defblock 28,$40
0064E6  2               beastrd1:
0064E6  2  00 45 17 55          .byte $00,$45,$17,$55,$55,$75,$57,$15,$05,$05,$54,$10
0064EA  2  55 75 57 15  
0064EE  2  05 05 54 10  
0064F2  2  00 50 54 74          .byte $00,$50,$54,$74,$55,$55,$5D,$55,$14,$14,$05,$01
0064F6  2  55 55 5D 55  
0064FA  2  14 14 05 01  
0064FE  2  00 00 04 54          .byte $00,$00,$04,$54,$74,$55,$40,$14,$00,$00,$40,$00
006502  2  74 55 40 14  
006506  2  00 00 40 00  
00650A  2               ;	defblock 28,$40
00650A  2               beastrd2:
00650A  2  45 17 55 55          .byte $45,$17,$55,$55,$75,$57,$15,$05,$05,$05,$14,$04
00650E  2  75 57 15 05  
006512  2  05 05 14 04  
006516  2  50 54 74 55          .byte $50,$54,$74,$55,$55,$5D,$55,$14,$14,$14,$05,$04
00651A  2  55 5D 55 14  
00651E  2  14 14 05 04  
006522  2  00 04 54 74          .byte $00,$04,$54,$74,$55,$40,$14,$00,$00,$00,$00,$00
006526  2  55 40 14 00  
00652A  2  00 00 00 00  
00652E  2               ;	defblock 28,$40
00652E  2               beastrd3:
00652E  2  45 17 55 55          .byte $45,$17,$55,$55,$75,$57,$15,$05,$05,$05,$01,$01
006532  2  75 57 15 05  
006536  2  05 05 01 01  
00653A  2  50 54 74 55          .byte $50,$54,$74,$55,$55,$5D,$55,$14,$14,$14,$50,$14
00653E  2  55 5D 55 14  
006542  2  14 14 50 14  
006546  2  00 04 54 74          .byte $00,$04,$54,$74,$55,$54,$00,$00,$00,$00,$00,$00
00654A  2  55 54 00 00  
00654E  2  00 00 00 00  
006552  2               ;	defblock 28,$40
006552  2               beastrd4:
006552  2  45 17 55 55          .byte $45,$17,$55,$55,$75,$57,$15,$05,$05,$05,$14,$04
006556  2  75 57 15 05  
00655A  2  05 05 14 04  
00655E  2  50 54 74 55          .byte $50,$54,$74,$55,$55,$5D,$55,$14,$14,$14,$50,$10
006562  2  55 5D 55 14  
006566  2  14 14 50 10  
00656A  2  00 04 54 74          .byte $00,$04,$54,$74,$55,$40,$14,$00,$00,$00,$00,$00
00656E  2  55 40 14 00  
006572  2  00 00 00 00  
006576  2               ;	defblock 28,$40
006576  2               
006576  2               emerge1:
006576  2  40 10 00 00          .byte $40,$10,$00,$00,$00,$20,$80,$00,$00,$00,$10,$04
00657A  2  00 20 80 00  
00657E  2  00 00 10 04  
006582  2  00 10 40 00          .byte $00,$10,$40,$00,$03,$00,$00,$00,$00,$00,$10,$04
006586  2  03 00 00 00  
00658A  2  00 00 10 04  
00658E  2  04 01 00 00          .byte $04,$01,$00,$00,$00,$C0,$00,$00,$00,$04,$10,$00
006592  2  00 C0 00 00  
006596  2  00 04 10 00  
00659A  2               ;	defblock 28,$40
00659A  2               emerge2:
00659A  2  40 10 10 04          .byte $40,$10,$10,$04,$28,$88,$A0,$00,$00,$40,$14,$01
00659E  2  28 88 A0 00  
0065A2  2  00 40 14 01  
0065A6  2  10 40 10 40          .byte $10,$40,$10,$40,$03,$00,$00,$03,$04,$10,$10,$04
0065AA  2  03 00 00 03  
0065AE  2  04 10 10 04  
0065B2  2  04 01 04 10          .byte $04,$01,$04,$10,$04,$C0,$C0,$01,$04,$04,$10,$00
0065B6  2  04 C0 C0 01  
0065BA  2  04 04 10 00  
0065BE  2               ;	defblock 28,$40
0065BE  2               emerge3:
0065BE  2  00 40 41 14          .byte $00,$40,$41,$14,$10,$88,$10,$00,$14,$40,$13,$0C
0065C2  2  10 88 10 00  
0065C6  2  14 40 13 0C  
0065CA  2  14 41 00 00          .byte $14,$41,$00,$00,$10,$00,$30,$0F,$00,$05,$10,$00
0065CE  2  10 00 30 0F  
0065D2  2  00 05 10 00  
0065D6  2  10 04 10 40          .byte $10,$04,$10,$40,$10,$04,$01,$04,$10,$00,$41,$04
0065DA  2  10 04 01 04  
0065DE  2  10 00 41 04  
0065E2  2               ;	defblock 28,$40
0065E2  2               emerge4:
0065E2  2  00 40 41 14          .byte $00,$40,$41,$14,$10,$44,$11,$14,$41,$10,$00,$01
0065E6  2  10 44 11 14  
0065EA  2  41 10 00 01  
0065EE  2  14 41 00 04          .byte $14,$41,$00,$04,$10,$40,$30,$07,$00,$45,$D0,$00
0065F2  2  10 40 30 07  
0065F6  2  00 45 D0 00  
0065FA  2  10 44 01 14          .byte $10,$44,$01,$14,$04,$01,$C4,$10,$04,$01,$44,$50
0065FE  2  04 01 C4 10  
006602  2  04 01 44 50  
006606  2               ;	defblock 28,$40
006606  2               explode1:
006606  2  04 1D 14 05          .byte $04,$1D,$14,$05,$00,$1C,$D4,$50,$00,$03,$11,$00
00660A  2  00 1C D4 50  
00660E  2  00 03 11 00  
006612  2  0C 00 40 00          .byte $0C,$00,$40,$00,$34,$45,$1D,$04,$00,$50,$C4,$50
006616  2  34 45 1D 04  
00661A  2  00 50 C4 50  
00661E  2  00 14 CD 51          .byte $00,$14,$CD,$51,$07,$00,$10,$00,$04,$11,$07,$00
006622  2  07 00 10 00  
006626  2  04 11 07 00  
00662A  2               ;	defblock 28,$40
00662A  2               explode2:
00662A  2  01 05 11 07          .byte $01,$05,$11,$07,$01,$15,$45,$5D,$14,$01,$00,$10
00662E  2  01 15 45 5D  
006632  2  14 01 00 10  
006636  2  00 41 5D 45          .byte $00,$41,$5D,$45,$71,$55,$D7,$05,$54,$44,$50,$30
00663A  2  71 55 D7 05  
00663E  2  54 44 50 30  
006642  2  50 74 15 15          .byte $50,$74,$15,$15,$54,$40,$50,$1C,$57,$45,$14,$00
006646  2  54 40 50 1C  
00664A  2  57 45 14 00  
00664E  2               ;	defblock 28,$40
00664E  2               explode3:
00664E  2  04 15 51 40          .byte $04,$15,$51,$40,$11,$05,$10,$4D,$14,$05,$04,$41
006652  2  11 05 10 4D  
006656  2  14 05 04 41  
00665A  2  30 01 44 51          .byte $30,$01,$44,$51,$40,$11,$4D,$14,$05,$11,$54,$C0
00665E  2  40 11 4D 14  
006662  2  05 11 54 C0  
006666  2  10 5C C5 01          .byte $10,$5C,$C5,$01,$45,$51,$40,$10,$44,$01,$4C,$10
00666A  2  45 51 40 10  
00666E  2  44 01 4C 10  
006672  2               ;	defblock 28,$40
006672  2               explode4:
006672  2  C0 04 00 C4          .byte $C0,$04,$00,$C4,$11,$04,$10,$0C,$00,$43,$04,$01
006676  2  11 04 10 0C  
00667A  2  00 43 04 01  
00667E  2  00 10 44 30          .byte $00,$10,$44,$30,$03,$10,$01,$10,$00,$05,$C0,$03
006682  2  03 10 01 10  
006686  2  00 05 C0 03  
00668A  2  40 01 10 44          .byte $40,$01,$10,$44,$30,$01,$00,$04,$11,$0C,$10,$00
00668E  2  30 01 00 04  
006692  2  11 0C 10 00  
006696  2               ;	defblock 28,$40
006696  2               
006696  2               
006696  2               ; weapons -----------------------
006696  2               
006696  2               weapons1:
006696  2  00 01 01 11          .byte $00,$01,$01,$11,$51,$50,$14,$05,$C0,$74,$1D,$03
00669A  2  51 50 14 05  
00669E  2  C0 74 1D 03  
0066A2  2  55 41 54 55          .byte $55,$41,$54,$55,$55,$55,$00,$55,$55,$00,$DD,$77
0066A6  2  55 55 00 55  
0066AA  2  55 00 DD 77  
0066AE  2  00 40 40 44          .byte $00,$40,$40,$44,$45,$05,$14,$50,$01,$37,$DC,$40
0066B2  2  45 05 14 50  
0066B6  2  01 37 DC 40  
0066BA  2               ;	defblock 28,$33
0066BA  2               weapons2:
0066BA  2  00 00 10 54          .byte $00,$00,$10,$54,$55,$15,$05,$01,$00,$00,$00,$02
0066BE  2  55 15 05 01  
0066C2  2  00 00 00 02  
0066C6  2  02 00 20 00          .byte $02,$00,$20,$00,$00,$41,$55,$55,$55,$10,$00,$00
0066CA  2  00 41 55 55  
0066CE  2  55 10 00 00  
0066D2  2  00 08 00 00          .byte $00,$08,$00,$00,$14,$55,$55,$50,$00,$00,$80,$00
0066D6  2  14 55 55 50  
0066DA  2  00 00 80 00  
0066DE  2               ;	defblock 28,$04
0066DE  2               weapons3:
0066DE  2  CC 3F FF 3D          .byte $CC,$3F,$FF,$3D,$CC,$00,$00,$0A,$22,$88,$A0,$00
0066E2  2  CC 00 00 0A  
0066E6  2  22 88 A0 00  
0066EA  2  C2 00 C0 01          .byte $C2,$00,$C0,$01,$54,$00,$80,$00,$00,$01,$05,$05
0066EE  2  54 00 80 00  
0066F2  2  00 01 05 05  
0066F6  2  00 00 50 04          .byte $00,$00,$50,$04,$04,$01,$01,$05,$14,$50,$40,$02
0066FA  2  04 01 01 05  
0066FE  2  14 50 40 02  
006702  2               ;	defblock 28,$44
006702  2               weapons4:
006702  2  C0 03 04 11          .byte $C0,$03,$04,$11,$44,$43,$50,$5C,$15,$05,$C5,$30
006706  2  44 43 50 5C  
00670A  2  15 05 C5 30  
00670E  2  C0 75 FC 77          .byte $C0,$75,$FC,$77,$DF,$F7,$DD,$7F,$00,$55,$55,$55
006712  2  DF F7 DD 7F  
006716  2  00 55 55 55  
00671A  2  0C 40 10 44          .byte $0C,$40,$10,$44,$D1,$41,$C5,$05,$54,$50,$53,$00
00671E  2  D1 41 C5 05  
006722  2  54 50 53 00  
006726  2               ;	defblock 28,$05
006726  2               
006726  2               ; Treasure ----------------------
006726  2               
006726  2               key:
006726  2  03 0F 0C 30          .byte $03,$0F,$0C,$30,$30,$C0,$C0,$30,$30,$0C,$0F,$03
00672A  2  30 C0 C0 30  
00672E  2  30 0C 0F 03  
006732  2  00 C0 C0 30          .byte $00,$C0,$C0,$30,$3F,$0D,$0F,$30,$30,$C0,$C0,$00
006736  2  3F 0D 0F 30  
00673A  2  30 C0 C0 00  
00673E  2  00 00 00 00          .byte $00,$00,$00,$00,$FF,$57,$FF,$C7,$4F,$C3,$00,$00
006742  2  FF 57 FF C7  
006746  2  4F C3 00 00  
00674A  2               ;	defblock 28,$11
00674A  2               chest:
00674A  2  01 04 1F 71          .byte $01,$04,$1F,$71,$55,$55,$50,$50,$10,$55,$55,$15
00674E  2  55 55 50 50  
006752  2  10 55 55 15  
006756  2  55 F4 43 3C          .byte $55,$F4,$43,$3C,$55,$45,$55,$55,$55,$55,$54,$55
00675A  2  55 45 55 55  
00675E  2  55 55 54 55  
006762  2  40 D0 44 FD          .byte $40,$D0,$44,$FD,$55,$55,$04,$05,$05,$55,$55,$54
006766  2  55 55 04 05  
00676A  2  05 55 55 54  
00676E  2               ;	defblock 28,$11
00676E  2               statue:
00676E  2  00 3C C0 FC          .byte $00,$3C,$C0,$FC,$FF,$3F,$03,$08,$00,$83,$0F,$3C
006772  2  FF 3F 03 08  
006776  2  00 83 0F 3C  
00677A  2  03 30 FC 3C          .byte $03,$30,$FC,$3C,$C3,$FF,$FF,$3F,$FF,$C3,$00,$00
00677E  2  C3 FF FF 3F  
006782  2  FF C3 00 00  
006786  2  C0 3C 3C FC          .byte $C0,$3C,$3C,$FC,$F0,$C2,$00,$08,$C0,$F0,$F0,$3C
00678A  2  F0 C2 00 08  
00678E  2  C0 F0 F0 3C  
006792  2               ;	defblock 28,$11
006792  2               jewel:
006792  2  08 00 80 03          .byte $08,$00,$80,$03,$01,$01,$05,$00,$01,$00,$00,$20
006796  2  01 01 05 00  
00679A  2  01 00 00 20  
00679E  2  10 44 45 4D          .byte $10,$44,$45,$4D,$47,$C5,$44,$11,$71,$14,$04,$01
0067A2  2  47 C5 44 11  
0067A6  2  71 14 04 01  
0067AA  2  08 00 02 40          .byte $08,$00,$02,$40,$50,$D4,$04,$50,$50,$40,$40,$08
0067AE  2  50 D4 04 50  
0067B2  2  50 40 40 08  
0067B6  2               ;	defblock 28,$11
0067B6  2               health:
0067B6  2  23 0C 07 55          .byte $23,$0C,$07,$55,$05,$50,$57,$5D,$5D,$1D,$01,$00
0067BA  2  05 50 57 5D  
0067BE  2  5D 1D 01 00  
0067C2  2  C3 77 FF 7D          .byte $C3,$77,$FF,$7D,$D7,$D5,$04,$51,$51,$51,$51,$10
0067C6  2  D7 D5 04 51  
0067CA  2  51 51 51 10  
0067CE  2  C8 30 D0 55          .byte $C8,$30,$D0,$55,$D0,$C5,$75,$75,$75,$74,$40,$00
0067D2  2  D0 C5 75 75  
0067D6  2  75 74 40 00  
0067DA  2               ;	defblock 28,$11
0067DA  2               
0067DA  2               
0067DA  1               	.include "title.inc"
0067DA  2               ; Tile header 128x48 pixels
0067DA  2               
0067DA  2               title:
0067DA  2  AA AA 8A 69          .byte $AA,$AA,$8A,$69,$65,$55,$55,$55,$55,$55,$55,$55,$55,$55,$55,$55
0067DE  2  65 55 55 55  
0067E2  2  55 55 55 55  
0067EA  2  55 55 55 55          .byte $55,$55,$55,$55,$55,$55,$55,$55,$55,$55,$56,$5A,$6A,$AA,$AA,$AA
0067EE  2  55 55 55 55  
0067F2  2  55 55 56 5A  
0067FA  2  AA AA 29 A6          .byte $AA,$AA,$29,$A6,$56,$45,$51,$54,$54,$54,$55,$15,$45,$55,$15,$15
0067FE  2  56 45 51 54  
006802  2  54 54 55 15  
00680A  2  45 55 15 15          .byte $45,$55,$15,$15,$45,$55,$15,$45,$45,$51,$55,$46,$AA,$AA,$AA,$AA
00680E  2  45 55 15 45  
006812  2  45 51 55 46  
00681A  2  AA AA 2A 6A          .byte $AA,$AA,$2A,$6A,$21,$54,$55,$15,$45,$45,$45,$51,$54,$45,$51,$51
00681E  2  21 54 55 15  
006822  2  45 45 45 51  
00682A  2  54 45 51 51          .byte $54,$45,$51,$51,$54,$45,$51,$54,$54,$55,$19,$0A,$8A,$AA,$AA,$AA
00682E  2  54 45 51 54  
006832  2  54 55 19 0A  
00683A  2  AA AA 8A A4          .byte $AA,$AA,$8A,$A4,$99,$95,$44,$51,$11,$11,$14,$45,$11,$14,$44,$45
00683E  2  99 95 44 51  
006842  2  11 11 14 45  
00684A  2  11 14 44 45          .byte $11,$14,$44,$45,$11,$14,$45,$11,$11,$44,$60,$A2,$A2,$AA,$2A,$AA
00684E  2  11 14 45 11  
006852  2  11 44 60 A2  
00685A  2  AA AA 88 2A          .byte $AA,$AA,$88,$2A,$A0,$59,$11,$04,$44,$44,$41,$10,$44,$41,$11,$10
00685E  2  A0 59 11 04  
006862  2  44 44 41 10  
00686A  2  44 41 11 10          .byte $44,$41,$11,$10,$44,$41,$10,$44,$44,$11,$02,$2A,$A2,$AA,$2A,$AA
00686E  2  44 41 10 44  
006872  2  44 11 02 2A  
00687A  2  AA AA 00 0A          .byte $AA,$AA,$00,$0A,$6A,$84,$00,$80,$10,$10,$20,$04,$02,$10,$04,$08
00687E  2  6A 84 00 80  
006882  2  10 10 20 04  
00688A  2  01 20 04 08          .byte $01,$20,$04,$08,$02,$10,$08,$01,$02,$00,$AA,$AA,$A2,$A8,$AA,$AA
00688E  2  02 10 08 01  
006892  2  02 00 AA AA  
00689A  2  AA A8 A0 02          .byte $AA,$A8,$A0,$02,$A2,$20,$20,$08,$08,$08,$02,$00,$80,$02,$02,$00
00689E  2  A2 20 20 08  
0068A2  2  08 08 02 00  
0068AA  2  80 02 02 00          .byte $80,$02,$02,$00,$80,$02,$00,$80,$80,$20,$2A,$AA,$82,$A8,$AA,$AA
0068AE  2  80 02 00 80  
0068B2  2  80 20 2A AA  
0068BA  2  AA A2 A0 00          .byte $AA,$A2,$A0,$00,$2A,$82,$AA,$AA,$AA,$AA,$A0,$2A,$AA,$AA,$20,$AA
0068BE  2  2A 82 AA AA  
0068C2  2  AA AA A0 2A  
0068CA  2  88 8A AA 22          .byte $88,$8A,$AA,$22,$AA,$20,$20,$AA,$AA,$AA,$AA,$AA,$82,$A2,$AA,$AA
0068CE  2  AA 20 20 AA  
0068D2  2  AA AA AA AA  
0068DA  2  AA 8A A8 00          .byte $AA,$8A,$A8,$00,$0A,$20,$80,$00,$02,$A0,$22,$08,$0A,$02,$82,$20
0068DE  2  0A 20 80 00  
0068E2  2  02 A0 22 08  
0068EA  2  A2 28 02 88          .byte $A2,$28,$02,$88,$82,$82,$08,$80,$00,$28,$A2,$AA,$02,$A2,$AA,$AA
0068EE  2  82 82 08 80  
0068F2  2  00 28 A2 AA  
0068FA  2  AA 8A A8 00          .byte $AA,$8A,$A8,$00,$0A,$A2,$80,$00,$00,$A0,$28,$28,$0A,$00,$88,$20
0068FE  2  0A A2 80 00  
006902  2  00 A0 28 28  
00690A  2  20 A0 00 A0          .byte $20,$A0,$00,$A0,$80,$A0,$02,$80,$00,$AA,$2A,$28,$22,$A8,$AA,$AA
00690E  2  80 A0 02 80  
006912  2  00 AA 2A 28  
00691A  2  AA 0A AA 80          .byte $AA,$0A,$AA,$80,$02,$88,$A0,$01,$00,$A0,$28,$88,$0A,$00,$A0,$A0
00691E  2  02 88 A0 01  
006922  2  00 A0 28 88  
00692A  2  2A 80 00 2A          .byte $2A,$80,$00,$2A,$80,$88,$22,$82,$AA,$88,$2A,$A8,$88,$AA,$2A,$AA
00692E  2  80 88 22 82  
006932  2  AA 88 2A A8  
00693A  2  A8 8A AA A8          .byte $A8,$8A,$AA,$A8,$02,$A0,$2A,$80,$AA,$A0,$22,$28,$0A,$00,$28,$A0
00693E  2  02 A0 2A 80  
006942  2  AA A0 22 28  
00694A  2  22 00 A8 0A          .byte $22,$00,$A8,$0A,$80,$A0,$88,$82,$20,$2A,$A2,$A8,$0A,$2A,$2A,$AA
00694E  2  80 A0 88 82  
006952  2  20 2A A2 A8  
00695A  2  A8 88 2A AA          .byte $A8,$88,$2A,$AA,$00,$A8,$22,$80,$88,$A0,$28,$28,$0A,$00,$0A,$A0
00695E  2  00 A8 22 80  
006962  2  88 A0 28 28  
00696A  2  2A 02 8A 08          .byte $2A,$02,$8A,$08,$80,$A0,$02,$82,$88,$88,$A8,$A8,$2A,$2A,$2A,$AA
00696E  2  80 A0 02 82  
006972  2  88 88 A8 A8  
00697A  2  A2 A0 02 AA          .byte $A2,$A0,$02,$AA,$80,$A0,$8A,$80,$A2,$20,$28,$88,$0A,$02,$0A,$20
00697E  2  80 A0 8A 80  
006982  2  A2 20 28 88  
00698A  2  28 02 A2 AA          .byte $28,$02,$A2,$AA,$90,$88,$88,$82,$AA,$22,$2A,$A8,$AA,$88,$AA,$AA
00698E  2  90 88 88 82  
006992  2  AA 22 2A A8  
00699A  2  8A A0 00 AA          .byte $8A,$A0,$00,$AA,$A0,$A2,$02,$80,$A0,$A0,$22,$28,$0A,$12,$02,$A0
00699E  2  A0 A2 02 80  
0069A2  2  A0 A0 22 28  
0069AA  2  28 0A 2A 22          .byte $28,$0A,$2A,$22,$80,$A2,$02,$80,$02,$2A,$A8,$AA,$AA,$88,$AA,$AA
0069AE  2  80 A2 02 80  
0069B2  2  02 2A A8 AA  
0069BA  2  8A A0 00 AA          .byte $8A,$A0,$00,$AA,$A8,$A0,$22,$80,$88,$A0,$28,$48,$4A,$02,$80,$A0
0069BE  2  A8 A0 22 80  
0069C2  2  88 A0 28 48  
0069CA  2  28 08 8A AA          .byte $28,$08,$8A,$AA,$80,$A0,$A2,$84,$0A,$88,$AA,$AA,$AA,$82,$AA,$AA
0069CE  2  80 A0 A2 84  
0069D2  2  0A 88 AA AA  
0069DA  2  A2 A8 00 2A          .byte $A2,$A8,$00,$2A,$AA,$88,$0A,$80,$A0,$A0,$22,$28,$0A,$02,$A0,$A0
0069DE  2  AA 88 0A 80  
0069E2  2  A0 A0 22 28  
0069EA  2  28 0A 28 02          .byte $28,$0A,$28,$02,$80,$A8,$88,$82,$A8,$2A,$22,$AA,$AA,$88,$2A,$AA
0069EE  2  80 A8 88 82  
0069F2  2  A8 2A 22 AA  
0069FA  2  A2 AA AA AA          .byte $A2,$AA,$AA,$AA,$AA,$A0,$82,$80,$A2,$20,$28,$A8,$0A,$02,$20,$20
0069FE  2  AA A0 82 80  
006A02  2  A2 20 28 A8  
006A0A  2  28 02 88 02          .byte $28,$02,$88,$02,$80,$82,$02,$82,$22,$82,$AA,$AA,$AA,$2A,$8A,$AA
006A0E  2  80 82 02 82  
006A12  2  22 82 AA AA  
006A1A  2  80 AA AA AA          .byte $80,$AA,$AA,$AA,$AA,$0A,$AA,$84,$A0,$A0,$0A,$20,$0A,$02,$A8,$01
006A1E  2  AA 0A AA 84  
006A22  2  A0 A0 0A 20  
006A2A  2  2A 02 AA 82          .byte $2A,$02,$AA,$82,$80,$A8,$88,$82,$08,$88,$8A,$AA,$A0,$AA,$A2,$AA
006A2E  2  80 A8 88 82  
006A32  2  08 88 8A AA  
006A3A  2  80 AA 9A AA          .byte $80,$AA,$9A,$AA,$AA,$82,$0A,$80,$88,$28,$4A,$A0,$2A,$02,$8A,$00
006A3E  2  AA 82 0A 80  
006A42  2  88 28 4A A0  
006A4A  2  22 00 AA 02          .byte $22,$00,$AA,$02,$80,$A2,$22,$82,$82,$22,$A2,$AA,$88,$AA,$A2,$AA
006A4E  2  80 A2 22 82  
006A52  2  82 22 A2 AA  
006A5A  2  82 A9 55 AA          .byte $82,$A9,$55,$AA,$AA,$22,$82,$00,$A0,$88,$02,$80,$22,$02,$A2,$00
006A5E  2  AA 22 82 00  
006A62  2  A0 88 02 80  
006A6A  2  2A 81 08 0A          .byte $2A,$81,$08,$0A,$80,$AA,$AA,$82,$AA,$AA,$2A,$AA,$02,$AA,$A0,$AA
006A6E  2  80 AA AA 82  
006A72  2  AA AA 2A AA  
006A7A  2  A2 AA 56 AA          .byte $A2,$AA,$56,$AA,$AA,$00,$80,$02,$A8,$2A,$00,$00,$AA,$02,$8A,$84
006A7E  2  AA 00 80 02  
006A82  2  A8 2A 00 00  
006A8A  2  28 A0 00 28          .byte $28,$A0,$00,$28,$84,$00,$02,$80,$00,$0A,$A2,$AA,$AA,$AA,$A2,$2A
006A8E  2  84 00 02 80  
006A92  2  00 0A A2 AA  
006A9A  2  AA A9 55 AA          .byte $AA,$A9,$55,$AA,$AA,$08,$A8,$0A,$A0,$82,$A0,$0A,$A2,$02,$10,$A0
006A9E  2  AA 08 A8 0A  
006AA2  2  A0 82 A0 0A  
006AAA  2  22 A8 00 A2          .byte $22,$A8,$00,$A2,$80,$00,$0A,$80,$01,$2A,$AA,$AA,$AA,$AA,$8A,$0A
006AAE  2  80 00 0A 80  
006AB2  2  01 2A AA AA  
006ABA  2  AA AA 46 AA          .byte $AA,$AA,$46,$AA,$AA,$82,$8A,$A8,$8A,$22,$2A,$A8,$8A,$AA,$8A,$2A
006ABE  2  AA 82 8A A8  
006AC2  2  8A 22 2A A8  
006ACA  2  AA 2A AA A0          .byte $AA,$2A,$AA,$A0,$AA,$AA,$A8,$AA,$AA,$AA,$8A,$AA,$AA,$AA,$8A,$82
006ACE  2  AA AA A8 AA  
006AD2  2  AA AA 8A AA  
006ADA  2  AA AA 82 AA          .byte $AA,$AA,$82,$AA,$A8,$AA,$AA,$AA,$AA,$AA,$A8,$AA,$AA,$A2,$AA,$AA
006ADE  2  A8 AA AA AA  
006AE2  2  AA AA A8 AA  
006AEA  2  AA A2 AA 08          .byte $AA,$A2,$AA,$08,$2A,$AA,$AA,$AA,$A2,$08,$AA,$2A,$AA,$AA,$2A,$80
006AEE  2  2A AA AA AA  
006AF2  2  A2 08 AA 2A  
006AFA  2  AA AA A2 AA          .byte $AA,$AA,$A2,$AA,$A2,$A0,$00,$00,$A2,$A0,$0A,$88,$08,$AA,$02,$00
006AFE  2  A2 A0 00 00  
006B02  2  A2 A0 0A 88  
006B0A  2  02 AA 02 A0          .byte $02,$AA,$02,$A0,$A0,$A0,$00,$0A,$28,$22,$88,$AA,$AA,$AA,$2A,$88
006B0E  2  A0 A0 00 0A  
006B12  2  28 22 88 AA  
006B1A  2  AA AA A2 AA          .byte $AA,$AA,$A2,$AA,$AA,$20,$00,$00,$2A,$00,$00,$A8,$0A,$8A,$02,$00
006B1E  2  AA 20 00 00  
006B22  2  2A 00 00 A8  
006B2A  2  00 2A 00 82          .byte $00,$2A,$00,$82,$20,$20,$00,$28,$20,$0A,$0A,$AA,$AA,$AA,$2A,$A0
006B2E  2  20 20 00 28  
006B32  2  20 0A 0A AA  
006B3A  2  AA AA A0 AA          .byte $AA,$AA,$A0,$AA,$AA,$A8,$00,$00,$28,$02,$80,$28,$0A,$22,$02,$02
006B3E  2  AA A8 00 00  
006B42  2  28 02 80 28  
006B4A  2  A0 0A 00 A8          .byte $A0,$0A,$00,$A8,$A0,$20,$AA,$A8,$28,$8A,$0A,$AA,$AA,$AA,$8A,$A8
006B4E  2  A0 20 AA A8  
006B52  2  28 8A 0A AA  
006B5A  2  AA AA A8 AA          .byte $AA,$AA,$A8,$AA,$22,$8A,$A0,$6A,$A8,$0A,$A0,$28,$0A,$0A,$02,$02
006B5E  2  22 8A A0 6A  
006B62  2  A8 0A A0 28  
006B6A  2  2A 0A 00 28          .byte $2A,$0A,$00,$28,$A0,$20,$8A,$08,$0A,$28,$28,$AA,$AA,$AA,$8A,$AA
006B6E  2  A0 20 8A 08  
006B72  2  0A 28 28 AA  
006B7A  2  AA AA A8 80          .byte $AA,$AA,$A8,$80,$28,$A2,$20,$22,$20,$08,$A0,$08,$08,$8A,$02,$02
006B7E  2  28 A2 20 22  
006B82  2  20 08 A0 08  
006B8A  2  A2 0A 10 0A          .byte $A2,$0A,$10,$0A,$A0,$60,$A2,$2A,$02,$A0,$2A,$AA,$AA,$AA,$2A,$AA
006B8E  2  A0 60 A2 2A  
006B92  2  02 A0 2A AA  
006B9A  2  A8 22 A8 28          .byte $A8,$22,$A8,$28,$0A,$88,$20,$2A,$A4,$2A,$28,$08,$0A,$22,$02,$02
006B9E  2  0A 88 20 2A  
006BA2  2  A4 2A 28 08  
006BAA  2  2A 0A 02 0A          .byte $2A,$0A,$02,$0A,$20,$20,$AA,$A2,$84,$80,$A2,$AA,$AA,$A0,$AA,$AA
006BAE  2  20 20 AA A2  
006BB2  2  84 80 A2 AA  
006BBA  2  AA 00 A8 A8          .byte $AA,$00,$A8,$A8,$A8,$A0,$A1,$28,$A0,$28,$A8,$48,$0A,$12,$02,$42
006BBE  2  A8 A0 A1 28  
006BC2  2  A0 28 A8 48  
006BCA  2  A0 0A 02 02          .byte $A0,$0A,$02,$02,$A0,$24,$00,$A2,$A0,$02,$A2,$2A,$AA,$88,$2A,$AA
006BCE  2  A0 24 00 A2  
006BD2  2  A0 02 A2 2A  
006BDA  2  AA 8A 20 AA          .byte $AA,$8A,$20,$AA,$AA,$A8,$20,$20,$A0,$62,$08,$08,$08,$8A,$02,$01
006BDE  2  AA A8 20 20  
006BE2  2  A0 62 08 08  
006BEA  2  01 2A 02 84          .byte $01,$2A,$02,$84,$A1,$20,$12,$8A,$28,$1A,$0A,$AA,$A9,$50,$2A,$AA
006BEE  2  A1 20 12 8A  
006BF2  2  28 1A 0A AA  
006BFA  2  AA AA 82 AA          .byte $AA,$AA,$82,$AA,$A2,$88,$A4,$2A,$20,$28,$28,$18,$1A,$2A,$12,$10
006BFE  2  A2 88 A4 2A  
006C02  2  20 28 28 18  
006C0A  2  12 A2 46 A0          .byte $12,$A2,$46,$A0,$A0,$21,$AA,$A2,$29,$08,$82,$A2,$A6,$64,$AA,$AA
006C0E  2  A0 21 AA A2  
006C12  2  29 08 82 A2  
006C1A  2  8A AA 8A AA          .byte $8A,$AA,$8A,$AA,$A8,$A0,$A0,$60,$A4,$28,$A9,$08,$0A,$8A,$02,$42
006C1E  2  A8 A0 A0 60  
006C22  2  A4 28 A9 08  
006C2A  2  A0 AA 02 20          .byte $A0,$AA,$02,$20,$60,$60,$8A,$20,$88,$1A,$08,$8A,$A9,$16,$AA,$AA
006C2E  2  60 60 8A 20  
006C32  2  88 1A 08 8A  
006C3A  2  AA 2A 8A AA          .byte $AA,$2A,$8A,$AA,$8A,$AA,$24,$28,$A0,$1A,$20,$09,$02,$A8,$46,$06
006C3E  2  8A AA 24 28  
006C42  2  A0 1A 20 09  
006C4A  2  24 62 12 A8          .byte $24,$62,$12,$A8,$10,$24,$A0,$88,$A8,$48,$2A,$AA,$AA,$66,$A8,$AA
006C4E  2  10 24 A0 88  
006C52  2  A8 48 2A AA  
006C5A  2  0A AA 8A AA          .byte $0A,$AA,$8A,$AA,$AA,$92,$A1,$2A,$29,$0A,$A4,$6A,$46,$A9,$1A,$12
006C5E  2  AA 92 A1 2A  
006C62  2  29 0A A4 6A  
006C6A  2  A9 2A 42 8A          .byte $A9,$2A,$42,$8A,$00,$61,$A2,$8A,$29,$1A,$02,$2A,$AA,$9A,$AA,$2A
006C6E  2  00 61 A2 8A  
006C72  2  29 1A 02 2A  
006C7A  2  A2 8A 0A AA          .byte $A2,$8A,$0A,$AA,$A8,$A1,$94,$62,$28,$46,$91,$22,$51,$A4,$5A,$46
006C7E  2  A8 A1 94 62  
006C82  2  28 46 91 22  
006C8A  2  8A 1A 06 2A          .byte $8A,$1A,$06,$2A,$44,$24,$AA,$AA,$88,$4A,$8A,$AA,$8A,$AA,$2A,$AA
006C8E  2  44 24 AA AA  
006C92  2  88 4A 8A AA  
006C9A  2  88 A2 2A AA          .byte $88,$A2,$2A,$AA,$8A,$A4,$51,$A8,$8A,$51,$54,$AA,$94,$45,$2A,$52
006C9E  2  8A A4 51 A8  
006CA2  2  8A 51 54 AA  
006CAA  2  2A 46 12 A2          .byte $2A,$46,$12,$A2,$90,$61,$44,$12,$A9,$18,$AA,$8A,$A2,$AA,$AA,$AA
006CAE  2  90 61 44 12  
006CB2  2  A9 18 AA 8A  
006CBA  2  A8 A2 A8 AA          .byte $A8,$A2,$A8,$AA,$AA,$2A,$16,$8A,$0A,$A5,$1A,$88,$A9,$56,$A2,$96
006CBE  2  AA 2A 16 8A  
006CC2  2  0A A5 1A 88  
006CCA  2  A2 96 56 08          .byte $A2,$96,$56,$08,$A5,$65,$11,$4A,$29,$6A,$22,$AA,$A2,$AA,$AA,$AA
006CCE  2  A5 65 11 4A  
006CD2  2  29 6A 22 AA  
006CDA  2  A8 A2 8A 2A          .byte $A8,$A2,$8A,$2A,$A8,$A2,$AA,$A8,$A8,$AA,$A8,$A2,$0A,$AA,$82,$AA
006CDE  2  A8 A2 AA A8  
006CE2  2  A8 AA A8 A2  
006CEA  2  0A AA AA A2          .byte $0A,$AA,$AA,$A2,$2A,$AA,$AA,$AA,$2A,$A2,$A8,$AA,$A0,$AA,$88,$AA
006CEE  2  2A AA AA AA  
006CF2  2  2A A2 A8 AA  
006CFA  2  A8 A8 8A 2A          .byte $A8,$A8,$8A,$2A,$AA,$A8,$AA,$2A,$8A,$A2,$8A,$0A,$28,$8A,$28,$8A
006CFE  2  AA A8 AA 2A  
006D02  2  8A A2 8A 0A  
006D0A  2  28 A2 28 A2          .byte $28,$A2,$28,$A2,$A2,$28,$A0,$A2,$88,$8A,$0A,$AA,$A8,$A8,$AA,$2A
006D0E  2  A2 28 A0 A2  
006D12  2  88 8A 0A AA  
006D1A  2  2A 28 8A 8A          .byte $2A,$28,$8A,$8A,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
006D1E  2  AA AA AA AA  
006D22  2  AA AA AA AA  
006D2A  2  AA AA AA AA          .byte $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$A8,$A2,$AA,$8A
006D2E  2  AA AA AA AA  
006D32  2  AA AA AA AA  
006D3A  2  22 28 A2 8A          .byte $22,$28,$A2,$8A,$A0,$AA,$AA,$AA,$AA,$2A,$AA,$AA,$AA,$AA,$AA,$AA
006D3E  2  A0 AA AA AA  
006D42  2  AA 2A AA AA  
006D4A  2  AA AA AA AA          .byte $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$A0,$A8,$A2,$8A
006D4E  2  AA AA AA AA  
006D52  2  AA AA AA AA  
006D5A  2  8A 2A 22 8A          .byte $8A,$2A,$22,$8A,$88,$2A,$AA,$2A,$A8,$AA,$A8,$AA,$2A,$AA,$A2,$AA
006D5E  2  88 2A AA 2A  
006D62  2  A8 AA A8 AA  
006D6A  2  2A AA A2 82          .byte $2A,$AA,$A2,$82,$AA,$2A,$AA,$22,$A8,$A8,$AA,$AA,$A0,$A8,$8A,$8A
006D6E  2  AA 2A AA 22  
006D72  2  A8 A8 AA AA  
006D7A  2  8A 22 22 8A          .byte $8A,$22,$22,$8A,$20,$8A,$A0,$8A,$88,$A8,$A2,$28,$80,$AA,$A0,$A8
006D7E  2  20 8A A0 8A  
006D82  2  88 A8 A2 28  
006D8A  2  AA 8A 2A 88          .byte $AA,$8A,$2A,$88,$2A,$8A,$AA,$08,$A2,$A8,$AA,$2A,$A2,$A8,$8A,$2A
006D8E  2  2A 8A AA 08  
006D92  2  A2 A8 AA 2A  
006D9A  2  8A A2 22 2A          .byte $8A,$A2,$22,$2A,$80,$8A,$8A,$22,$A2,$8A,$28,$A8,$22,$0A,$82,$28
006D9E  2  80 8A 8A 22  
006DA2  2  A2 8A 28 A8  
006DAA  2  A8 22 AA 20          .byte $A8,$22,$AA,$20,$8A,$2A,$0A,$82,$28,$8A,$28,$82,$82,$A2,$8A,$2A
006DAE  2  8A 2A 0A 82  
006DB2  2  28 8A 28 82  
006DBA  2  8A A2 A2 2A          .byte $8A,$A2,$A2,$2A,$20,$22,$20,$A0,$A2,$8A,$28,$A2,$88,$22,$20,$88
006DBE  2  20 22 20 A0  
006DC2  2  A2 8A 28 A2  
006DCA  2  A2 AA 8A 0A          .byte $A2,$AA,$8A,$0A,$22,$88,$22,$28,$28,$8A,$22,$00,$A0,$A2,$2A,$2A
006DCE  2  22 88 22 28  
006DD2  2  28 8A 22 00  
006DDA  2               
006DDA  1               	.include "complete.inc"
006DDA  2               complete:
006DDA  2  30 0E AA AA          .byte $30,$0E,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$C0,$0C
006DDE  2  AA AA AA AA  
006DE2  2  AA AA AA AA  
006DFA  2  C0 0E AA AA          .byte $C0,$0E,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$B0,$03
006DFE  2  AA AA AA AA  
006E02  2  AA AA AA AA  
006E1A  2  00 3A AA AA          .byte $00,$3A,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$B0,$0C
006E1E  2  AA AA AA AA  
006E22  2  AA AA AA AA  
006E3A  2  00 3A AA AA          .byte $00,$3A,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$C0,$33
006E3E  2  AA AA AA AA  
006E42  2  AA AA AA AA  
006E5A  2  00 EB FA AB          .byte $00,$EB,$FA,$AB,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$C0,$0F
006E5E  2  AA AA AA AA  
006E62  2  AA AA AA AA  
006E7A  2  00 EA CE BE          .byte $00,$EA,$CE,$BE,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$B0,$3F
006E7E  2  AA AA AA AA  
006E82  2  AA AA AA AA  
006E9A  2  00 EA B3 CE          .byte $00,$EA,$B3,$CE,$AF,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$BE,$AA,$B0,$0C
006E9E  2  AF AA AA AA  
006EA2  2  AA AA AA AA  
006EBA  2  00 3A B3 3A          .byte $00,$3A,$B3,$3A,$B0,$FA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$C3,$AA,$AC,$03
006EBE  2  B0 FA AA AA  
006EC2  2  AA AA AA AA  
006EDA  2  00 3A B0 3A          .byte $00,$3A,$B0,$3A,$C3,$AF,$EA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$FF,$55,$AA,$AB,$0F,$EA,$AB,$00
006EDE  2  C3 AF EA AA  
006EE2  2  AA AA AA AA  
006EFA  2  00 0E AC 3B          .byte $00,$0E,$AC,$3B,$0E,$AC,$3A,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$FF,$AA,$AA,$C0,$EA,$AA,$C0
006EFE  2  0E AC 3A AA  
006F02  2  AA AA AA AA  
006F1A  2  00 03 AC EB          .byte $00,$03,$AC,$EB,$3A,$AC,$0E,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$F0,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$E3,$AA,$AA,$BC,$3A,$AA,$C0
006F1E  2  3A AC 0E AA  
006F22  2  AA AA AA AA  
006F3A  2  00 0E AC EC          .byte $00,$0E,$AC,$EC,$3A,$AB,$CE,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$FF,$AA,$AA,$AB,$0E,$AB,$00
006F3E  2  3A AB CE AA  
006F42  2  AA AA AA AA  
006F5A  2  00 0E AC EC          .byte $00,$0E,$AC,$EC,$3A,$AA,$BA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$E3,$55,$AA,$AA,$CE,$AC,$00
006F5E  2  3A AA BA AA  
006F62  2  AA AA AA AA  
006F7A  2  C0 3E BC EC          .byte $C0,$3E,$BC,$EC,$EA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$FF,$AA,$AA,$AA,$C3,$BF,$03
006F7E  2  EA AA AA AA  
006F82  2  AA AA AA AA  
006F9A  2  C0 0F B0 FC          .byte $C0,$0F,$B0,$FC,$EA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$55,$AA,$CF,$CC,$0C
006F9E  2  EA AA AA AA  
006FA2  2  AA AA AA AA  
006FBA  2  30 03 F0 30          .byte $30,$03,$F0,$30,$EA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$55,$AA,$55,$AA,$AA,$C3,$30,$03
006FBE  2  EA AA AA AA  
006FC2  2  AA AA AA AA  
006FDA  2  C0 0C FF 33          .byte $C0,$0C,$FF,$33,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$B0,$C0,$0F
006FDE  2  AA AA AA AA  
006FE2  2  AA AA AA AA  
006FFA  2  0C 03 EF 03          .byte $0C,$03,$EF,$03,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$B0,$00,$03
006FFE  2  AA AA AA AA  
007002  2  AA AA AA AA  
00701A  2  C3 00 FC 3E          .byte $C3,$00,$FC,$3E,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$B0,$00,$3C
00701E  2  AA AA AA AA  
007022  2  AA AA AA AA  
00703A  2  30 03 30 EA          .byte $30,$03,$30,$EA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$B0,$00,$F3
00703E  2  AA AA AA AA  
007042  2  AA AA AA AA  
00705A  2  CC 00 C3 AA          .byte $CC,$00,$C3,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$C0,$00,$CC
00705E  2  AA AA AA AA  
007062  2  AA AA AA AA  
00707A  2  30 30 0E AA          .byte $30,$30,$0E,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$C0,$00,$F3
00707E  2  AA AA AA AA  
007082  2  AA AA AA AA  
00709A  2  CC 00 33 FF          .byte $CC,$00,$33,$FF,$EA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AB,$00,$03,$3C
00709E  2  EA AA AA AA  
0070A2  2  AA AA AA AA  
0070BA  2  30 C0 00 00          .byte $30,$C0,$00,$00,$3E,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AB,$00,$00,$33
0070BE  2  3E AA AA AA  
0070C2  2  AA AA AA AA  
0070DA  2  CC 00 00 CF          .byte $CC,$00,$00,$CF,$03,$EA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AB,$00,$00,$CF
0070DE  2  03 EA AA AA  
0070E2  2  AA AA AA AA  
0070FA  2  FF 00 03 FA          .byte $FF,$00,$03,$FA,$F0,$3A,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AB,$00,$00,$3F
0070FE  2  F0 3A AA AA  
007102  2  AA AA AA AA  
00711A  2  30 C0 0E AA          .byte $30,$C0,$0E,$AA,$AF,$3A,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AB,$00,$03,$0F
00711E  2  AF 3A AA AA  
007122  2  AA AA AA AA  
00713A  2  CC 00 0E AA          .byte $CC,$00,$0E,$AA,$AB,$0E,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AB,$00,$00,$3F
00713E  2  AB 0E AA AA  
007142  2  AA AA AA AA  
00715A  2  F3 00 3E AA          .byte $F3,$00,$3E,$AA,$AB,$CE,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AB,$00,$00,$CF
00715E  2  AB CE AA AA  
007162  2  AA AA AA AA  
00717A  2  CF C0 3A AA          .byte $CF,$C0,$3A,$AA,$AA,$CE,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AB,$00,$00,$33
00717E  2  AA CE AA AA  
007182  2  AA AA AA AA  
00719A  2  F3 30 3A AA          .byte $F3,$30,$3A,$AA,$AA,$C3,$EA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$C0,$00,$0C
00719E  2  AA C3 EA AA  
0071A2  2  AA AA AA AA  
0071BA  2  FC C0 3A AA          .byte $FC,$C0,$3A,$AA,$AB,$C0,$3A,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$C0,$00,$33
0071BE  2  AB C0 3A AA  
0071C2  2  AA AA AA AA  
0071DA  2  FF C0 3A AA          .byte $FF,$C0,$3A,$AA,$AB,$0F,$0E,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$C0,$00,$0C
0071DE  2  AB 0F 0E AA  
0071E2  2  AA AA AA AA  
0071FA  2  FF F0 3E AA          .byte $FF,$F0,$3E,$AA,$AF,$0F,$CE,$AA,$AA,$AA,$AA,$AA,$A6,$A9,$AA,$9A,$9A,$AA,$A6,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$B0,$00,$03
0071FE  2  AF 0F CE AA  
007202  2  AA AA AA AA  
00721A  2  FF 30 0E AA          .byte $FF,$30,$0E,$AA,$AC,$3A,$BA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$A6,$A6,$AA,$69,$AA,$AA,$6A,$A6,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$B0,$00,$0C
00721E  2  AC 3A BA AA  
007222  2  AA AA AA AA  
00723A  2  FF CC 03 AA          .byte $FF,$CC,$03,$AA,$AC,$EA,$AA,$AA,$AA,$AA,$A9,$AA,$6A,$9A,$6A,$6A,$66,$9A,$A9,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AC,$00,$03
00723E  2  AC EA AA AA  
007242  2  AA AA A9 AA  
00725A  2  FF 30 03 AA          .byte $FF,$30,$03,$AA,$AF,$AA,$AA,$AA,$AA,$A6,$AA,$AA,$A9,$A9,$99,$56,$99,$A9,$6A,$A9,$A6,$AA,$A6,$AA,$AA,$AA,$AA,$AA,$AA,$AC,$00,$0C
00725E  2  AF AA AA AA  
007262  2  AA A6 AA AA  
00727A  2  FC CC 03 AA          .byte $FC,$CC,$03,$AA,$AA,$AA,$AA,$AA,$A6,$AA,$AA,$A9,$AA,$66,$96,$65,$96,$5A,$A6,$6A,$9A,$A6,$AA,$A6,$A9,$AA,$AA,$AA,$AA,$AC,$00,$30
00727E  2  AA AA AA AA  
007282  2  A6 AA AA A9  
00729A  2  FF 30 03 AA          .byte $FF,$30,$03,$AA,$AA,$AA,$AA,$A9,$AA,$A9,$AA,$6A,$9A,$A9,$69,$95,$65,$66,$6A,$99,$A9,$AA,$6A,$AA,$9A,$AA,$AA,$AA,$AA,$AB,$00,$03
00729E  2  AA AA AA A9  
0072A2  2  AA A9 AA 6A  
0072BA  2  FF CC 03 AA          .byte $FF,$CC,$03,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$A6,$A9,$A5,$96,$59,$96,$59,$99,$AA,$5A,$A6,$A9,$AA,$AA,$AA,$AA,$AA,$AA,$AB,$00,$00
0072BE  2  AA AA AA AA  
0072C2  2  AA AA AA A6  
0072DA  2  FF F3 03 AA          .byte $FF,$F3,$03,$AA,$AA,$AA,$AA,$6A,$9A,$9A,$A6,$9A,$5A,$9A,$65,$65,$55,$95,$6A,$A9,$A5,$9A,$6A,$A9,$AA,$9A,$AA,$AA,$AA,$AB,$00,$00
0072DE  2  AA AA AA 6A  
0072E2  2  9A 9A A6 9A  
0072FA  2  FF CC 03 AA          .byte $FF,$CC,$03,$AA,$AA,$AA,$AA,$AA,$A9,$AA,$9A,$A6,$AA,$66,$96,$55,$55,$59,$56,$9A,$9A,$6A,$9A,$9A,$A6,$AA,$AA,$AA,$AA,$AB,$00,$00
0072FE  2  AA AA AA AA  
007302  2  A9 AA 9A A6  
00731A  2  FF FF 03 AA          .byte $FF,$FF,$03,$AA,$AA,$AA,$A9,$AA,$AA,$A6,$A9,$9A,$A6,$A6,$59,$55,$55,$55,$99,$AA,$A6,$96,$A9,$AA,$6A,$AA,$9A,$AA,$AA,$AB,$00,$03
00731E  2  AA AA A9 AA  
007322  2  AA A6 A9 9A  
00733A  2  FF CC 03 AA          .byte $FF,$CC,$03,$AA,$AA,$AA,$AA,$AB,$DA,$AA,$6A,$AA,$69,$99,$65,$55,$55,$56,$56,$66,$6A,$6A,$FF,$EA,$AA,$69,$AA,$AA,$AA,$AA,$C0,$03
00733E  2  AA AA AA AB  
007342  2  DA AA 6A AA  
00735A  2  FF F3 03 AA          .byte $FF,$F3,$03,$AA,$AA,$AA,$AA,$FC,$3F,$FF,$FF,$FC,$00,$00,$0F,$55,$55,$F0,$00,$00,$03,$EB,$00,$3F,$EA,$AA,$FF,$EA,$AA,$AA,$C0,$0C
00735E  2  AA AA AA FC  
007362  2  3F FF FF FC  
00737A  2  FF FC 00 EA          .byte $FF,$FC,$00,$EA,$FF,$FF,$FF,$00,$C0,$00,$00,$00,$C3,$00,$00,$00,$F0,$00,$F0,$0C,$F0,$3C,$33,$00,$3A,$BF,$00,$3F,$FA,$AF,$F0,$03
00737E  2  FF FF FF 00  
007382  2  C0 00 00 00  
00739A  2  FF F3 00 FF          .byte $FF,$F3,$00,$FF,$C0,$C0,$00,$3F,$3C,$00,$3C,$F0,$00,$30,$33,$0C,$00,$3C,$00,$0C,$00,$03,$00,$03,$0F,$C0,$33,$00,$0F,$F0,$F0,$00
00739E  2  C0 C0 00 3F  
0073A2  2  3C 00 3C F0  
0073BA  2  FF CC 00 FC          .byte $FF,$CC,$00,$FC,$0F,$0C,$03,$00,$30,$F3,$00,$3C,$00,$33,$C0,$03,$00,$00,$C3,$00,$00,$CC,$00,$F0,$C0,$3C,$00,$F3,$C0,$00,$F0,$03
0073BE  2  0F 0C 03 00  
0073C2  2  30 F3 00 3C  
0073DA  2  FF CC 00 33          .byte $FF,$CC,$00,$33,$30,$30,$03,$03,$0C,$00,$00,$00,$CC,$00,$00,$00,$30,$00,$00,$03,$C3,$00,$00,$00,$F0,$30,$00,$00,$00,$FC,$30,$00
0073DE  2  30 30 03 03  
0073E2  2  0C 00 00 00  
0073FA  2  FF 33 00 3C          .byte $FF,$33,$00,$3C,$00,$0C,$30,$30,$00,$00,$00,$0C,$00,$00,$00,$00,$0F,$00,$00,$00,$00,$00,$3F,$00,$C3,$00,$30,$00,$C0,$00,$30,$00
0073FE  2  00 0C 30 30  
007402  2  00 00 00 0C  
00741A  2  FF FC 00 3C          .byte $FF,$FC,$00,$3C,$0C,$00,$30,$00,$03,$C0,$C3,$00,$00,$30,$0C,$C0,$00,$F0,$30,$C0,$00,$03,$00,$30,$00,$00,$0F,$0C,$C0,$30,$30,$00
00741E  2  0C 00 30 00  
007422  2  03 C0 C3 00  
00743A  2  FF 33 00 0C          .byte $FF,$33,$00,$0C,$30,$0F,$03,$0F,$CC,$FF,$00,$00,$3C,$0C,$30,$00,$F0,$3C,$03,$CC,$F0,$0C,$C0,$00,$00,$03,$0C,$0C,$00,$F3,$30,$00
00743E  2  30 0F 03 0F  
007442  2  CC FF 00 00  
00745A  2  FF CC 00 0F          .byte $FF,$CC,$00,$0F,$03,$F3,$FC,$FC,$F3,$DC,$FC,$00,$03,$00,$00,$30,$00,$F3,$03,$00,$00,$FF,$3C,$00,$00,$C0,$00,$0C,$00,$C0,$F0,$00
00745E  2  03 F3 FC FC  
007462  2  F3 DC FC 00  
00747A  2  FF 30 00 0C          .byte $FF,$30,$00,$0C,$C3,$CF,$7F,$CF,$CC,$FF,$F3,$3C,$00,$00,$00,$0F,$00,$CF,$C0,$F0,$03,$CF,$CF,$0C,$00,$03,$F0,$0C,$0C,$C3,$30,$00
00747E  2  C3 CF 7F CF  
007482  2  CC FF F3 3C  
00749A  2  FC CC 30 03          .byte $FC,$CC,$30,$03,$0C,$3C,$FC,$FF,$FF,$F3,$3F,$F3,$00,$03,$F0,$00,$0C,$3C,$F0,$00,$0F,$34,$F0,$F3,$C3,$FF,$3C,$C0,$00,$00,$C0,$00
00749E  2  0C 3C FC FF  
0074A2  2  FF F3 3F F3  
0074BA  2  FF 30 00 03          .byte $FF,$30,$00,$03,$03,$33,$FF,$0C,$3C,$0F,$FC,$CC,$CC,$FC,$3F,$03,$FF,$0F,$CF,$C0,$33,$FF,$3F,$3C,$3F,$7C,$F3,$33,$00,$00,$C0,$03
0074BE  2  03 33 FF 0C  
0074C2  2  3C 0F FC CC  
0074DA  2  FC FC 00 03          .byte $FC,$FC,$00,$03,$C3,$3C,$CF,$FC,$F3,$F0,$CF,$FF,$F3,$F3,$F3,$C3,$C3,$3F,$FF,$FC,$3C,$FC,$CC,$F3,$CC,$CF,$CC,$FC,$F0,$33,$00,$0C
0074DE  2  C3 3C CF FC  
0074E2  2  F3 F0 CF FF  
0074FA  2  FF C3 00 03          .byte $FF,$C3,$00,$03,$33,$03,$3F,$33,$FC,$CF,$3C,$DF,$3F,$7C,$CC,$0C,$33,$F3,$CF,$CF,$03,$3F,$33,$FF,$33,$F3,$FF,$33,$0F,$0F,$00,$33
0074FE  2  33 03 3F 33  
007502  2  FC CF 3C DF  
00751A  2  FC FC 00 00          .byte $FC,$FC,$00,$00,$C0,$30,$0C,$CC,$33,$3F,$3F,$3C,$CF,$F0,$F0,$F3,$FC,$FF,$FF,$FC,$30,$F0,$F3,$33,$CF,$3F,$CC,$FC,$C0,$03,$00,$0C
00751E  2  C0 30 0C CC  
007522  2  33 3F 3F 3C  
00753A  2  F3 CC 00 00          .byte $F3,$CC,$00,$00,$CC,$F0,$F0,$F0,$0F,$CC,$CF,$F3,$FC,$CF,$0F,$FC,$F3,$3F,$F3,$FF,$00,$03,$3C,$FC,$C3,$0C,$F3,$00,$F3,$03,$00,$33
00753E  2  CC F0 F0 F0  
007542  2  0F CC CF F3  
00755A  2  FF FF 03 00          .byte $FF,$FF,$03,$00,$F3,$C3,$03,$0C,$F0,$30,$F3,$0C,$C3,$3C,$CF,$F0,$0F,$FF,$FF,$FF,$F3,$CC,$CF,$3F,$3C,$F3,$0C,$CC,$00,$33,$00,$FC
00755E  2  F3 C3 03 0C  
007562  2  F0 30 F3 0C  
00757A  2  F3 CF 00 00          .byte $F3,$CF,$00,$00,$C3,$C0,$C0,$33,$33,$03,$0F,$3F,$3F,$FF,$33,$CC,$0F,$3C,$FC,$FF,$FC,$C3,$CC,$CC,$C3,$30,$03,$0F,$00,$03,$00,$33
00757E  2  C3 C0 C0 33  
007582  2  33 03 0F 3F  
00759A  2  FC CC C0 00          .byte $FC,$CC,$C0,$00,$F0,$C0,$30,$00,$0C,$C0,$F0,$C3,$CF,$CF,$CF,$3C,$3C,$FF,$FF,$F3,$FC,$03,$30,$03,$0C,$C3,$03,$00,$00,$0C,$00,$0C
00759E  2  F0 C0 30 00  
0075A2  2  0C C0 F0 C3  
0075BA  2  CF 3F 30 00          .byte $CF,$3F,$30,$00,$CC,$C3,$03,$C3,$03,$0C,$0C,$CF,$FF,$33,$30,$C3,$3C,$FC,$FF,$FF,$FF,$00,$03,$00,$30,$03,$00,$00,$30,$3C,$00,$C3
0075BE  2  CC C3 03 C3  
0075C2  2  03 0C 0C CF  
0075DA  2  3C FC F0 C3          .byte $3C,$FC,$F0,$C3,$30,$FC,$3F,$30,$CC,$33,$C3,$0C,$F0,$FC,$0C,$0F,$F3,$FF,$F3,$FF,$CF,$C0,$30,$33,$00,$0C,$0C,$30,$C3,$0C,$00,$0C
0075DE  2  30 FC 3F 30  
0075E2  2  CC 33 C3 0C  
0075FA  2  33 33 30 30          .byte $33,$33,$30,$30,$3C,$3C,$CC,$FC,$00,$0F,$33,$33,$C3,$33,$33,$3F,$33,$FF,$FC,$F3,$FF,$F3,$0C,$00,$C3,$00,$CC,$C3,$30,$0C,$0C,$F3
0075FE  2  3C 3C CC FC  
007602  2  00 0F 33 33  
00761A  2  CF CC CC 00          .byte $CF,$CC,$CC,$00,$33,$03,$F3,$33,$30,$C0,$00,$00,$30,$0C,$C0,$33,$CF,$F3,$CF,$FF,$FF,$F0,$C0,$F0,$00,$00,$00,$C0,$CF,$F0,$30,$F3
00761E  2  33 03 F3 33  
007622  2  30 C0 00 00  
00763A  2  33 3F 33 00          .byte $33,$3F,$33,$00,$0C,$00,$3F,$FC,$03,$FC,$CC,$30,$FC,$30,$0C,$FF,$3F,$F3,$FF,$CF,$3C,$FC,$33,$CF,$0F,$00,$F0,$0C,$3F,$30,$03,$F0
00763E  2  0C 00 3F FC  
007642  2  03 FC CC 30  
00765A  2  FC CF FC 00          .byte $FC,$CF,$FC,$00,$0C,$CF,$0F,$CF,$30,$CC,$00,$F3,$C3,$00,$00,$CF,$FF,$FF,$F3,$3F,$FF,$FF,$00,$0C,$33,$33,$55,$33,$3C,$F0,$03,$C3
00765E  2  0C CF 0F CF  
007662  2  30 CC 00 F3  
00767A  2  F0 C0 00 00          .byte $F0,$C0,$00,$00,$0C,$C3,$00,$F3,$CF,$00,$0C,$30,$3F,$CC,$3C,$3C,$FF,$0F,$FF,$FC,$0F,$FF,$C0,$00,$FF,$C0,$55,$0C,$F3,$C0,$C0,$0F
00767E  2  0C C3 00 F3  
007682  2  CF 00 0C 30  
00769A  2  CC F3 F0 03          .byte $CC,$F3,$F0,$03,$03,$30,$C0,$00,$00,$00,$3F,$03,$0F,$30,$3C,$F3,$FC,$FF,$0F,$FF,$FF,$FF,$F0,$0F,$3F,$0C,$0F,$30,$00,$C0,$00,$CC
00769E  2  03 30 C0 00  
0076A2  2  00 00 3F 03  
0076BA  2  0F 30 F0 00          .byte $0F,$30,$F0,$00,$03,$00,$0F,$3F,$3F,$F3,$FF,$FF,$00,$0C,$FF,$F3,$FF,$FF,$C3,$FF,$FF,$FF,$FC,$00,$0C,$03,$F0,$0F,$C0,$C0,$00,$33
0076BE  2  03 00 0F 3F  
0076C2  2  3F F3 FF FF  
0076DA  2               
0076DA  1               eind_asm:
0076DA  1               
